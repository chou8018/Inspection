//
//  DamageViewController.swift
//  Inspection
//
//  Created by Thanawat Pratumsat on 7/6/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DamageDisplayLogic: AnyObject
{
  func displaySomething(viewModel: Damage.Something.ViewModel)
    func displayImagePreview(viewModel: Damage.Something.ViewModel)
    func displayCallbackDamageImage(viewModel: Damage.Something.ViewModel)
    var callbackDamageImage: ((Damage.DamageImage) -> Void)? { get set }
    
    func  displayRequiredField(viewModel: Damage.Something.ViewModel)
    func displayTypeDemageDropdown(viewModel: Damage.Something.ViewModel)
    func displayDamageSizeListDropdown(viewModel: Damage.Something.ViewModel)
    func displayDamageDetailListDropdown(viewModel: Damage.Something.ViewModel)
    func displayDamagePosListDropdown(viewModel: Damage.Something.ViewModel)
    
}

class DamageViewController: UIViewController, DamageDisplayLogic
{
    var callbackDamageImage: ((Damage.DamageImage) -> Void)?
    
  var interactor: DamageBusinessLogic?
  var router: (NSObjectProtocol & DamageRoutingLogic & DamageDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DamageInteractor()
    let presenter = DamagePresenter()
    let router = DamageRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    setUpDropdown()
    setUpImagePicker()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var option1Dropdown: DropDown!
    @IBOutlet weak var option2Dropdown: DropDown!
    @IBOutlet weak var option3Dropdown: DropDown!
    @IBOutlet weak var option4Dropdown: DropDown!
    @IBOutlet weak var addImageView: CustomUIView!
    @IBOutlet weak var previewImage: UIImageView!
    
    @IBOutlet weak var option1Label:UILabel!
    @IBOutlet weak var option2Label:UILabel!
    @IBOutlet weak var option3Label:UILabel!
    @IBOutlet weak var option4Label:UILabel!
    
    @IBOutlet weak var option1View:UIView!
    @IBOutlet weak var option2View:UIView!
    @IBOutlet weak var option3View:UIView!
    @IBOutlet weak var option4View:UIView!
    
    @IBOutlet weak var damageView:UIView!
    @IBOutlet weak var damaneViewImage:UIImageView!
    
    @IBOutlet weak var makeDemageDetailLabel:UILabel!
    @IBOutlet weak var makeDemageSizeLabel:UILabel!
    @IBOutlet weak var makeDemageTypeLabel:UILabel!
    
    var dataSource = DataSourceCollectionView()
    var imagePicker: ImagePicker!
    
    var position:String = "" {
        didSet{
            makeDemageDetailLabel.text = "ตำแหน่ง  \(desc)"
        }
    }
    var detail:String = "" {
        didSet{
            makeDemageDetailLabel.text = "ตำแหน่ง  \(desc)"
        }
    }
    var desc:String {
        return "\(detail), \(position)"
    }
    
  func doSomething()
  {
    let request = Damage.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Damage.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
   
    //MARK: ImagePicker
    func setUpImagePicker(){
        imagePicker = ImagePicker(presentationController: self)
        imagePicker.delegateImage = self

        addImageView.isUserInteractionEnabled = true
        addImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(addPhotoViewTap)))
    }
    @objc func addPhotoViewTap() {
        self.addImageView.fadeIn { [weak self] in
            guard let weakself = self else { return }
            weakself.imagePicker.present(from: weakself.addImageView)
        }
    }
    func displayImagePreview(viewModel: Damage.Something.ViewModel) {
        guard  let imageResized = viewModel.imageResized else { return }
        DispatchQueue.main.async { [weak self] in
            self?.previewImage.image = imageResized
            self?.damaneViewImage.image = imageResized
        }
        hideLoading()
        
    }
    
   //MARK: Dropdown
    func setUpDropdown(){
        
        interactor?.getDemageDetail(request: Damage.Something.Request())
        interactor?.getDemagePosition(request: Damage.Something.Request())
        interactor?.getTypeDemage(request: Damage.Something.Request())
        interactor?.getDemageSize(request: Damage.Something.Request())
    
    }
   

    func displayTypeDemageDropdown(viewModel: Damage.Something.ViewModel) {
        guard let values = viewModel.damageTypeList else { return }
        setValue(to: option3Dropdown, values: values) { [weak self] (selectValue, _, _)  in
            self?.interactor?.selectTypeDemage(request: Damage.Something.Request(typeOfDamage: selectValue))
            self?.option3Dropdown.text = selectValue
            self?.makeDemageTypeLabel.text = "รายละเอียด  \(selectValue)"
        }
    }
    
    func displayDamageSizeListDropdown(viewModel: Damage.Something.ViewModel) {
        guard let values = viewModel.damageSizeList else { return }
        setValue(to: option4Dropdown, values: values) { [weak self] (selectValue, _, _)  in
            self?.interactor?.selectDemageSize(request: Damage.Something.Request(damageSize: selectValue))
            self?.option4Dropdown.text = selectValue
            self?.makeDemageSizeLabel.text = "ความเสียหาย  \(selectValue)"
        }
    }
    
    func displayDamagePosListDropdown(viewModel: Damage.Something.ViewModel) {
        guard let values = viewModel.damagePosList else { return }
        setValue(to: option2Dropdown, values: values) { [weak self] (selectValue, _, _)  in
            self?.interactor?.selectDemagePosition(request: Damage.Something.Request(damagePosition: selectValue))
            self?.option2Dropdown.text = selectValue
            self?.position = selectValue
        }
    }
   
    func displayDamageDetailListDropdown(viewModel: Damage.Something.ViewModel) {
        guard let values = viewModel.damageDetailList else { return }
        setValue(to: option1Dropdown, values: values) { [weak self] (selectValue, _, _)  in
            self?.interactor?.selectDemageDetail(request: Damage.Something.Request(damageDetail: selectValue))
            self?.option1Dropdown.text = selectValue
            self?.detail = selectValue
        }
    }
    
    func setValue(to textfield:DropDown , values: [String], didSelected:@escaping (_ selectedText: String, _ index: Int , _ id:Int )->() ){
        textfield.optionArray = values
        textfield.didSelect(completion: didSelected)
    }
    
    @IBAction func confirmTapped(_ sender: Any) {
        let request = Damage.Something.Request()
        interactor?.getDamageModel(request: request)
        interactor?.requiredField(request: request)
        
    }
    
    func displayRequiredField(viewModel: Damage.Something.ViewModel) {
        guard let tuple = viewModel.requiredFieldTuple else { return }
        
        option1Label.validateLabel(tuple.damageDetail)
        option2Label.validateLabel(tuple.damagePosition)
        option3Label.validateLabel(tuple.typeOfDamage)
        option4Label.validateLabel(tuple.damageSize)
        
        option1View.validateLineView(tuple.damageDetail)
        option2View.validateLineView(tuple.damagePosition)
        option3View.validateLineView(tuple.typeOfDamage)
        option4View.validateLineView(tuple.damageSize)
    }
    
    func displayCallbackDamageImage(viewModel: Damage.Something.ViewModel) {
        guard let damageModel = viewModel.damageModel else { return }
        let image = damageView.getImage()
//        let size = image?.getFileSize()
        
//        print("🔸🔻 filesize \(size), \(type(of: size))")
        damageModel.image = image
        dismiss(animated: true) { [weak self] in
            self?.callbackDamageImage?(damageModel)
        }
    }
    
    @IBAction func cancelTapped(_ sender: Any) {
        dismiss(animated: true, completion: nil)
    }
    
}


extension DamageViewController : ImagePickerPresenter {

    func didSelectCallback() {
        showLoading()
    }
   
    func pickImageCallback(image: UIImage?, url: URL?) {
        guard let image =  image  else { return }
        let request = Damage.Something.Request(image: image)
        interactor?.addPhoto(request: request)
    }
   
   
}

extension DamageViewController  {
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        presentationController?.presentedView?.gestureRecognizers?.first?.isEnabled = false
    }
}
