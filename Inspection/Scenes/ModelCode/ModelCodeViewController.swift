//
//  ModelCodeViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 9/3/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ModelCodeDisplayLogic: AnyObject
{
    func displaySomething(viewModel: ModelCode.Something.ViewModel)
    func displayReloadTableView(viewModel: ModelCode.Something.ViewModel)
    func displayYearCarDropDown(viewModel: ModelCode.Something.ViewModel)
    func displayMakeCarDropDown(viewModel: ModelCode.Something.ViewModel)
    func displayModelCarDropDown(viewModel: ModelCode.Something.ViewModel)
    func validateSearchModelCode(viewModel: ModelCode.Something.ViewModel)
    
    func displayErrorMakeMessage(viewModel: ModelCode.Something.ViewModel)
    func displayErrorModelMessage(viewModel: ModelCode.Something.ViewModel)
    func displayErrorSearchMessage(viewModel: ModelCode.Something.ViewModel)
    
    func displayToEditModelCode(viewModel: ModelCode.Something.ViewModel)
    //var callbackDidSelectModelCode: ((SearchCodeModel)->Void)? { get set }
    
}

class ModelCodeViewController: ViewController, ModelCodeDisplayLogic
{
    //var callbackDidSelectModelCode: ((SearchCodeModel) -> Void)?
    
    var interactor: ModelCodeBusinessLogic?
    var router: (NSObjectProtocol & ModelCodeRoutingLogic & ModelCodeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ModelCodeInteractor()
        let presenter = ModelCodePresenter()
        let router = ModelCodeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        isModalInPresentation = true
        doSomething()
        setUpTableView()
        setUpDropdown()
        
        
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var yearDropDown: DropDown!
    @IBOutlet weak var makeDropDown: DropDown!
    @IBOutlet weak var modelDropDown: DropDown!
    
    @IBOutlet weak var modelCodeCustomTextField: CustomTextField!
    @IBOutlet weak var mottoModelCodeCustomTextField: CustomTextField!
    @IBOutlet weak var chassisCustomTextField: CustomTextField!
    
    let codeModelDataSource = CodeModelDataSource()
    
    // local strings
    @IBOutlet weak var searchChassisLabel: UILabel!
    @IBOutlet weak var chassisTitleLabel: UILabel!
    @IBOutlet weak var detailTitleLabel: UILabel!
    @IBOutlet weak var backButtonItem: UIBarButtonItem!
    
    override func initLocalString() {
        super.initLocalString()
        
        self.title = String.localized("mode_code_title_label")
        searchChassisLabel.text = String.localized("mode_code_search_chassis_label")
        chassisCustomTextField.placeholder = searchChassisLabel.text
        chassisTitleLabel.text = String.localized("inspection_body_chassis_label")
        detailTitleLabel.text = String.localized("inspection_gauges_details_placeholder_label")
        backButtonItem.title = String.localized("create_model_back_label")
    }
    
    func doSomething()
    {
        let request = ModelCode.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    @IBAction func dismissTaped(_ sender: Any) {
        dismiss(animated: true, completion: nil)
    }
    
    func displaySomething(viewModel: ModelCode.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    //MARK: Presenter
    
    func setUpYear(){
        let request = ModelCode.Something.Request(starterYear: 1980)
        interactor?.setUpYear(request: request)
    }
    func fetchMakeCar(){
        
        let request = ModelCode.Something.Request()
        interactor?.getMakeCar(request: request)
    }
    func fetchModelCode(){
        let request = ModelCode.Something.Request()
        self.interactor?.validateKey(request: request)
    }
    func getModelCarList(){
        
        let request = ModelCode.Something.Request()
        self.interactor?.getModelCode(request: request)
    }
    func getModelCar(){
        
        let request = ModelCode.Something.Request()
        self.interactor?.getModelCar(request: request)
    }
    
    func validateSearchModelCode(viewModel: ModelCode.Something.ViewModel) {
        getModelCarList()
    }
    
    func displayYearCarDropDown(viewModel: ModelCode.Something.ViewModel) {
        guard let yearList = viewModel.yearList else { return }
        setValue(to: yearDropDown, values: yearList) { [weak self] (selectValue, _, _) in
            self?.yearDropDown.text = selectValue
            let request = ModelCode.Something.Request(year: selectValue)
            self?.interactor?.selectYear(request: request)
            self?.fetchModelCode()
        }
    }
    func displayMakeCarDropDown(viewModel: ModelCode.Something.ViewModel) {
        
        guard let makeList = viewModel.makeList else { return }
        setValue(to: makeDropDown, values: makeList) { [weak self] (selectValue, _, _) in
            self?.makeDropDown.text = selectValue
            let request = ModelCode.Something.Request(make: selectValue)
            self?.interactor?.selectMake(request: request)
            self?.getModelCar()
            self?.fetchModelCode()
        }
    }
    func displayModelCarDropDown(viewModel: ModelCode.Something.ViewModel) {
        
        guard let modelList = viewModel.modelList else { return }
        setValue(to: modelDropDown, values: modelList) { [weak self] (selectValue, _, _) in
            self?.modelDropDown.text = selectValue
            let request = ModelCode.Something.Request(model: selectValue)
            self?.interactor?.selectModel(request: request)
            self?.fetchModelCode()
        }
    }
    
    
    
    
    
    func displayErrorMakeMessage(viewModel: ModelCode.Something.ViewModel){
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.fetchMakeCar()
        }
    }
    func displayErrorModelMessage(viewModel: ModelCode.Something.ViewModel){
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.getModelCar()
        }
    }
    func displayErrorSearchMessage(viewModel: ModelCode.Something.ViewModel){
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessageOKAction(message: errorMessage) {
            //ignored
        }
    }
    
    
    //MARK: SetUpView
    func setUpTableView(){
        codeModelDataSource.didSelectRowAt = { [weak self] item in
            let desc = item.description_BU ?? ""
            self?.alert(message: "\(String.localized("mode_code_want_choose_label"))\n\(desc) \(String.localized("photos_delete_tail_title"))", { [weak self] in
                guard let weakself =  self else { return }
                
                //self?.callbackDidSelectModelCode?(item)
                
                (weakself.navigationController as! ModelCodeNavViewController).callbackModelCode?(item)
                
                weakself.dismiss(animated: true, completion: nil)
            })
        }
        codeModelDataSource.didEditSelectRowAt = { [weak self] item in
            let request = ModelCode.Something.Request(modelCodeTemplate: item)
            self?.interactor?.editModelCode(request: request)
        }
        tableView.dataSource = codeModelDataSource
        tableView.delegate = codeModelDataSource
    }
    func setUpDropdown(){
        //        yearDropDown.autocorrectionType = .no
        //        makeDropDown.autocorrectionType = .no
        //        modelDropDown.autocorrectionType = .no
        //
        //        addTarget(from: yearDropDown)
        //        addTarget(from: makeDropDown)
        //        addTarget(from: modelDropDown)
        
        mottoModelCodeCustomTextField.autocorrectionType = .no
        modelCodeCustomTextField.autocorrectionType = .no
        chassisCustomTextField.autocorrectionType = .no
        
        mottoModelCodeCustomTextField.delegate = self
        modelCodeCustomTextField.delegate = self
        chassisCustomTextField.delegate = self
        
    }
    
    //MARK: Search ModelCode
    func searchModelCode(_ code:String ){
        let request = ModelCode.Something.Request(modelCode: code)
        interactor?.searchModelCode(request: request)
    }
    
    //MARK: Search ModelCode CH
    func searchModelCodeByCH(_ code:String ){
        let request = ModelCode.Something.Request(modelCode: code)
        interactor?.searchModelCodeByCH(request: request)
    }
    
    
    //MARK: Search ModelCode DP
    func searchModelCodeByDP(_ code:String ){
        let request = ModelCode.Something.Request(modelCode: code)
        interactor?.searchModelCodeByDP(request: request)
    }
    
    func reloadResultSearch(){
        let request = ModelCode.Something.Request()
        interactor?.reloadResultSearch(request: request)
    }
    
    func displayReloadTableView(viewModel: ModelCode.Something.ViewModel) {
        
        codeModelDataSource.itemList =  viewModel.modelCodeTemplateList ?? []
        codeModelDataSource.tableType = viewModel.tableType ?? .Default
        tableView.reloadData()
    }
    
    
    
    fileprivate func addTarget(from textfield: UITextField ){
        textfield.addTarget(self, action: #selector(textFieldDidChange(_:)),for: .editingChanged)
    }
    
    func setValue(to textfield:DropDown , values: [String], didSelected:@escaping (_ selectedText: String, _ index: Int , _ id:Int )->() ){
        textfield.text = ""
        textfield.optionArray = values
        textfield.didSelect(completion: didSelected)
    }
    
    
    func displayToEditModelCode(viewModel: ModelCode.Something.ViewModel) {
        performEditModelCode()
    }
    
    func performEditModelCode(){
        performSegue(withIdentifier: "editModelCodeSegue", sender: nil)
    }
    
}

extension ModelCodeViewController {
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        //setUpYear()
        //fetchMakeCar()
        
        reloadResultSearch()
    }
}

extension  ModelCodeViewController {
    @objc func textFieldDidChange(_ textField: UITextField) {
        //print(textField.text)
    }
    
}

extension ModelCodeViewController : UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        switch textField {
        case mottoModelCodeCustomTextField:
            print("search by motto modelcode")
            self.searchModelCodeByDP(textField.text!)
            
        case modelCodeCustomTextField:
            print("search by modelcode")
            self.searchModelCode(textField.text!)
            
        case chassisCustomTextField:
            print("search by chassis")
            self.searchModelCodeByCH(textField.text!)
            
        default:
            break
        }
        return true
    }
}


