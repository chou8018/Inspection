//
//  PickUpCarPresenter.swift
//  Inspection
//
//  Created by Thanawat prathumset on 4/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PickUpCarPresentationLogic
{
  func presentSomething(response: PickUpCar.Something.Response)
    func presentReceiverDayTime(response: PickUpCar.Something.Response)
    func presentDPF(response: PickUpCar.Something.Response)
     
    func presentReceiverBookIN(response: PickUpCar.Something.Response)
    func presentRequiteField(response: PickUpCar.Something.Response)
    
    func presentValidateSendToIMAT(response: PickUpCar.Something.Response)
    
    func presentSendToIMAT(response: PickUpCar.Something.Response)
    
}

class PickUpCarPresenter: PickUpCarPresentationLogic
{
  weak var viewController: PickUpCarDisplayLogic?
  
  // MARK: Do something
  
  func presentSomething(response: PickUpCar.Something.Response)
  {
    let viewModel = PickUpCar.Something.ViewModel()
    viewController?.displaySomething(viewModel: viewModel)
  }
    
    func presentReceiverDayTime(response: PickUpCar.Something.Response) {
        let viewModel = PickUpCar.Something.ViewModel(dayTime: response.dayTime)
        viewController?.displayReceiverDayTime(viewModel: viewModel)
    }
    
    func presentDPF(response: PickUpCar.Something.Response) {
        let viewModel = PickUpCar.Something.ViewModel()
        viewController?.displayDPF(viewModel: viewModel)
    }
    
    func presentReceiverBookIN(response: PickUpCar.Something.Response) {
        if let error = response.error {
            let viewModel = PickUpCar.Something.ViewModel(errorMessage: error.message)
            viewController?.displayErrorReceiverBookIn(viewModel: viewModel)
        }else{
            let viewModel = PickUpCar.Something.ViewModel()
            viewController?.displaySuccessReceiverBookIn(viewModel: viewModel)
        }
    }
     
    func presentRequiteField(response: PickUpCar.Something.Response) {
        if let error = response.validateRequiteFieldError {
            let viewModel = PickUpCar.Something.ViewModel(errorMessage : error)
            viewController?.displayRequiteFieldError(viewModel: viewModel)
        }else{
            let viewModel = PickUpCar.Something.ViewModel()
            viewController?.displayRequiteFieldSuccess(viewModel: viewModel)
        }
        
        
    }
    
    
    func presentValidateSendToIMAT(response: PickUpCar.Something.Response) {

        let viewModel = PickUpCar.Something.ViewModel(isEnableSendToIMAP: response.isEnableSendToIMAP, isEnableSave: response.isEnableSave)
        viewController?.displayActionEventSuccess(viewModel: viewModel)
    }
    
    
    func presentSendToIMAT(response: PickUpCar.Something.Response) {
        if let error = response.error {
            let viewModel = PickUpCar.Something.ViewModel(errorMessage : error.message)
            viewController?.displayIMATError(viewModel: viewModel)
        }else{
            let viewModel = PickUpCar.Something.ViewModel()
            viewController?.displayIMATSuccess(viewModel: viewModel)
        }
    }
    
    
}
