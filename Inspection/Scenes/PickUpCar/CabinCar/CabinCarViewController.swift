//
//  CabinCarViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RadioGroup

protocol CabinCarDisplayLogic: AnyObject
{
    func displaySomething(viewModel: CabinCar.Something.ViewModel)
    func displayValidateMileNumber(viewModel: CabinCar.Something.ViewModel)
    func displayKeyChecked(viewModel: CabinCar.Something.ViewModel)
    func displayRemoteChecked(viewModel: CabinCar.Something.ViewModel)
    func displayRemoteKeyChecked(viewModel: CabinCar.Something.ViewModel)
    func displayImmobiliserKeyChecked(viewModel: CabinCar.Something.ViewModel)
    func displayKeylessKeyChecked(viewModel: CabinCar.Something.ViewModel)
    func displayExpiredDateTime(viewModel: CabinCar.Something.ViewModel)
    
    func displayErrorGearBoxList(viewModel: CabinCar.Something.ViewModel)
    func displayGearBoxList(viewModel: CabinCar.Something.ViewModel)
    func displayGearBoxText(viewModel: CabinCar.Something.ViewModel)
}

class CabinCarViewController: ViewController, CabinCarDisplayLogic
{
    var interactor: CabinCarBusinessLogic?
    var router: (NSObjectProtocol & CabinCarRoutingLogic & CabinCarDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CabinCarInteractor()
        let presenter = CabinCarPresenter()
        let router = CabinCarRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
            
            if let dateTimePicker = segue.destination as? DateTimeViewController {
                dateTimePicker.didSelectedDateTimePicker = { [weak self] (dateExpired) in
                    let request = CabinCar.Something.Request(dateExpired: dateExpired)
                    self?.interactor?.setExpiredDateTime(request: request)
                }
            }
        }
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUIView()
        setUpRadio()
        setUpCheckBox()
        setUpDropDown()
        setDatePicker()
        doSomething()
        
        NotificationCenter.default.addObserver(self, selector: #selector(gearboxSelected(noti:)), name: GearboxSelected, object: nil)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var scrollView: UIScrollView!
    
    @IBOutlet weak var isInvalidMilesCheckBox: CheckBoxUIButton!
    @IBOutlet weak var reasonMileageTextField: CustomTextField!
    @IBOutlet weak var reasonMileageStackView: UIStackView!
    
    @IBOutlet weak var playerRadioCheckBox: CheckBoxUIButton!
    @IBOutlet weak var playerTapeCheckBox: CheckBoxUIButton!
    @IBOutlet weak var playerCDCheckBox: CheckBoxUIButton!
    @IBOutlet weak var playerUSBCheckBox: CheckBoxUIButton!
    
    
    @IBOutlet weak var cabinOverallRadio: RadioGroup!
    //@IBOutlet weak var gearRadio: RadioGroup!
    @IBOutlet weak var milesRadio: RadioGroup!
    
    @IBOutlet weak var mileNumberTextField: CustomTextField!
    @IBOutlet weak var brandPlayerTextField: CustomTextField!
    
    @IBOutlet weak var cabinNoteTextField: MultilineTextField!
    
    @IBOutlet weak var airbackCheckBox: CheckBoxUIButton!
    @IBOutlet weak var powerAmpCheckBox: CheckBoxUIButton!
    @IBOutlet weak var preAmpCheckBox: CheckBoxUIButton!
    @IBOutlet weak var speakerCheckBox: CheckBoxUIButton!
    @IBOutlet weak var cigaretteLighterCheckBox: CheckBoxUIButton!
    //@IBOutlet weak var warrantyBookCheckBox: CheckBoxUIButton!
    @IBOutlet weak var gearHeadCheckBox: CheckBoxUIButton!
    @IBOutlet weak var gearLockCheckBox: CheckBoxUIButton!
    @IBOutlet weak var bookServiceCheckBox: CheckBoxUIButton!
    @IBOutlet weak var manualCheckBox: CheckBoxUIButton!
    @IBOutlet weak var taxPlateCheckBox: CheckBoxUIButton!
    
    @IBOutlet weak var navigatorCheckBox: CheckBoxUIButton!
    @IBOutlet weak var navigatorOnCarCheckBox: CheckBoxUIButton!
    @IBOutlet weak var cdCheckBox: CheckBoxUIButton!
    @IBOutlet weak var sdCardCheckBox: CheckBoxUIButton!
    @IBOutlet weak var noSdCardCheckBox: CheckBoxUIButton!
    @IBOutlet weak var noCdCheckBox: CheckBoxUIButton!
    
    @IBOutlet weak var keyCheckBox: CheckBoxUIButton!
    @IBOutlet weak var remoteKeyCheckBox: CheckBoxUIButton!
    @IBOutlet weak var remoteCheckBox: CheckBoxUIButton!
    @IBOutlet weak var immobilizarKeyCheckBox: CheckBoxUIButton!
    @IBOutlet weak var keylessKeyCheckBox: CheckBoxUIButton!
    
    @IBOutlet weak var keyDropDown: DropDown!
    @IBOutlet weak var remoteDropDown: DropDown!
    @IBOutlet weak var remoteKeyDropDown: DropDown!
    @IBOutlet weak var immobilizarKeyDropDown: DropDown!
    @IBOutlet weak var keylessKeyDropDown: DropDown!
    
    //oil
    @IBOutlet weak var amountEOilCheckButton: CheckBoxUIButton!
    @IBOutlet weak var amount1OilCheckButton: CheckBoxUIButton!
    @IBOutlet weak var amount2OilCheckButton: CheckBoxUIButton!
    @IBOutlet weak var amount3OilCheckButton: CheckBoxUIButton!
    @IBOutlet weak var amount4OilCheckButton: CheckBoxUIButton!
    //expire date
    @IBOutlet weak var taxPlateExpiredView: UIView!
    @IBOutlet weak var taxPlateExpiredLabel: UILabel!
    @IBOutlet weak var gearboxDropDown: GearDropDown!
    @IBOutlet weak var gearboxLineView: UIView!
    @IBOutlet weak var gearboxLabel: UILabel!
    
    // local strings
    @IBOutlet weak var interniorConditionLabel: UILabel!
    @IBOutlet weak var fuelAmountLabel: UILabel!
    @IBOutlet weak var unableVerifiedLabel: UILabel!
    @IBOutlet weak var gearLabel: UILabel!
    @IBOutlet weak var airBagLabel: UILabel!
    @IBOutlet weak var gearheadLabel: UILabel!
    @IBOutlet weak var powerAmplifierLabel: UILabel!
    @IBOutlet weak var gearLockLabel: UILabel!
    @IBOutlet weak var preAmplifierLabel: UILabel!
    @IBOutlet weak var stereoLabel: UILabel!
    @IBOutlet weak var manualBookLabel: UILabel!
    @IBOutlet weak var cigaretteLighterLabel: UILabel!
    @IBOutlet weak var taxSignLabel: UILabel!
    @IBOutlet weak var navigatorLabel: UILabel!
    @IBOutlet weak var builtInNavigatorLabel: UILabel!
    @IBOutlet weak var soundPlayerLabel: UILabel!
    @IBOutlet weak var radioLabel: UILabel!
    @IBOutlet weak var tapeLabel: UILabel!
    @IBOutlet weak var cdDVDLabel: UILabel!
    @IBOutlet weak var keyTitleLabel: UILabel!
    @IBOutlet weak var keyLabel: UILabel!
    @IBOutlet weak var remoteControlLabel: UILabel!
    @IBOutlet weak var remoteKeyLabel: UILabel!
    @IBOutlet weak var immobilizerLabel: UILabel!
    @IBOutlet weak var keylessLabel: UILabel!
    @IBOutlet weak var othersLabel: UILabel!

    let string_kilometer = String.localized("car_interior_kilometer_label")
    let string_mileage = String.localized("car_interior_mileage_label")
    var gearAutomaticIsSelected: Bool = false
    var gearboxListPart: [String] = ["N/A", String.localized("gearbox_automatic_label"), String.localized("gearbox_manual_label")]
    var gearboxListAll: [String] = ["N/A", String.localized("gearbox_automatic_label"), String.localized("gearbox_cvt_label"), String.localized("gearbox_sporttronic_label"), String.localized("gearbox_steptronic_label"), String.localized("gearbox_tiptronic_label"), String.localized("gearbox_xtronic_label"), String.localized("gearbox_manual_label")]

    override func initLocalString() {
        super.initLocalString()
        
        interniorConditionLabel.text = String.localized("car_interior_condition_label")
        mileNumberTextField.placeholder = String.localized("car_interior_mileage_placeholder_label")
        fuelAmountLabel.text = String.localized("car_interior_fuel_amount_label")
        unableVerifiedLabel.text = String.localized("car_detail_unable_to_verified_label")
        gearLabel.text = String.localized("car_interior_gear_label")
        gearboxDropDown.placeholder = gearLabel.text
        airBagLabel.text = String.localized("car_interior_airbag_label")
        gearheadLabel.text = String.localized("car_interior_gearhead_label")
        powerAmplifierLabel.text = String.localized("car_interior_power_amplifier_label")
        gearLockLabel.text = String.localized("car_interior_gear_lock_label")
        preAmplifierLabel.text = String.localized("car_interior_pre_amplifier_label")
        stereoLabel.text = String.localized("car_interior_stereo_label")
        manualBookLabel.text = String.localized("car_interior_manual_look_label")
        cigaretteLighterLabel.text = String.localized("car_interior_cigarette_lighter_label")
        taxSignLabel.text = String.localized("car_interior_tax_sign_label")
        navigatorLabel.text = String.localized("car_interior_navigator_label")
        builtInNavigatorLabel.text = String.localized("car_interior_navigator_in_label")
        noCdCheckBox.setTitle(String.localized("car_interior_no_cd_label"), for: .normal)
        noSdCardCheckBox.setTitle(String.localized("car_interior_no_cd_card_label"), for: .normal)
        soundPlayerLabel.text = String.localized("car_interior_sound_player_label")
        radioLabel.text = String.localized("car_interior_radio_label")
        tapeLabel.text = String.localized("car_interior_tape_label")
        cdDVDLabel.text = String.localized("car_interior_cd_dvd_label")
        brandPlayerTextField.placeholder = String.localized("car_exterior_make_label")
        keyTitleLabel.text = String.localized("car_interior_key_label")
        keyLabel.text = String.localized("car_interior_key_label")
        remoteControlLabel.text = String.localized("car_interior_remote_control_label")
        remoteKeyLabel.text = String.localized("car_interior_remote_key_label")
        immobilizerLabel.text = String.localized("car_interior_key_immobilizer_label")
        keylessLabel.text = String.localized("car_interior_keyless_label")
        othersLabel.text = String.localized("car_interior_others_label")
        keyDropDown.placeholder = String.localized("car_interior_key_placeholder_label")
        remoteDropDown.placeholder = keyDropDown.placeholder
        remoteKeyDropDown.placeholder = keyDropDown.placeholder
        immobilizarKeyDropDown.placeholder = keyDropDown.placeholder
        keylessKeyDropDown.placeholder = keyDropDown.placeholder
        cabinNoteTextField.placeholder = othersLabel.text
        reasonMileageTextField.placeholder = String.localized("car_detail_reason_placeholder")
    }
    
    @objc func gearboxSelected(noti: NSNotification) {
        let gear = noti.object as? String
        let array = noti.userInfo?["array"] as? [String]
        guard gear != nil else { return }
        guard let gearArr = array else { return }
        
        var usedList = [String]()

        if gearArr == gearboxListPart {
            usedList = gearboxListAll
        } else {
            usedList = gearboxListPart
        }

        let viewModel = CabinCar.Something.ViewModel(gearBoxList_bu: usedList)
        displayGearBoxList(viewModel: viewModel)

    }
    
    func doSomething()
    {
        let request = CabinCar.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: CabinCar.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    //MARK: UIView
    func setUIView(){
        cabinNoteTextField.autocorrectionType = .no
        mileNumberTextField.autocorrectionType = .no
        brandPlayerTextField.autocorrectionType = .no
        reasonMileageTextField.autocorrectionType = .no
        
        mileNumberTextField.delegate = self
        brandPlayerTextField.delegate = self
        cabinNoteTextField.delegate = self
        reasonMileageTextField.delegate = self
        
        addTarget(from: mileNumberTextField)
        addTarget(from: brandPlayerTextField)
        addTarget(from: reasonMileageTextField)
    }
    
    fileprivate func addTarget(from textfield: UITextField ){
        textfield.addTarget(self, action: #selector(textFieldDidChange(_:)),for: .editingChanged)
    }
    
    
    //MARK: Date Picker
    func setDatePicker(){
        taxPlateExpiredView.isHidden = true
        taxPlateExpiredView.isUserInteractionEnabled = true
        taxPlateExpiredView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showDateTime)))
    }
    
    @objc func showDateTime(){
        performSegue(withIdentifier: "showDateTime", sender: nil)
    }
    
    func displayExpiredDateTime(viewModel: CabinCar.Something.ViewModel) {
        guard let dayTime = viewModel.dayTime else { return }
        taxPlateExpiredLabel.text = dayTime.day
        taxPlateExpiredLabel.textColor = .appPrimaryColor
        
        DataController.shared.receiverCarModel.dateExpiredTaxPlate = dayTime.day
    }
    
    
    //MARK: Radio
    func setUpRadio(){
        let attributedString = [NSAttributedString.Key.foregroundColor : UIColor.appPrimaryColor]
        
        
        cabinOverallRadio.attributedTitles = [
            NSAttributedString(string: string_good_first,
                               attributes: attributedString),
            NSAttributedString(string: string_average,
                               attributes: attributedString),
            NSAttributedString(string: string_fair,
                               attributes: attributedString),
            NSAttributedString(string: string_poor,
                               attributes: attributedString)
            
        ]
        
        
        milesRadio.attributedTitles = [
            NSAttributedString(string: string_kilometer,
                               attributes: attributedString),
            NSAttributedString(string: string_mileage,
                               attributes: attributedString)
        ]
        
    }
    
    @IBAction func cabinOverallValueChange(_ sender: Any) {
        var selectString:String? = nil
        switch cabinOverallRadio.selectedIndex {
        case 0:
            selectString = string_good_first
        case 1:
            selectString = string_average
        case 2:
            selectString = string_fair
        case 3:
            selectString = string_poor
            
        default:
            return
        }
        DataController.shared.receiverCarModel.cabinOverall = selectString
        let cabinOverallID = cabinOverallRadio.selectedIndex + 1
        DataController.shared.receiverCarModel.cabinOverAllId = cabinOverallID
    }
    
    
    //MARK: Mileage
    @IBAction func milesValueChange(_ sender: Any) {
        var selectString:String? = nil
        switch milesRadio.selectedIndex {
        case 0:
            selectString = string_kilometer
        case 1:
            selectString = string_mileage
        default:
            return
        }
        
        DataController.shared.receiverCarModel.typeMiles = selectString
        let typeMilesId = milesRadio.selectedIndex + 1
        DataController.shared.receiverCarModel.mileageTypeId = typeMilesId
        
        
        /// set enable mileage
        isInvalidMilesCheckBox.check = false
        mileNumberTextField.setEnableView(isEnable: true)
        reasonMileageStackView.isHidden = true
        reasonMileageTextField.text = ""
        
        DataController.shared.receiverCarModel.invalidMileageReason = ""
        DataController.shared.receiverCarModel.isInvalidMileage = false
    }
    
    
    @IBAction func inInValidMileTapped(_ sender: Any) {
        isInvalidMilesCheckBox.toggle { [weak self] check in
            DataController.shared.receiverCarModel.isInvalidMileage = check
            self?.reasonMileageStackView.isHidden = !check
            
            if check {
                /// set miles = 0
                self?.mileNumberTextField.setEnableView(isEnable: false)
                self?.mileNumberTextField.text = ""
                self?.milesRadio.selectedIndex = -1
                
                DataController.shared.receiverCarModel.typeMiles = nil
                DataController.shared.receiverCarModel.mileageTypeId = 0
                DataController.shared.receiverCarModel.miles = ""
            }else{
                self?.reasonMileageTextField.text = ""
                self?.mileNumberTextField.setEnableView(isEnable: true)
                DataController.shared.receiverCarModel.invalidMileageReason = ""
            }
        }
    }
    
    
    //MARK: CHECKBOX
    func setUpCheckBox(){
        amountEOilCheckButton.typecheck = .BACKGROUND
        amount1OilCheckButton.typecheck = .BACKGROUND
        amount2OilCheckButton.typecheck = .BACKGROUND
        amount3OilCheckButton.typecheck = .BACKGROUND
        amount4OilCheckButton.typecheck = .BACKGROUND
        
        sdCardCheckBox.typecheck = .BACKGROUND
        cdCheckBox.typecheck = .BACKGROUND
        noSdCardCheckBox.typecheck = .BACKGROUND
        noCdCheckBox.typecheck = .BACKGROUND
    }
    
    
    //MARK: Player
    @IBAction func playerRadioTapped(_ sender: Any) {
        playerRadioCheckBox.toggle { [weak self] check in
            if !check {
                self?.uncheckPlayer()
            }else{
                DataController.shared.receiverCarModel.isPlayer = true
            }
            DataController.shared.receiverCarModel.isPlayerRadio = check
        }
    }
    @IBAction func playerCDTapped(_ sender: Any) {
        playerCDCheckBox.toggle { [weak self] check in
            if !check {
                self?.uncheckPlayer()
            }else{
                DataController.shared.receiverCarModel.isPlayer = true
            }
            DataController.shared.receiverCarModel.isPlayerCD = check
        }
    }
    @IBAction func playerUSBTapped(_ sender: Any) {
        playerUSBCheckBox.toggle { [weak self] check in
            if !check {
                self?.uncheckPlayer()
            }else{
                DataController.shared.receiverCarModel.isPlayer = true
            }
            DataController.shared.receiverCarModel.isPlayerUSB = check
        }
    }
    @IBAction func playerTapeTapped(_ sender: Any) {
        playerTapeCheckBox.toggle { [weak self] check in
            if !check {
                self?.uncheckPlayer()
            }else{
                DataController.shared.receiverCarModel.isPlayer = true
            }
            
            DataController.shared.receiverCarModel.isPlayerTape = check
        }
    }
    
    func uncheckPlayer(){
        guard !playerRadioCheckBox.check,
              !playerCDCheckBox.check,
              !playerUSBCheckBox.check,
              !playerTapeCheckBox.check else { return }
        
        DataController.shared.receiverCarModel.isPlayer = false
        DataController.shared.receiverCarModel.brandPlayer = nil
        DataController.shared.receiverCarModel.isPlayerRadio = false
        DataController.shared.receiverCarModel.isPlayerTape = false
        DataController.shared.receiverCarModel.isPlayerCD = false
        DataController.shared.receiverCarModel.isPlayerUSB = false
        self.brandPlayerTextField.text = ""
    }
    
    @IBAction func airBackTapped(_ sender: Any) {
        airbackCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isAirback = check
            
        }
    }
    @IBAction func powerAmpTapped(_ sender: Any) {
        powerAmpCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isPowerAmp = check
        }
    }
    @IBAction func preAmpTapped(_ sender: Any) {
        preAmpCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isPreAmp = check
            
        }
    }
    @IBAction func speakerTapped(_ sender: Any) {
        speakerCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isSpeaker = check
        }
    }
    @IBAction func cigaretteLighterTapped(_ sender: Any) {
        cigaretteLighterCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isCigaretteLighter = check
            
        }
    }
    //    @IBAction func warrantyTapped(_ sender: Any) {
    //        warrantyBookCheckBox.toggle()
    //    }
    
    @IBAction func gearHeadTapped(_ sender: Any) {
        gearHeadCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isHeadGear = check
        }
    }
    @IBAction func gearLockTapped(_ sender: Any) {
        gearLockCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isLockGear = check
        }
    }
    @IBAction func bookServiceTapped(_ sender: Any) {
        bookServiceCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isBookService = check
        }
    }
    @IBAction func manualTapped(_ sender: Any) {
        manualCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isManual = check
        }
    }
    @IBAction func taxPlateTapped(_ sender: Any) {
        taxPlateCheckBox.toggle { [weak self] check in
            self?.taxPlateExpiredView.isHidden = !check
            DataController.shared.receiverCarModel.isTaxPlate = check
            if !check {
                self?.taxPlateExpiredLabel.text = String.localized("car_pdf_validity_period_label")
                self?.taxPlateExpiredLabel.textColor = .galleryColor
                DataController.shared.receiverCarModel.dateExpiredTaxPlate = ""
            }
            
        }
    }
    
    //MARK: Keys
    @IBAction func keyTapped(_ sender: Any) {
        keyCheckBox.toggle { [weak self] check in
            if !check {
                DataController.shared.receiverCarModel.removeKeys(type: string_key_label)
                self?.keyDropDown.text = ""
                self?.uncheckKeys()
            }else{
                DataController.shared.receiverCarModel.isKeys = true
                DataController.shared.receiverCarModel.addKeys(type: string_key_label)
            }
        }
    }
    
    @IBAction func remoteKeyTapped(_ sender: Any) {
        remoteKeyCheckBox.toggle { [weak self] check in
            if !check {
                DataController.shared.receiverCarModel.removeKeys(type: string_remote_key_label)
                self?.remoteKeyDropDown.text = ""
                self?.uncheckKeys()
            }else{
                DataController.shared.receiverCarModel.isKeys = true
                DataController.shared.receiverCarModel.addKeys(type: string_remote_key_label)
            }
        }
    }
    @IBAction func keylessKeyTapped(_ sender: Any) {
        keylessKeyCheckBox.toggle { [weak self] check in
            if !check {
                DataController.shared.receiverCarModel.removeKeys(type: string_keyless_label)
                self?.keylessKeyDropDown.text = ""
                self?.uncheckKeys()
            }else{
                DataController.shared.receiverCarModel.isKeys = true
                DataController.shared.receiverCarModel.addKeys(type: string_keyless_label)
            }
        }
    }
    
    @IBAction func remoteTapped(_ sender: Any) {
        remoteCheckBox.toggle { [weak self] check in
            if !check {
                DataController.shared.receiverCarModel.removeKeys(type: string_remote_control_key_label)
                self?.remoteDropDown.text = ""
                self?.uncheckKeys()
            }else{
                DataController.shared.receiverCarModel.isKeys = true
                DataController.shared.receiverCarModel.addKeys(type: string_remote_control_key_label)
            }
        }
    }
    @IBAction func immobilizerKeyTapped(_ sender: Any) {
        immobilizarKeyCheckBox.toggle { [weak self] check in
            if !check {
                DataController.shared.receiverCarModel.removeKeys(type: string_immobilizer_key_label)
                self?.immobilizarKeyDropDown.text = ""
                self?.uncheckKeys()
            }else{
                DataController.shared.receiverCarModel.isKeys = true
                DataController.shared.receiverCarModel.addKeys(type: string_immobilizer_key_label)
            }
            
        }
    }
    
    func uncheckKeys(){
        guard !keyCheckBox.check,
              !remoteKeyCheckBox.check,
              !keylessKeyCheckBox.check,
              !remoteCheckBox.check,
              !immobilizarKeyCheckBox.check else { return }
        
        DataController.shared.receiverCarModel.isKeys = false
        DataController.shared.receiverCarModel.mapKeys = nil
    }
    
    
    //MARK: Navigator
    @IBAction func navigatorTapped(_ sender: Any) {
        navigatorCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.navigationCheck(checkBox: weakself.navigatorCheckBox , check: check)
        }
    }
    
    @IBAction func navigatorOnCarTapped(_ sender: Any) {
        navigatorOnCarCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.navigationCheck(checkBox: weakself.navigatorOnCarCheckBox , check: check)
        }
    }
    @IBAction func cdTapped(_ sender: Any) {
        cdCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.navigationCheck(checkBox: weakself.cdCheckBox , check: check)
        }
    }
    @IBAction func sdCardTapped(_ sender: Any) {
        sdCardCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.navigationCheck(checkBox: weakself.sdCardCheckBox , check: check)
        }
    }
    
    @IBAction func noSdCardTapped(_ sender: Any) {
        noSdCardCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.navigationCheck(checkBox: weakself.noSdCardCheckBox , check: check)
        }
    }
    
    @IBAction func noCdTapped(_ sender: Any) {
        noCdCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.navigationCheck(checkBox: weakself.noCdCheckBox , check: check)
        }
    }
    
    func uncheckNavigator(){
        guard !cdCheckBox.check,
              !sdCardCheckBox.check,
              !navigatorOnCarCheckBox.check,
              !noCdCheckBox.check,
              !noSdCardCheckBox.check else { return }
        
        DataController.shared.receiverCarModel.isNavigator = false
        DataController.shared.receiverCarModel.isNavigatorOnCar = false
        DataController.shared.receiverCarModel.isCd = false
        DataController.shared.receiverCarModel.isSDCard = false
        DataController.shared.receiverCarModel.isNoSdCard = false
        DataController.shared.receiverCarModel.isNoCd = false
        
        navigatorCheckBox.check = false
    }
    
    func navigationCheck(checkBox: CheckBoxUIButton , check : Bool){
        switch checkBox {
        case navigatorCheckBox:
            if !check {
                navigatorOnCarCheckBox.check = false
                cdCheckBox.check = false
                sdCardCheckBox.check = false
                noSdCardCheckBox.check = false
                noCdCheckBox.check = false
                
                
                DataController.shared.receiverCarModel.isNavigatorOnCar = false
                DataController.shared.receiverCarModel.isCd = false
                DataController.shared.receiverCarModel.isSDCard = false
                DataController.shared.receiverCarModel.isNoSdCard = false
                DataController.shared.receiverCarModel.isNoCd = false
            }
            DataController.shared.receiverCarModel.isNavigator = check
            break
        case navigatorOnCarCheckBox:
            if check {
                cdCheckBox.check = false
                sdCardCheckBox.check = false
                noSdCardCheckBox.check = false
                noCdCheckBox.check = false
                
                navigatorCheckBox.check = true
                DataController.shared.receiverCarModel.isNavigator = true
                
                DataController.shared.receiverCarModel.isCd = false
                DataController.shared.receiverCarModel.isSDCard = false
                DataController.shared.receiverCarModel.isNoSdCard = false
                DataController.shared.receiverCarModel.isNoCd = false
                
            }else{
                uncheckNavigator()
            }
            DataController.shared.receiverCarModel.isNavigatorOnCar = check
            break
        case cdCheckBox:
            if check {
                navigatorOnCarCheckBox.check = false
                noSdCardCheckBox.check = false
                noCdCheckBox.check = false
                sdCardCheckBox.check = false
                
                navigatorCheckBox.check = true
                
                DataController.shared.receiverCarModel.isNavigator = true
                
                DataController.shared.receiverCarModel.isNavigatorOnCar = false
                DataController.shared.receiverCarModel.isSDCard = false
                DataController.shared.receiverCarModel.isNoSdCard = false
                DataController.shared.receiverCarModel.isNoCd = false
                
            }else{
                uncheckNavigator()
            }
            DataController.shared.receiverCarModel.isCd = check
            break
        case sdCardCheckBox:
            if check {
                navigatorOnCarCheckBox.check = false
                cdCheckBox.check = false
                noSdCardCheckBox.check = false
                noCdCheckBox.check = false
                navigatorCheckBox.check = true
                
                DataController.shared.receiverCarModel.isNavigator = true
                
                DataController.shared.receiverCarModel.isNavigatorOnCar = false
                DataController.shared.receiverCarModel.isCd = false
                DataController.shared.receiverCarModel.isNoSdCard = false
                DataController.shared.receiverCarModel.isNoCd = false
                
            }else{
                uncheckNavigator()
            }
            DataController.shared.receiverCarModel.isSDCard = check
            break
        case noCdCheckBox:
            if check {
                navigatorOnCarCheckBox.check = false
                cdCheckBox.check = false
                sdCardCheckBox.check = false
                noSdCardCheckBox.check = false
                navigatorCheckBox.check = true
                
                DataController.shared.receiverCarModel.isNavigator = true
                
                DataController.shared.receiverCarModel.isNoSdCard = false
                DataController.shared.receiverCarModel.isCd = false
                DataController.shared.receiverCarModel.isSDCard = false
                DataController.shared.receiverCarModel.isNavigatorOnCar = false
                
            }else{
                uncheckNavigator()
            }
            DataController.shared.receiverCarModel.isNoCd = check
            break
        case noSdCardCheckBox:
            if check {
                navigatorOnCarCheckBox.check = false
                cdCheckBox.check = false
                sdCardCheckBox.check = false
                noCdCheckBox.check = false
                navigatorCheckBox.check = true
                
                DataController.shared.receiverCarModel.isNavigator = true
                
                DataController.shared.receiverCarModel.isNoCd = false
                DataController.shared.receiverCarModel.isCd = false
                DataController.shared.receiverCarModel.isSDCard = false
                DataController.shared.receiverCarModel.isNavigatorOnCar = false
                
            }else{
                uncheckNavigator()
            }
            DataController.shared.receiverCarModel.isNoSdCard = check
            break
        default:
            break
        }
    }
    
    //MARK: OIL
    @IBAction func amountOilETapped(_ sender: Any) {
        amountEOilCheckButton.toggle { [weak self] check in
            if check {
                DataController.shared.receiverCarModel.oilAmount = "E"
                DataController.shared.receiverCarModel.fuelVolumn = 0
                self?.amount1OilCheckButton.check = false
                self?.amount2OilCheckButton.check = false
                self?.amount3OilCheckButton.check = false
                self?.amount4OilCheckButton.check = false
            }
        }
    }
    @IBAction func amountOil1Tapped(_ sender: Any) {
        amount1OilCheckButton.toggle { [weak self] check in
            if check {
                DataController.shared.receiverCarModel.oilAmount = "1/4"
                DataController.shared.receiverCarModel.fuelVolumn = 1
                self?.amountEOilCheckButton.check = false
                self?.amount2OilCheckButton.check = false
                self?.amount3OilCheckButton.check = false
                self?.amount4OilCheckButton.check = false
            }
        }
    }
    @IBAction func amountOil2Tapped(_ sender: Any) {
        amount2OilCheckButton.toggle { [weak self] check in
            if check {
                DataController.shared.receiverCarModel.oilAmount = "2/4"
                DataController.shared.receiverCarModel.fuelVolumn = 2
                self?.amountEOilCheckButton.check = false
                self?.amount1OilCheckButton.check = false
                self?.amount3OilCheckButton.check = false
                self?.amount4OilCheckButton.check = false
            }
        }
    }
    @IBAction func amountOil3Tapped(_ sender: Any) {
        amount3OilCheckButton.toggle { [weak self] check in
            if check {
                DataController.shared.receiverCarModel.oilAmount = "3/4"
                DataController.shared.receiverCarModel.fuelVolumn = 3
                self?.amountEOilCheckButton.check = false
                self?.amount1OilCheckButton.check = false
                self?.amount2OilCheckButton.check = false
                self?.amount4OilCheckButton.check = false
            }
        }
    }
    @IBAction func amountOil4Tapped(_ sender: Any) {
        amount4OilCheckButton.toggle { [weak self] check in
            if check {
                DataController.shared.receiverCarModel.oilAmount = "4/4"
                DataController.shared.receiverCarModel.fuelVolumn = 4
                self?.amountEOilCheckButton.check = false
                self?.amount1OilCheckButton.check = false
                self?.amount2OilCheckButton.check = false
                self?.amount3OilCheckButton.check = false
            }
        }
    }
    
    //MARK: Dropdown
    func setUpDropDown(){
        let keyValue = ["1","2","3","4","5","6","7","8","9","10"]
        keyDropDown.optionArray = keyValue
        keyDropDown.didSelect { [weak self] (selected, _, _) in
            
            DataController.shared.receiverCarModel.isKeys = true
            DataController.shared.receiverCarModel.addKeys(type: string_key_label, amount: selected)
            
            self?.keyDropDown.text = selected
            
            let request = CabinCar.Something.Request(keyCheck : selected)
            self?.interactor?.keyCheck(request: request)
        }
        remoteDropDown.optionArray = keyValue
        remoteDropDown.didSelect { [weak self] (selected, _, _) in
            
            
            DataController.shared.receiverCarModel.isKeys = true
            DataController.shared.receiverCarModel.addKeys(type: string_remote_control_key_label, amount: selected)
            
            self?.remoteDropDown.text = selected
            
            let request = CabinCar.Something.Request(remoteCheck : selected)
            self?.interactor?.remoteCheck(request: request)
        }
        
        remoteKeyDropDown.optionArray = keyValue
        remoteKeyDropDown.didSelect { [weak self] (selected, _, _) in
            
            DataController.shared.receiverCarModel.isKeys = true
            DataController.shared.receiverCarModel.addKeys(type: string_remote_key_label, amount: selected)
            
            self?.remoteKeyDropDown.text = selected
            
            let request = CabinCar.Something.Request(remoteKeyCheck : selected)
            self?.interactor?.remoteKeyCheck(request: request)
        }
        
        keylessKeyDropDown.optionArray = keyValue
        keylessKeyDropDown.didSelect { [weak self] (selected, _, _) in
            
            DataController.shared.receiverCarModel.isKeys = true
            DataController.shared.receiverCarModel.addKeys(type: string_keyless_label, amount: selected)
            
            self?.keylessKeyDropDown.text = selected
            
            let request = CabinCar.Something.Request(keylessKeyCheck : selected)
            self?.interactor?.keylessKeyCheck(request: request)
        }
        
        immobilizarKeyDropDown.optionArray = keyValue
        immobilizarKeyDropDown.didSelect { [weak self] (selected, _, _) in
            
            DataController.shared.receiverCarModel.isKeys = true
            DataController.shared.receiverCarModel.addKeys(type: string_immobilizer_key_label, amount: selected)
            
            self?.immobilizarKeyDropDown.text = selected
            
            let request = CabinCar.Something.Request(immobilizerKeyCheck : selected)
            self?.interactor?.immobilizerKeyCheck(request: request)
        }
    }
    
    //MARK: Presenter
    func displayValidateMileNumber(viewModel: CabinCar.Something.ViewModel) {
        mileNumberTextField.text = viewModel.validateMilesNumber
        DataController.shared.receiverCarModel.miles = viewModel.validateMilesNumber
    }
    
    func displayKeyChecked(viewModel: CabinCar.Something.ViewModel) {
        keyCheckBox.check = viewModel.isKeyCheck ?? false
    }
    func displayRemoteChecked(viewModel: CabinCar.Something.ViewModel) {
        remoteCheckBox.check = viewModel.isRemoteCheck ?? false
    }
    func displayRemoteKeyChecked(viewModel: CabinCar.Something.ViewModel) {
        remoteKeyCheckBox.check = viewModel.isRemoteKeyCheck ?? false
    }
    func displayKeylessKeyChecked(viewModel: CabinCar.Something.ViewModel) {
        keylessKeyCheckBox.check = viewModel.isKeylessKeyCheck ?? false
    }
    func displayImmobiliserKeyChecked(viewModel: CabinCar.Something.ViewModel) {
        immobilizarKeyCheckBox.check = viewModel.isImmobilizerKeyCheck ?? false
    }
    
    
    @objc func prepareData(){
        let model  = DataController.shared.receiverCarModel
        let cabinOverallValue = [string_good_first, string_average, string_fair, string_poor]
        let typeMilesValue = [string_kilometer, string_mileage]
        let gearSystemValue = ["AT", "MT"]
        
        cabinOverallRadio.selectedIndex = getRadioIndexByValue(from: cabinOverallValue, value: model.cabinOverall)
        
        milesRadio.selectedIndex = getRadioIndexByValue(from: typeMilesValue, value: model.typeMiles)
        
        playerRadioCheckBox.check = model.isPlayerRadio ?? false
        playerTapeCheckBox.check = model.isPlayerTape ?? false
        playerCDCheckBox.check = model.isPlayerCD ?? false
        playerUSBCheckBox.check = model.isPlayerUSB ?? false
        
        mileNumberTextField.text = model.miles
        brandPlayerTextField.text = model.brandPlayer
        cabinNoteTextField.text = model.noteCabin
        
        airbackCheckBox.check = model.isAirback ?? false
        powerAmpCheckBox.check = model.isPowerAmp ?? false
        preAmpCheckBox.check = model.isPreAmp ?? false
        speakerCheckBox.check = model.isSpeaker ?? false
        cigaretteLighterCheckBox.check = model.isCigaretteLighter ?? false
        gearHeadCheckBox.check = model.isHeadGear ?? false
        gearLockCheckBox.check = model.isLockGear ?? false
        bookServiceCheckBox.check = model.isBookService ?? false
        manualCheckBox.check = model.isManual ?? false
        taxPlateCheckBox.check = model.isTaxPlate ?? false
        
        navigatorCheckBox.check = model.isNavigator ?? false
        navigatorOnCarCheckBox.check = model.isNavigatorOnCar ?? false
        cdCheckBox.check = model.isCd ?? false
        sdCardCheckBox.check = model.isSDCard ?? false
        noSdCardCheckBox.check = model.isNoSdCard ?? false
        noCdCheckBox.check = model.isNoCd ?? false
        
        ///key
        let numberOfKey = model.mapKeys?[string_key_label] as? String
        let numberOfKeyRemote = model.mapKeys?[string_remote_key_label] as? String
        let numberOfRemote = model.mapKeys?[string_remote_control_key_label] as? String
        let numberOfImmobilizer = model.mapKeys?[string_immobilizer_key_label] as? String
        let numberOfKeyless = model.mapKeys?[string_keyless_label] as? String
        
        let checkKey = (numberOfKey?.toInt() ?? 0) > 0
        let checkRemote = (numberOfRemote?.toInt() ?? 0) > 0
        let checkKeyRemote = (numberOfKeyRemote?.toInt() ?? 0) > 0
        let checkImmobilizer = (numberOfImmobilizer?.toInt() ?? 0) > 0
        let checkKeyless = (numberOfKeyless?.toInt() ?? 0) > 0
        
        keyDropDown.text = checkKey ? numberOfKey : ""
        remoteDropDown.text = checkRemote ? numberOfRemote : ""
        remoteKeyDropDown.text = checkKeyRemote ? numberOfKeyRemote : ""
        immobilizarKeyDropDown.text = checkImmobilizer ? numberOfImmobilizer : ""
        keylessKeyDropDown.text = checkKeyless ? numberOfKeyless : ""
        
        keyCheckBox.check = checkKey
        remoteCheckBox.check = checkRemote
        remoteKeyCheckBox.check = checkKeyRemote
        immobilizarKeyCheckBox.check = checkImmobilizer
        keylessKeyCheckBox.check = checkKeyless
        
        
        
        ///oil
        let fuelVolumn = model.fuelVolumn ?? -1
        amountEOilCheckButton.check = fuelVolumn == 0
        amount1OilCheckButton.check = fuelVolumn == 1
        amount2OilCheckButton.check = fuelVolumn == 2
        amount3OilCheckButton.check = fuelVolumn == 3
        amount4OilCheckButton.check = fuelVolumn == 4
        /// expire date
        taxPlateExpiredView.isHidden = !(model.isTaxPlate ?? false)
        let dateExpired = model.dateExpiredTaxPlate ?? ""
        taxPlateExpiredLabel.text = dateExpired.isEmpty ? String.localized("") : dateExpired
        taxPlateExpiredLabel.textColor = dateExpired.isEmpty ? .galleryColor : .appPrimaryColor
        
        isInvalidMilesCheckBox.check = (model.isInvalidMileage ?? false)
        reasonMileageStackView.isHidden = !(model.isInvalidMileage ?? false)
        reasonMileageTextField.text = model.invalidMileageReason
    }
    
    @objc func updateView(){
        let model  = DataController.shared.receiverCarModel
        //        let isEnable = getEnableView()
        //
        //        cabinOverallRadio.setEnableView(isEnable: isEnable)
        //
        //        milesRadio.setEnableView(isEnable: isEnable)
        //
        //        playerRadioCheckBox.setEnableView(isEnable: isEnable)
        //        playerTapeCheckBox.setEnableView(isEnable: isEnable)
        //        playerCDCheckBox.setEnableView(isEnable: isEnable)
        //        playerUSBCheckBox.setEnableView(isEnable: isEnable)
        //
        //        mileNumberTextField.setEnableView(isEnable: isEnable)
        //        brandPlayerTextField.setEnableView(isEnable: isEnable)
        //        cabinNoteTextField.setEnableView(isEnable: isEnable)
        //
        //        airbackCheckBox.setEnableView(isEnable: isEnable)
        //        powerAmpCheckBox.setEnableView(isEnable: isEnable)
        //        preAmpCheckBox.setEnableView(isEnable: isEnable)
        //        speakerCheckBox.setEnableView(isEnable: isEnable)
        //        cigaretteLighterCheckBox.setEnableView(isEnable: isEnable)
        //        gearHeadCheckBox.setEnableView(isEnable: isEnable)
        //        gearLockCheckBox.setEnableView(isEnable: isEnable)
        //        bookServiceCheckBox.setEnableView(isEnable: isEnable)
        //        manualCheckBox.setEnableView(isEnable: isEnable)
        //        taxPlateCheckBox.setEnableView(isEnable: isEnable)
        //
        //        navigatorCheckBox.setEnableView(isEnable: isEnable)
        //        navigatorOnCarCheckBox.setEnableView(isEnable: isEnable)
        //        cdCheckBox.setEnableView(isEnable: isEnable)
        //        sdCardCheckBox.setEnableView(isEnable: isEnable)
        //        noSdCardCheckBox.setEnableView(isEnable: isEnable)
        //        noCdCheckBox.setEnableView(isEnable: isEnable)
        //
        //        keyDropDown.setEnableView(isEnable: isEnable)
        //        remoteDropDown.setEnableView(isEnable: isEnable)
        //        remoteKeyDropDown.setEnableView(isEnable: isEnable)
        //        immobilizarKeyDropDown.setEnableView(isEnable: isEnable)
        //        keylessKeyDropDown.setEnableView(isEnable: isEnable)
        //
        //        keyCheckBox.setEnableView(isEnable: isEnable)
        //        remoteCheckBox.setEnableView(isEnable: isEnable)
        //        remoteKeyCheckBox.setEnableView(isEnable: isEnable)
        //        immobilizarKeyCheckBox.setEnableView(isEnable: isEnable)
        //        keylessKeyCheckBox.setEnableView(isEnable: isEnable)
        //
        //        ///oil
        //        amountEOilCheckButton.setEnableView(isEnable: isEnable)
        //        amount1OilCheckButton.setEnableView(isEnable: isEnable)
        //        amount2OilCheckButton.setEnableView(isEnable: isEnable)
        //        amount3OilCheckButton.setEnableView(isEnable: isEnable)
        //        amount4OilCheckButton.setEnableView(isEnable: isEnable)
        
        
        
        gearboxLabel.validateLabel(model.validGearBox)
        gearboxLineView.validateLineView(model.validGearBox)
        
        //------------------------------------------------------------//
    }
    
    
    //MARK: fetch GearBox
    var isGearBox = false
    
    func fetchGearBox(){
        interactor?.fetchGearBox(request: CabinCar.Something.Request())
    }
    func displayErrorGearBoxList(viewModel: CabinCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessageOKAction(message: errorMessage) {
            //ignhred
        }
    }
    
    func displayGearBoxList(viewModel: CabinCar.Something.ViewModel) {
        guard var gearBoxList_bu = viewModel.gearBoxList_bu else { return }
        isGearBox = true
        if gearAutomaticIsSelected == false {
            gearBoxList_bu = gearboxListPart
        }
        gearAutomaticIsSelected = !gearAutomaticIsSelected
        setGearValue(to: gearboxDropDown, values: gearBoxList_bu) { [weak self] (selectValue, _, _) in
            
            self?.gearboxDropDown.text = selectValue
            
            let request = CabinCar.Something.Request(selectGearbox: selectValue)
            self?.interactor?.selectGearBox(request: request)
            
            self?.gearboxLabel.validateLabel(true)
            self?.gearboxLineView.validateLineView(true)

        }
        
        self.prepareGearBox()
    }
    
    func displayGearBoxText(viewModel: CabinCar.Something.ViewModel) {
        gearboxDropDown.text = viewModel.gearBox_BU
        
    }
    
    func setValue(to textfield:DropDown , values: [String], didSelected:@escaping (_ selectedText: String, _ index: Int , _ id:Int )->() ){
        textfield.text = ""
        textfield.optionArray = values
        textfield.didSelect(completion: didSelected)
    }
    
    func setGearValue(to textfield:GearDropDown , values: [String], didSelected:@escaping (_ selectedText: String, _ index: Int , _ id:Int )->() ){
        textfield.text = ""
        textfield.optionArray = values
        textfield.searchText = ""
        textfield.didSelect(completion: didSelected)
    }
    
    func fetchAPI(){
        if !isGearBox {
            fetchGearBox()
        }
    }
    
    func prepareGearBox(){
        let request = CabinCar.Something.Request(codeGearBox: DataController.shared.receiverCarModel.gearbox)
        interactor?.prepareGearBox(request: request)
    }
}

extension CabinCarViewController : UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        //print(textView.text)
        
        DataController.shared.receiverCarModel.noteCabin = textView.text
    }
}
// MARK: UITextFieldDelegate
extension CabinCarViewController : UITextFieldDelegate {
    @objc func textFieldDidChange(_ textField: UITextField) {
        //print(textField.text)
        
        switch textField {
        case mileNumberTextField:
            let request = CabinCar.Something.Request(miles: textField.text)
            interactor?.validateMileNumber(request: request)
            
        case brandPlayerTextField:
            DataController.shared.receiverCarModel.brandPlayer = textField.text
            
        case reasonMileageTextField:
            DataController.shared.receiverCarModel.invalidMileageReason = textField.text
        default:
            break
        }
    }
    
    
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        
        
        return true
    }
}
//MARK: keyboard
extension CabinCarViewController {
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        scrollView.registKeyboardNotification()
        
        fetchAPI()
        prepareData()
        prepareGearBox()
        updateView()
        
        NotificationCenter.default.addObserver(self, selector: #selector(updateView), name: NSNotification.Name("updateUI"), object: nil)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        scrollView.resignKeyboardNotification()
        
        NotificationCenter.default.removeObserver(self)
    }
}
