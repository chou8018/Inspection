//
//  BrakeCheckViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 15/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RadioGroup

protocol BrakeCheckDisplayLogic: AnyObject
{
    func displaySomething(viewModel: BrakeCheck.Something.ViewModel)
}

class BrakeCheckViewController: ViewController, BrakeCheckDisplayLogic
{
    var interactor: BrakeCheckBusinessLogic?
    var router: (NSObjectProtocol & BrakeCheckRoutingLogic & BrakeCheckDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = BrakeCheckInteractor()
        let presenter = BrakeCheckPresenter()
        let router = BrakeCheckRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUIView()
        setRadio()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var  summarysBrakeSystemTextField: MultilineTextField!
    @IBOutlet weak var brakeSystemRadio: RadioGroup!
    
    // local strings
    @IBOutlet weak var brakeSystemLabel: UILabel!
    @IBOutlet weak var summaryLabel: UILabel!

    override func initLocalString() {
        super.initLocalString()
        
        brakeSystemLabel.text = String.localized("inspection_brake_system_label")
        summaryLabel.text = String.localized("inspection_brake_summary_label")
        summarysBrakeSystemTextField.placeholder = summaryLabel.text

    }
    
    func doSomething()
    {
        let request = BrakeCheck.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    //MARK: Presenter
    func displaySomething(viewModel: BrakeCheck.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    
    //MARK: UIView
    func setUIView(){
        summarysBrakeSystemTextField.autocorrectionType = .no
        summarysBrakeSystemTextField.delegate = self
        
    }
    
    
    //MARK: Radio
    func setRadio(){
        let attributedString = [NSAttributedString.Key.foregroundColor : UIColor.appPrimaryColor]
        
        brakeSystemRadio.attributedTitles = [
            NSAttributedString(
                string: string_inspection_engine_working, attributes: attributedString),
            NSAttributedString(
                string: string_inspection_engine_not_working, attributes: attributedString)
        ]
    }
    @IBAction func brakeSystemValueChanged(_ sender: Any) {
        let value = getRadioValue(from: [string_inspection_engine_working, string_inspection_engine_not_working], selectIndex: brakeSystemRadio.selectedIndex)
        DataController.shared.inspectionCarModel.brakeSystem = value
        
        let isUseableBrake = brakeSystemRadio.selectedIndex == 0 ? true : false
        DataController.shared.inspectionCarModel.isUseableBrake = isUseableBrake
    }
    
    
    func prepareData(){
        let model = DataController.shared.inspectionCarModel
        summarysBrakeSystemTextField.text = model.summarysBrakeSystem
        brakeSystemRadio.selectedIndex = getRadioIndexByValue(from: [string_inspection_engine_working, string_inspection_engine_not_working],
                                                              value: model.brakeSystem)
    }
}




//MARK: TextView Delegate
extension BrakeCheckViewController : UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        //print(textView.text)
        DataController.shared.inspectionCarModel.summarysBrakeSystem = textView.text
    }
}


extension BrakeCheckViewController {
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        scrollView.registKeyboardNotification()
        
        prepareData()
        
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        scrollView.resignKeyboardNotification()
    }
}
