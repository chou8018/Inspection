//
//  SearchByViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 3/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchByDisplayLogic: AnyObject
{
  func presentUpdatePicker(viewModel: SearchBy.Picker.ViewModel)
    func selectSearchByPicker(viewModel: SearchBy.Picker.ViewModel)
    var selectSearchType : (( _ type : SearchBy.TYPE) -> Void)? { get set }
}

class SearchByViewController: UIViewController, SearchByDisplayLogic
{
    var selectSearchType: ((SearchBy.TYPE) -> Void)?
    
  var interactor: SearchByBusinessLogic?
  var router: (NSObjectProtocol & SearchByRoutingLogic & SearchByDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SearchByInteractor()
    let presenter = SearchByPresenter()
    let router = SearchByRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!

    
    @IBOutlet weak var searchByPicker: UIPickerView!
    
    var dataSource = SearchDataSource()
    
    func doSomething()
  {
  
        let tap = UITapGestureRecognizer(target: self, action: #selector(pickerTapped))
        tap.delegate = self
        self.searchByPicker.addGestureRecognizer(tap)
        
        searchByPicker.delegate = dataSource
        searchByPicker.dataSource = dataSource
 
        searchByPicker.setValue(UIColor.appPrimaryColor, forKeyPath: "textColor")
       
        
        let request = SearchBy.Picker.Request()
        interactor?.fetchDataPicker(request: request)
  }
  
    func presentUpdatePicker(viewModel: SearchBy.Picker.ViewModel)
    {
        dataSource.searchByList = viewModel.searchByList ?? []
      
        searchByPicker.selectRow(viewModel.selectSearchByName?.rawValue ?? 0,
                                 inComponent: 0, animated: true)
      

        searchByPicker.reloadAllComponents()
    }
    
    func selectSearchByPicker(viewModel: SearchBy.Picker.ViewModel) {
        guard let type = viewModel.selectSearchByName else { return }
        selectSearchType?(type)
        dismiss(animated: true, completion: nil)
    }
}

extension SearchByViewController : UIGestureRecognizerDelegate {
    
    @objc func pickerTapped(tapRecognizer: UITapGestureRecognizer){
        if tapRecognizer.state == .ended {
               let rowHeight = self.searchByPicker.rowSize(forComponent: 0).height
               let selectedRowFrame = self.searchByPicker.bounds.insetBy(dx: 0, dy: (self.searchByPicker.frame.height - rowHeight) / 2)
               let userTappedOnSelectedRow = selectedRowFrame.contains(tapRecognizer.location(in: self.searchByPicker))
               if userTappedOnSelectedRow {
                   let selectedRow = self.searchByPicker.selectedRow(inComponent: 0)
                    
                    let request = SearchBy.Picker.Request(selectRow: selectedRow)
                    interactor?.selectPicker(request: request)
               }
           }
    }
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {
        return true
    }
}
