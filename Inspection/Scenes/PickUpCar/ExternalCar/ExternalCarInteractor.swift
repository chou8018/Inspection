//
//  ExternalCarInteractor.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExternalCarBusinessLogic
{
    func doSomething(request: ExternalCar.Something.Request)
    func checkTire(request: ExternalCar.Something.Request)
    func validateNumber(request: ExternalCar.Something.Request)
    func validateWheel(request: ExternalCar.Something.Request)
    func validateNormalWheel(request: ExternalCar.Something.Request)
    
    // add on 12/22/2023
    func getRoofType(request: ExternalCar.Something.Request)
}

protocol ExternalCarDataStore
{
    //var name: String { get set }
}

class ExternalCarInteractor: ExternalCarBusinessLogic, ExternalCarDataStore
{
    var presenter: ExternalCarPresentationLogic?
    var worker: ExternalCarWorker?
    //var name: String = ""
    
    var roofTypes: [RoofTypeModel]?
    
    // MARK: Do something
    func doSomething(request: ExternalCar.Something.Request)
    {
        worker = ExternalCarWorker()
        worker?.doSomeWork()
        
        let response = ExternalCar.Something.Response()
        presenter?.presentSomething(response: response)
    }
    
    func checkTire(request: ExternalCar.Something.Request) {
        let tire = request.tire
        
        let isTire = tire?.trimWhiteSpace.isEmpty ?? false
        let response = ExternalCar.Something.Response(isTire: !isTire)
        presenter?.presentCheckBoxTire(response: response)
        
    }
    
    var oldValue = ""
    
    func validateNumber(request: ExternalCar.Something.Request) {
        guard let newValue = request.validateNumber  else { return }
        
        var validateNumber = newValue.toInt()
        if validateNumber >= 100 {
            validateNumber = 100
        }
        let new2Value = validateNumber == 0 ?  "" : validateNumber.toString()
        
        let isValid = new2Value.isValidNumber()
        let validateResult = isValid ? new2Value : oldValue
        
        
        
        oldValue = validateResult
        
        
        
        let response = ExternalCar.Something.Response(validateNumberResult: validateResult)
        presenter?.presentValidateNumber(response: response)
        
    }
    
    
    var oldValueWheel = ""
    
    func validateWheel(request: ExternalCar.Something.Request) {
        guard let newValue = request.validateWheel  else { return }
        let isValid = newValue.isValidNumber()
        let validateResult = isValid ? newValue : oldValueWheel
        oldValueWheel = validateResult
        
        let isMagWheel = validateResult.trimWhiteSpace.isEmpty
        
        
        let response = ExternalCar.Something.Response(isMagWheel: !isMagWheel,
                                                      validateWheelResult: validateResult)
        
        
        presenter?.presentCheckBoxMagWheel(response: response)
    }
    
    var oldNormalWheel = ""
    func validateNormalWheel(request: ExternalCar.Something.Request) {
        guard let newValue = request.validateNormalWheel  else { return }
        let isValid = newValue.isValidNumber()
        let validateResult = isValid ? newValue : oldValueWheel
        oldNormalWheel = validateResult
        
        let isNormalWheel = validateResult.trimWhiteSpace.isEmpty
        
        
        let response = ExternalCar.Something.Response(isNormalWheel: !isNormalWheel,
                                                      validateWheelResult: validateResult)
        
        
        presenter?.presentCheckBoxNormalWheel(response: response)
    }
    
    //MARK: Get roofType
    func getRoofType(request: ExternalCar.Something.Request) {
        worker = ExternalCarWorker()
        worker?.fetchRoofType(completion: { [weak self] (response) in
            self?.presenter?.presentRoofTypes(response: response)
            
            if let values = response.roofTypes {
                self?.roofTypes = values
            }
            
        })
    }
}
