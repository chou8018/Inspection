//
//  ReadingQRViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 4/3/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVFoundation

protocol ReadingQRDisplayLogic: AnyObject
{
  func displaySomething(viewModel: ReadingQR.Something.ViewModel)
    var callbackQRCode : ((String)->Void)? { get set }
}

class ReadingQRViewController: UIViewController, ReadingQRDisplayLogic
{
    var callbackQRCode: ((String) -> Void)?
    
  var interactor: ReadingQRBusinessLogic?
  var router: (NSObjectProtocol & ReadingQRRoutingLogic & ReadingQRDataPassing)?

        var captureSession: AVCaptureSession!
        var previewLayer: AVCaptureVideoPreviewLayer!
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ReadingQRInteractor()
    let presenter = ReadingQRPresenter()
    let router = ReadingQRRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    setUpView()
    setUpCamera()
    bringViewsToFront()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var closeImageView: UIImageView!
    
    @IBOutlet weak var qrCodeLabel: UILabel!
    @IBOutlet weak var vvView: UIView!
    func doSomething()
  {
    let request = ReadingQR.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: ReadingQR.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    func setUpView(){
        closeImageView.isUserInteractionEnabled = true
        closeImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(closeTapped)))
    }
    
    @objc func closeTapped(){
        closeImageView.fadeIn { [weak self] in
            self?.dismiss(animated: true, completion: nil)
        }
        
    }
    
    func bringViewsToFront(){
        view.bringSubviewToFront(closeImageView)
        view.bringSubviewToFront(vvView)
        view.bringSubviewToFront(qrCodeLabel)
    }
    
}



extension ReadingQRViewController :  AVCaptureMetadataOutputObjectsDelegate  {
    func setUpCamera(){
        
        view.backgroundColor = UIColor.black
        captureSession = AVCaptureSession()

        guard let videoCaptureDevice = AVCaptureDevice.default(for: .video) else {
            failed()
            return
        }
        let videoInput: AVCaptureDeviceInput

        do {
            videoInput = try AVCaptureDeviceInput(device: videoCaptureDevice)
        } catch {
            failed()
            return
        }

        if (captureSession.canAddInput(videoInput)) {
            captureSession.addInput(videoInput)
        } else {
            failed()
            return
        }

        let metadataOutput = AVCaptureMetadataOutput()

        if (captureSession.canAddOutput(metadataOutput)) {
            captureSession.addOutput(metadataOutput)

            metadataOutput.setMetadataObjectsDelegate(self, queue: DispatchQueue.main)
            metadataOutput.metadataObjectTypes = [.qr]
        } else {
            failed()
            return
        }
 
        previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
        view.layer.addSublayer(previewLayer)
        previewLayer.frame = self.view.bounds
        previewLayer.videoGravity = .resizeAspectFill
        previewLayer.connection?.videoOrientation = .landscapeRight
        
     
        captureSession.startRunning()
    }
    func failed() {
        DispatchQueue.main.async {  [weak self] in
            let ac = UIAlertController(title: "Scanning not supported", message: "Your device does not support scanning a code from an item. Please use a device with a camera.", preferredStyle: .alert)
            ac.addAction(UIAlertAction(title: "OK", style: .default , handler: {  [weak self] _  in
                self?.dismiss(animated: true, completion: nil)
            }))
             
            self?.present(ac, animated: true)
        }
        
        captureSession = nil
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        if (captureSession?.isRunning == false) {
            captureSession.startRunning()
        }
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)

        if (captureSession?.isRunning == true) {
            captureSession.stopRunning()
        }
    }
    
    func metadataOutput(_ output: AVCaptureMetadataOutput, didOutput metadataObjects: [AVMetadataObject], from connection: AVCaptureConnection) {
      
        captureSession.stopRunning()

        if let metadataObject = metadataObjects.first {
            guard let readableObject = metadataObject as? AVMetadataMachineReadableCodeObject else { return }
            guard let stringValue = readableObject.stringValue else { return }
            AudioServicesPlaySystemSound(SystemSoundID(kSystemSoundID_Vibrate))
            
            found(code: stringValue)
        }

        
    }

    func found(code: String) {
        if let id = code.grCodeIDValue  {            
            dismiss(animated: true, completion: { [weak self] in
                self?.callbackQRCode?(id)
            })

        } 
//        else if let id = code.grCodeIDValueNew  {
//            dismiss(animated: true, completion: { [weak self] in
//                self?.callbackQRCode?(id)
//            })
//
//        } 
        else{
            let ac = UIAlertController(title: "", message: "QRCode \(String.localized("login_not_correct_label"))", preferredStyle: .alert)
            ac.addAction(UIAlertAction(title: String.localized("select_inspection_dialog_ok"), style: .default){ (alertAction) in
                if (self.captureSession?.isRunning == false) {
                    self.captureSession.startRunning()
                }
            })
            
            self.present(ac, animated: true)
        }
    }
     
}
