//
//  SignatureViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignatureDisplayLogic: AnyObject
{
  func displaySomething(viewModel: Signature.Something.ViewModel)
    func displayTitle(viewModel: Signature.Something.ViewModel)
    func getSignature(viewModel: Signature.Something.ViewModel)
    var confirmSignature : ((UIImage? , Signature.USER?) -> Void)? { get set }
}

class SignatureViewController: UIViewController, SignatureDisplayLogic
{
    
    
  var interactor: SignatureBusinessLogic?
  var router: (NSObjectProtocol & SignatureRoutingLogic & SignatureDataPassing)?
    var confirmSignature: ((UIImage?, Signature.USER?) -> Void)?
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SignatureInteractor()
    let presenter = SignaturePresenter()
    let router = SignatureRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupViews()
    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var canvas : Canvas!
    @IBOutlet weak var titleLabel : UILabel!
    @IBOutlet weak var confirmButton : UIButton!
    @IBOutlet weak var signatureImageView: UIImageView!
    
  func doSomething()
  {
    let request = Signature.Something.Request()
    interactor?.setUpTitle(request: request)
  }
  
  func displaySomething(viewModel: Signature.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }

    func displayTitle(viewModel: Signature.Something.ViewModel) {
        self.titleLabel.text = viewModel.titleName
        
        if let signatureImage = viewModel.signatureImage {
            signatureImageView.image = signatureImage
            signatureImageView.contentMode = .scaleAspectFill
            
            signatureImageView.isHidden = false
            setEnableButton(from: true)
        }
    }
    
    func getSignature(viewModel: Signature.Something.ViewModel) {
        confirmSignature?(viewModel.signatureImage , viewModel.user)
        dismiss(animated: true, completion: nil)
    }

    
    func setupViews(){
        canvas.onDraw = { [weak self]  in
            self?.setEnableButton(from: true)
        }
        canvas.setStrokeColor(color: .black)
        canvas.layer.borderWidth = 0.5
        canvas.layer.borderColor = UIColor.black.cgColor
        canvas.layer.cornerRadius = 10
        
        signatureImageView.isHidden = false
        setEnableButton(from: false)
    }
    
    @IBAction func clearTapped(_ sender : Any){
        canvas.clear()
        signatureImageView.isHidden = true
        setEnableButton(from: false)
    }
    
    func setEnableButton(from enable : Bool){
        confirmButton.isEnabled = enable
        confirmButton.backgroundColor = enable ? .orangeColor : .lightGray
    }
    
    @IBAction func confirmTapped(_ sender: Any) {
        let request = Signature.Something.Request(signatureView: canvas)
        interactor?.confirmSignatureView(request: request)
    }
    
}


extension SignatureViewController  {
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        presentationController?.presentedView?.gestureRecognizers?.first?.isEnabled = false
    }
}
