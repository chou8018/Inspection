//
//  SummaryCarInteractor.swift
//  Inspection
//
//  Created by Thanawat prathumset on 4/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SummaryCarBusinessLogic
{
  func evaluateGrade(request: SummaryCar.Something.Request)
    func showPDF(request: SummaryCar.Something.Request)
    func confirmSendToServer(request: SummaryCar.Something.Request)
    
    func validateActionSendToInspectionIMAT(request: SummaryCar.Something.Request)
    func confirmSendToInspectionIMAT(request: SummaryCar.Something.Request)
    
    //func updateInspectionVehicleId(request: SummaryCar.Something.Request)
}

protocol SummaryCarDataStore
{
  //var name: String { get set }
    var documentData : Data? { get set }
    var pdfName : String? { get set }
}

class SummaryCarInteractor: SummaryCarBusinessLogic, SummaryCarDataStore
{
  var presenter: SummaryCarPresentationLogic?
  var worker: SummaryCarWorker?
    var workerPDF: SummaryCarPDFWorker?
    var iMatWorker: IMatInspectionWorker?
    var imatWorker: IMatBookInWorker?
    var workerPickUp : PickUpCarWorker?
    
  //var name: String = ""
    var documentData : Data?
    var pdfName : String?
    
    var photoWorker : PhotoCarWorker?
    
    
    // MARK: prepare Data
  func evaluateGrade(request: SummaryCar.Something.Request)
  {
    let receiverModel = DataController.shared.receiverCarModel
    var carName = receiverModel.make_BU?.pdfValidateString ?? "-"
    carName += " \(receiverModel.modelCar ?? "")"
    carName += " \(receiverModel.variants ?? "")"
    
    
//    let engine = (receiverModel.isInValidEngineNumber ?? false) ? "à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¹„à¸¡à¹ˆà¹„à¸”à¹‰" : (receiverModel.engineNumber?.pdfValidateString ?? "-")
    
    let notValidateEngineCar = receiverModel.isInValidEngineNumber ?? false
    let reasonInvalidEngineNumber = "\(receiverModel.reasonInValidEngineNumber?.pdfValidateString2 ?? "-")"
    let engineNumber2 = "\(receiverModel.engineNumber?.pdfValidateString ?? "-")"
    var engine = notValidateEngineCar ? "à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¹„à¸¡à¹ˆà¹„à¸”à¹‰  " : ""
    engine += notValidateEngineCar ? reasonInvalidEngineNumber : engineNumber2
    
    
//    let vinNumber = (receiverModel.isInValidVinNumber ?? false) ? "à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¹„à¸¡à¹ˆà¹„à¸”à¹‰" : (receiverModel.vinNumber?.pdfValidateString ?? "-")
    let notValidateVinNumber = receiverModel.isInValidVinNumber ?? false
    let reasonInValidVinNumber = "\(receiverModel.reasonInValidVinNumber?.pdfValidateString2 ?? "")"
    let vinNumber2 = "\(receiverModel.vinNumber?.pdfValidateString ?? "-")"
    var vinNumber = notValidateVinNumber ? "à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¹„à¸¡à¹ˆà¹„à¸”à¹‰  " : ""
    vinNumber += notValidateVinNumber ?  reasonInValidVinNumber : vinNumber2
    
    
    let companyName = "\(receiverModel.companyName ?? "")\n\(receiverModel.companyNameEn ?? "")".pdfValidateString 
    let colorCar = receiverModel.colorCar?.pdfValidateString ?? "-"
    
    //var regis = receiverModel.registration?.pdfValidateString ?? "-"
    //regis += " \(receiverModel.province?.pdfValidateString ?? "")"
    var regis = ""
    /// Mapping Data Book-In
    if let province = DataController.shared.inspectionCarModel.registrationProvince ,
       let registration = DataController.shared.inspectionCarModel.registration {
        regis = "\(registration.pdfValidateString)"
        regis += " \(province.pdfValidateString)"
    }else{
        let provinceBookIn = DataController.shared.receiverCarModel.province
        let registrationBookIn = DataController.shared.receiverCarModel.registration
      
        regis = "\(registrationBookIn?.pdfValidateString ?? "-")"
        regis += " \(provinceBookIn?.pdfValidateString ?? "-")"
    }
    
    var grade = DataController.shared.inspectionCarModel.grade
    
    switch DataController.shared.bookInType {
    
    case .CAR, .CARWRECK:
        grade = DataController.shared.inspectionCarModel.grade
    case .MBIKE, .MBIKEWRECK:
        grade = DataController.shared.receiverCarModel.redBookCondition
    }
    
    let response = SummaryCar.Something.Response(carName: carName,
                                                 engine: engine,
                                                 vinNumber: vinNumber,
                                                 companyName: companyName,
                                                 colorCar: colorCar,
                                                 regis: regis,
                                                 grade: grade)
    presenter?.presentEvaluateGrade(response: response)
  }
    
    //MARK: PDF
    func showPDF(request: SummaryCar.Something.Request) {
        let bookinNo = DataController.shared.receiverCarModel.bookinNo?.trimWhiteSpace
        photoWorker = PhotoCarWorker()
        photoWorker?.fetchInspectionImageList(from: bookinNo, completion: {[weak self] photoResponse in
        
            self?.createPDF({[weak self] pdfResponse in
                self?.documentData = pdfResponse.documentData
                self?.pdfName = createPDFName("Inspection")
                self?.presenter?.presentPDF(response: pdfResponse)
            })
        })
      
    }
    var mbInspecWorkerPDF : MotorbikeInspecPDFWorker?
    
    func createPDF(_ pdfResponse:@escaping (SummaryCar.Something.Response)->()){
        let model = DataController.shared.inspectionCarModel
        let inspector = DataController.shared.getUser()
        
        switch DataController.shared.bookInType {
        
        case .CAR, .CARWRECK:
            workerPDF = SummaryCarPDFWorker()
            workerPDF?.generatePDFForInspection(model: model, inspector: inspector,  completion: {(response) in
                
                pdfResponse(response)
            })
        case .MBIKE, .MBIKEWRECK:
            print("ðŸ›µ CREATE PDF MOTORBIKE INSPECTION")
            mbInspecWorkerPDF = MotorbikeInspecPDFWorker()
            mbInspecWorkerPDF?.generateMBPDFForInspection(model: model, inspector: inspector,  completion: {(response) in
                
                pdfResponse(response)
            })
        }
      
    }
    
    //MARK: Inspection
    func confirmSendToServer(request: SummaryCar.Something.Request) {
        guard let _ = DataController.shared.receiverCarModel.bookinNo  else {
            let response = SummaryCar.Something.Response()
            presenter?.presentAlertMessage(response: response)
            return
        }
        
        let isCreate = DataController.shared.inspectionCarModel.isCreate
        let method:SummaryCar.MethodInspection =  isCreate ? .UPDATE : .POST
        
        /// i have  book-in number
       
        
        switch method {
        
        case .POST:
            let model = DataController.shared.inspectionCarModel
            model.nameInspection = DataController.shared.getFullName()
            worker = SummaryCarWorker()
            worker?.inspection(model: model, completion: {[weak self] (response) in
                if response.error == nil{
                    DataController.shared.inspectionCarModel.isCreate = true
                }
                
                self?.updateReceiverBookInRedBookCondition()
            })
        case .UPDATE:
            print("UPDATE")
            let model = DataController.shared.inspectionCarModel
            
            worker = SummaryCarWorker()
            worker?.inspectionUpdate(model: model, completion: {[weak self] (response) in
                if response.error == nil{
                    DataController.shared.inspectionCarModel.isCreate = true
                }

                self?.updateReceiverBookInRedBookCondition()
            })
        }
        
       
        
    }
    
    fileprivate func updateReceiverBookInRedBookCondition(){
        switch DataController.shared.bookInType {
        
        case .CAR, .CARWRECK:
            let model = DataController.shared.receiverCarModel
            let bookinNo = DataController.shared.receiverCarModel.bookinNo
            workerPickUp = PickUpCarWorker()
            workerPickUp?.receiverBookInVehicleUpdate(to: bookinNo?.trimWhiteSpace, model: model, completion: {[weak self] (response) in
                self?.presenter?.presentSendToServer(response: SummaryCar.Something.Response())
            })
        case .MBIKE, .MBIKEWRECK:
      
            print("ðŸ›µ ignored updateReceiverBookInRedBookCondition")
            self.presenter?.presentSendToServer(response: SummaryCar.Something.Response())
            
        }
        
    }
    
    
    func validateActionSendToInspectionIMAT(request: SummaryCar.Something.Request) {
        let bookinNo = DataController.shared.receiverCarModel.bookinNo
    
        let isCreate = DataController.shared.inspectionCarModel.isCreate
        let vehicleId = DataController.shared.receiverCarModel.vehicleId.trimWhiteSpace
        
        let isEnableSendToIMAP = isCreate && !vehicleId.isEmpty
        let isEnableSave = (bookinNo != nil)
        
        let response = SummaryCar.Something.Response(isEnableSendToIMAP: isEnableSendToIMAP, isEnableSave: isEnableSave)
        presenter?.presentValidateSendToIMAT(response: response)
    }
    
    func inspectionUpdateDataBeforeSendIMAT(callback: @escaping ()->() ) {
        let model = DataController.shared.inspectionCarModel
        worker = SummaryCarWorker()
        worker?.inspectionUpdate(model: model, completion: { (response) in
            callback()
        })
    }
    func confirmSendToInspectionIMAT(request: SummaryCar.Something.Request) {
       print("ðŸ”¶ confirmSendToInspectionIMAT")
        // after send to imat
        // update vihicleId -> BookInType
        // vehicleId = IMAT
        inspectionUpdateDataBeforeSendIMAT { [weak self] in
            let bookinNo = DataController.shared.receiverCarModel.bookinNo?.trimWhiteSpace
            self?.photoWorker = PhotoCarWorker()
            self?.photoWorker?.fetchInspectionImageList(from: bookinNo, completion: {[weak self] photoResponse in
            
                self?.createPDF({[weak self] pdfResponse in
                    if let documentData = pdfResponse.documentData ,
                       let image = pdfDataToImage(documentData: documentData) {
                        
                        var imageResized = image
                        if var size = image.getFileSize() {
                            print("ðŸ”¸ filesize \(size), \(type(of: size))")
                            let maxSize = 2 * (1000 * 1000)
                            while size > maxSize {

                                imageResized = imageResized.resized(withPercentage: 0.9)!
                                size = imageResized.getFileSize()!

                                print("ðŸ”» resize \(size), \(type(of: size))")
                            }
                        }
                        self?.sendToInspection(imageResized)

                    }
                })

            })

        }
        
                
    }
    
    //MARK: Retrive, Delete, ReCreate
    fileprivate func sendToInspection(_ pdfImage:UIImage){
        iMatWorker = IMatInspectionWorker()
        iMatWorker?.retriveDocument(pdfImage, dType: .INSPECTION,  completion: {[weak self] response in
            self?.presenter?.presentSendToIMAT(response: response)
        })
    }
}
