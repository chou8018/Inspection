//
//  GaugeCheckViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 15/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RadioGroup

protocol GaugeCheckDisplayLogic: AnyObject
{
    func displaySomething(viewModel: GaugeCheck.Something.ViewModel)
}

class GaugeCheckViewController: ViewController, GaugeCheckDisplayLogic
{
    var interactor: GaugeCheckBusinessLogic?
    var router: (NSObjectProtocol & GaugeCheckRoutingLogic & GaugeCheckDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = GaugeCheckInteractor()
        let presenter = GaugeCheckPresenter()
        let router = GaugeCheckRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUIView()
        setRadio()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var gaugeSystemRadio: RadioGroup!
    @IBOutlet weak var summaryGaugeSystemTextField: MultilineTextField!
    @IBOutlet weak var machineLightShowTextField: CustomTextField!
    
    // local strings
    
    @IBOutlet weak var gaugeSystemLabel: UILabel!
    @IBOutlet weak var lightLabel: UILabel!
    @IBOutlet weak var summaryLabel: UILabel!

    override func initLocalString() {
        super.initLocalString()
        
        gaugeSystemLabel.text = String.localized("inspection_gauges_system_label")
        lightLabel.text = String.localized("inspection_gauges_light_label")
        machineLightShowTextField.placeholder = String.localized("inspection_gauges_details_placeholder_label")
        summaryLabel.text = String.localized("inspection_gauges_summary_label")
        summaryGaugeSystemTextField.placeholder = summaryLabel.text

    }
    
    func doSomething()
    {
        let request = GaugeCheck.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: GaugeCheck.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    //MARK UIView
    func setUIView(){
        summaryGaugeSystemTextField.autocorrectionType = .no
        machineLightShowTextField.autocorrectionType = .no
        
        summaryGaugeSystemTextField.delegate = self
        machineLightShowTextField.delegate = self
        
        
        addTarget(from: machineLightShowTextField)
    }
    fileprivate func addTarget(from textfield: UITextField ){
        textfield.addTarget(self, action: #selector(textFieldDidChange(_:)),for: .editingChanged)
    }
    
    
    //MARK: radio
    func setRadio(){
        let attributedString = [NSAttributedString.Key.foregroundColor : UIColor.appPrimaryColor]
        
        gaugeSystemRadio.attributedTitles = [
            NSAttributedString(
                string: string_inspection_engine_working, attributes: attributedString),
            NSAttributedString(
                string: string_inspection_engine_not_working, attributes: attributedString)
        ]
    }
    @IBAction func gaugeSystemValueChanged(_ sender: Any) {
        let value = getRadioValue(from: [string_inspection_engine_working, string_inspection_engine_not_working], selectIndex: gaugeSystemRadio.selectedIndex)
        DataController.shared.inspectionCarModel.gaugeSystem = value
        
        let isUseableGuage = gaugeSystemRadio.selectedIndex == 0 ? true : false
        DataController.shared.inspectionCarModel.isUseableGuage = isUseableGuage
    }
    
    func prepareData(){
        let model = DataController.shared.inspectionCarModel
        summaryGaugeSystemTextField.text = model.summaryGaugeSystem
        machineLightShowTextField.text = model.machineLightShow
        gaugeSystemRadio.selectedIndex = getRadioIndexByValue(from: [string_inspection_engine_working, string_inspection_engine_not_working], value: model.gaugeSystem)
    }
}



//MARK: TextView Delegate
extension GaugeCheckViewController : UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        //print(textView.text)
        DataController.shared.inspectionCarModel.summaryGaugeSystem = textView.text
    }
}
extension GaugeCheckViewController : UITextFieldDelegate {
    @objc func textFieldDidChange(_ textField: UITextField) {
        //print(textField.text)
        
        switch textField {
        case machineLightShowTextField:
            DataController.shared.inspectionCarModel.machineLightShow = textField.text
        default:
            return
        }
    }
    
    
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        
        return true
    }
}

extension GaugeCheckViewController {
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        scrollView.registKeyboardNotification()
        
        prepareData()
        
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        scrollView.resignKeyboardNotification()
    }
}
