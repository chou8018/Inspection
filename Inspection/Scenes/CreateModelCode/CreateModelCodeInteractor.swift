//
//  CreateModelCodeInteractor.swift
//  Inspection
//
//  Created by Thanawat Pratumsat on 23/6/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateModelCodeBusinessLogic
{
  func doSomething(request: CreateModelCode.Something.Request)
    func getMake(request: CreateModelCode.Something.Request)
    func selectMale(request: CreateModelCode.Something.Request)
    func getBody(request: CreateModelCode.Something.Request)
    func selectBody(request: CreateModelCode.Something.Request)
    func selectBodyTextChange(request: CreateModelCode.Something.Request)
    
    func getDrive(request: CreateModelCode.Something.Request)
    func selectDrive(request: CreateModelCode.Something.Request)
    
    func getGear(request: CreateModelCode.Something.Request)
    func selectGear(request: CreateModelCode.Something.Request)
    
    func getGearBox(request: CreateModelCode.Something.Request)
    func selectGearBox(request: CreateModelCode.Something.Request)
    
    func getFuelType(request: CreateModelCode.Something.Request)
    func selectFuelType(request: CreateModelCode.Something.Request)
    
    func getFuelDelivery(request: CreateModelCode.Something.Request)
    func selectFuelDelivery(request: CreateModelCode.Something.Request)
    
    func selectModel_BU(request: CreateModelCode.Something.Request)
    func selectModel_BU2(request: CreateModelCode.Something.Request)
    func selectModel_LO2(request: CreateModelCode.Something.Request)
    func selectVaraints(request: CreateModelCode.Something.Request)
    func selectModelCode(request: CreateModelCode.Something.Request)
    func selectEngineCapacity(request: CreateModelCode.Something.Request)
    func selectChassisno(request: CreateModelCode.Something.Request)
    
    func getBuildYear(request: CreateModelCode.Something.Request)
    func selectBuildYear(request: CreateModelCode.Something.Request)
    
    func validateField(request: CreateModelCode.Something.Request)
    
    func createModelCode(request: CreateModelCode.Something.Request)
    
    
    func fetchJatoModel(request: CreateModelCode.Something.Request)
    func fetchJatoVaraints(request: CreateModelCode.Something.Request)
    
    func updateModelCode(request: CreateModelCode.Something.Request)
    
    func fillDataFromEditModel(request: CreateModelCode.Something.Request)
}

protocol CreateModelCodeDataStore
{
  //var name: String { get set }
    var editModelCodeTemplate : ModelCodeTemplateModel? { get set }
}

class CreateModelCodeInteractor: CreateModelCodeBusinessLogic, CreateModelCodeDataStore
{
  var presenter: CreateModelCodePresentationLogic?
  var worker: CreateModelCodeWorker?
  //var name: String = ""
    var workerMake: LandingPageWorker?
    var makeList: [StandradMakeModel]?
    var selectMake:String?
    
    var workerAboutCar: AboutCarWorker?
    var bodyList: [BodyCarModel]?
    var selectBody:String?
   
    var model_Bu:String?
    var model_Lo:String?
    
    var varaints:String?
    var modelCode:String?
    var engineCapacity:String?
    var buildYear:String?
    var chassisno:String?
    
    var modelDisplay:String?
    var id:Int?
    var editModelCodeTemplate : ModelCodeTemplateModel? {
        didSet{
            print("‚ù§Ô∏è model edit :  \(editModelCodeTemplate) ‚ù§Ô∏è ")
        }
    }
    
  // MARK: Do something
  
  func doSomething(request: CreateModelCode.Something.Request)
  {
   
    
    let response = CreateModelCode.Something.Response()
    presenter?.presentSomething(response: response)
  }
    
    //MARK: get make
    func getMake(request: CreateModelCode.Something.Request) {
        workerMake = LandingPageWorker()
        workerMake?.fetchStandardMakeList(completion: { [weak self] result in
            if let error = result.error {
                
                let response = CreateModelCode.Something.Response(error: error)
                self?.presenter?.presentMakeList(response: response)
            }else{
                self?.makeList =  result.standardMakeList
                
                let response = CreateModelCode.Something.Response(makeList: result.standardMakeList)
                self?.presenter?.presentMakeList(response: response)
                
            }
        })
    }
    
    
    //MARK: get body
    func getBody(request: CreateModelCode.Something.Request) {
        workerAboutCar = AboutCarWorker()
        workerAboutCar?.fetchBodyCar(completion: {[weak self] result in
            if let error = result.error {
                
                let response = CreateModelCode.Something.Response(error: error)
                self?.presenter?.presentBodyList(response: response)
            }else{
                self?.bodyList =  result.bodyList
                
                let response = CreateModelCode.Something.Response(bodyList: result.bodyList)
                self?.presenter?.presentBodyList(response: response)
                
            }
        })
    }
    
    
    
    func selectMale(request: CreateModelCode.Something.Request) {
        guard let makeValue =  request.makeValue else { return }
        if let makeList = self.makeList {
            if let selectModel = makeList.first(where: { $0.desc_BU == makeValue }) {
                
                self.selectMake = selectModel.make1
                self.resultMottoModelCode()
                print("üßÄ make = \(selectModel)")
            }
        }
    }
    
    func selectBody(request: CreateModelCode.Something.Request) {
        guard let bodyValue =  request.bodyValue else { return }
        if let bodyList = self.bodyList {
            if let selectModel = bodyList.first(where: { $0.desc_BU == bodyValue}) {
                
                self.selectBody = selectModel.body1
                self.resultMottoModelCode()
                print("üßÄ body = \(selectModel)")
            }
        }
    }
    func selectBodyTextChange(request: CreateModelCode.Something.Request) {
        self.selectBody = nil
        self.resultMottoModelCode()
    }
    
    //MARK: Drive
    var driveList: [DriveModel]?
    
    var selectDrive: String?
    
    func getDrive(request: CreateModelCode.Something.Request) {
        worker = CreateModelCodeWorker()
        worker?.getDrive(completion: { [weak self] response in
            if let modelList = response.driveList {
                self?.driveList = modelList
            }
            self?.presenter?.presentDriveList(response: response)
        })

    }
    
    func selectDrive(request: CreateModelCode.Something.Request) {
        guard let driveValue =  request.driveValue else { return }

        if let selectModel = self.driveList?.first(where: { $0.desc_BU == driveValue}) {
            
            self.selectDrive = selectModel.drive1
            self.resultMottoModelCode()
            print("üßÄ drive = \(selectModel)")
        }
    }
    
    //MARK: Gear
    let gearList: [String] = ["0","1","2","3","4","5","6","7","8","9","10","11"]
    var selectGear:String?
    
    func getGear(request: CreateModelCode.Something.Request) {
        let response = CreateModelCode.Something.Response(gearList: gearList)
        presenter?.presentGearList(response: response)
    }
    
    func selectGear(request: CreateModelCode.Something.Request) {
        guard let gearValue = request.gearValue else { return }
        self.selectGear = gearValue
        self.resultMottoModelCode()
        print("üßÄ gear = \(gearValue)")
    }
    
    
    //MARK: GearBox
    var gearBoxList: [GearBoxModel]?
    
    var selectGearBox: String?
    
    func getGearBox(request: CreateModelCode.Something.Request) {
        worker = CreateModelCodeWorker()
        worker?.getGearBox(completion: { [weak self] response in
            if let modelList = response.gearBoxList {
                self?.gearBoxList = modelList
            }
            self?.presenter?.presentGearBoxList(response: response)
        })
        
    
    }
    func selectGearBox(request: CreateModelCode.Something.Request) {
        guard let gearBoxValue =  request.gearBoxValue else { return }

        if let selectModel = self.gearBoxList?.first(where: { $0.desc_BU == gearBoxValue}) {
            
            self.selectGearBox = selectModel.gearBox1
            self.resultMottoModelCode()
            print("üßÄ gearbox = \(selectModel)")
        }
    }
    
    //MARK: FuelType
    var fuelTypeList: [FuelTypeModel]?
    var selectfuelType: String?
    
    func getFuelType(request: CreateModelCode.Something.Request) {
        
        worker = CreateModelCodeWorker()
        worker?.getFuelType(completion: {[weak self] response in
            if let modelList = response.fuelTypeList {
                self?.fuelTypeList = modelList
            }
            self?.presenter?.presentFuelTypeList(response: response)
        })
        
    }
    
    func selectFuelType(request: CreateModelCode.Something.Request) {
        guard let fuelTypeValue =  request.fuelTypeValue else { return }

        if let selectModel = self.fuelTypeList?.first(where: { $0.desc_BU == fuelTypeValue}) {
            self.selectfuelType = selectModel.fuelType1
            self.resultMottoModelCode()
            print("üßÄ fuelType = \(selectModel)")
        }
    }
    
    //MARK: Fuel Delivery
    var fuelDeliveryList: [FuelDeliveryModel]?
    var selectFuelDelivery : String?
    
    func getFuelDelivery(request: CreateModelCode.Something.Request) {
        worker = CreateModelCodeWorker()
        worker?.getFuelDelivery(completion: {[weak self] response  in
            if let modelList = response.fuelDeliveryList {
                self?.fuelDeliveryList = modelList
            }
            self?.presenter?.presentFuelDeliveryList(response: response)
        })

    }
    
    func selectFuelDelivery(request: CreateModelCode.Something.Request) {
        guard let fuelDeliveryValue =  request.fuelDeliveryValue else { return }

        if let selectModel = self.fuelDeliveryList?.first(where: { $0.desc_BU == fuelDeliveryValue}) {
            
            self.selectFuelDelivery = selectModel.fuelDelivery1
            self.resultMottoModelCode()
            print("üßÄ fuelDelevery = \(selectModel)")
        }
    }
    
    //MARK: BuildYear
    func getBuildYear(request: CreateModelCode.Something.Request) {
        let yearsList = getYears(from: 1980)
        let response = CreateModelCode.Something.Response(buildYearList: yearsList)
        presenter?.prrsentBuildYearList(response: response)
        
    }
    func selectBuildYear(request: CreateModelCode.Something.Request) {
        self.buildYear = request.buildYear
    }

    func selectModel_BU(request: CreateModelCode.Something.Request){
        guard let model_Bu = request.model_Bu else { return }
        if let modelList = self.jatoCarModelList {
            if let model = modelList.first(where: { $0.model_BU == model_Bu}) {
                self.model_Bu = model.model_BU
                self.model_Lo = model.model_LO
                self.resultMottoModelCode()
                let response = CreateModelCode.Something.Response(model_Lo: model.model_LO)
                self.presenter?.presentModelLO(response: response)
            }
        }
    }
    func selectModel_BU2(request: CreateModelCode.Something.Request) {
        self.model_Bu = request.model_Bu
        
        self.resultMottoModelCode()
    }
    func selectModel_LO2(request: CreateModelCode.Something.Request) {
        self.model_Lo = request.model_Lo
    }
    
    func selectVaraints(request: CreateModelCode.Something.Request){
        self.varaints = request.varaints
        self.resultMottoModelCode()
    }
    func selectModelCode(request: CreateModelCode.Something.Request){
        self.modelCode = request.modelCode
        self.resultMottoModelCode()
    }
    func selectEngineCapacity(request: CreateModelCode.Something.Request) {
        self.engineCapacity = request.engineCapacity

    }
    func selectChassisno(request: CreateModelCode.Something.Request) {
        self.chassisno = request.chassisno
    }
    
    func resultMottoModelCode() {
        
        var mottoModelCode = ""
        mottoModelCode += "\(self.model_Bu ?? "")"
        mottoModelCode += "\(self.varaints ?? "")"
//        mottoModelCode += "\(self.selectFuelDelivery ?? "")"
//        mottoModelCode += "\(self.selectfuelType ?? "")"
//        mottoModelCode += "\(self.selectGearBox ?? "")"
//        mottoModelCode += "\(self.selectGear ?? "")"
//        mottoModelCode += "\(self.selectDrive ?? "")"
//        mottoModelCode += "\(self.selectMake ?? "")"
//        mottoModelCode += "\(self.selectBody ?? "")"

        self.modelDisplay = mottoModelCode.uppercased()
        
        let response = CreateModelCode.Something.Response(mottoModelCode: mottoModelCode.uppercased())
        presenter?.presentMottoModelCode(response: response)
    }
    
    
    func validateField(request: CreateModelCode.Something.Request){
        let modelCodeType = request.modelCodeType
        
        let validChassisno = chassisno != nil && !(chassisno?.isEmpty ?? false)
        let validModel_Bu = model_Bu != nil && !(model_Bu?.isEmpty ?? false)
        let validVaraints = varaints != nil && !(varaints?.isEmpty ?? false)
        let validFuelDelivery = selectFuelDelivery != nil && !(selectFuelDelivery?.isEmpty ?? false)
        let validFuelType = selectfuelType != nil && !(selectfuelType?.isEmpty ?? false)
        let validGearBox = selectGearBox != nil && !(selectGearBox?.isEmpty ?? false)
        let validGear = selectGear != nil && !(selectGear?.isEmpty ?? false)
        let validDrive = selectDrive != nil && !(selectDrive?.isEmpty ?? false)
        let validMake = selectMake != nil && !(selectMake?.isEmpty ?? false)
        let validBody = selectBody != nil && !(selectBody?.isEmpty ?? false)
        
        let validModelCode = modelCode != nil && !(modelCode?.isEmpty ?? false)
        
        let validEngineCapacity = engineCapacity != nil && !(engineCapacity?.isEmpty ?? false) && (engineCapacity?.isValidNumber() ?? false)
        let validBuildYear = buildYear != nil && !(buildYear?.isEmpty ?? false) && (buildYear?.isValidNumber() ?? false)
        
        var message : String = ""
        message += validChassisno ? "" : "Chassis No. ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validModelCode ? "" : "Model Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validModel_Bu ? "" : "Model BU ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validVaraints ? "" : "Varaints ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validEngineCapacity ? "" : "Engine Capacity ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validFuelDelivery ? "" : "Fuel Delivery ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validFuelType ? "" : "Fuel Type ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validGearBox ? "" : "Gear Box ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validGear ? "" : "Gear ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validDrive ? "" : "Drive ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validMake ? "" : "Make ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validBody ? "" : "Body ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        message += validBuildYear ? "" : "Build Year ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
        
        
      
        
        
        let response = CreateModelCode.Something.Response(validateErrorMessage: message,
                                                          modelCodeType: modelCodeType)
        presenter?.presentValidateField(response : response)
        
    }
    fileprivate func getYears(from starterYear: Int) -> [String] {
        let df = DateFormatter()
        let years = df.years(starterYear...Date().year)
            .sorted(by: { $0 > $1 })
            //.map({ $0.toInt() + 543 })
            //.map({ $0.toString() })
            
        return years
    }
    
    
    
    
    
    //MARK: Jato Model
    var jatoCarModelList:[JatoCarModelsModel]?
    func fetchJatoModel(request: CreateModelCode.Something.Request) {
        worker = CreateModelCodeWorker()
        worker?.getJatoModels(completion: { [weak self] response in
            if let modelList = response.jatoCarModelList {
                self?.jatoCarModelList = modelList
            }
            self?.presenter?.presentJatoModelList(response: response)
        })
    }
    
    
    //MARK: Jato Varaints
    var jatoVaraintsList:[JatoVaraintsModel]?
    func fetchJatoVaraints(request: CreateModelCode.Something.Request) {
        worker = CreateModelCodeWorker()
        worker?.getJatoVaraints(form: self.model_Bu ?? "", completion: { [weak self] response in
            if let modelList = response.jatoVaraintsList {
                self?.jatoVaraintsList = modelList
                self?.varaints = nil
            }
            self?.presenter?.presentJatoVaraintsList(response: response)
        })
    }
    
    
    
    
    //MARK: Create
    func createModelCode(request: CreateModelCode.Something.Request) {
        worker = CreateModelCodeWorker()
        
        worker?.createModel(modelCode: self.modelCode?.uppercased(),
                            modelDisplay: self.modelDisplay?.uppercased(),
                            buildYear: self.buildYear?.uppercased(),
                            model_BU: self.model_Bu?.uppercased(),
                            model_LO: self.model_Lo,
                            variants: self.varaints?.uppercased(),
                            engineCapacity: self.engineCapacity?.toInt(),
                            fuelDelivery: self.selectFuelDelivery?.uppercased(),
                            fuelType: self.selectfuelType?.uppercased(),
                            gearbox: self.selectGearBox?.uppercased(),
                            gears: self.selectGear?.uppercased(),
                            drive: self.selectDrive?.uppercased(),
                            make: self.selectMake?.uppercased(),
                            body: self.selectBody?.uppercased(),
                            chassisPreCode: self.chassisno?.uppercased(),
                            completion: { [weak self] response in
                                self?.presenter?.presentCreateModel(response: response)
                            })
    }
    //MARK: Update ModelCode
    func updateModelCode(request: CreateModelCode.Something.Request) {
        
        //modelCode and varaints can not edit
        
        worker = CreateModelCodeWorker()
        
        worker?.updateModel(modelCode: self.modelCode?.uppercased(),
                            modelDisplay: self.modelDisplay?.uppercased(),
                            buildYear: self.buildYear?.uppercased(),
                            model_BU: self.model_Bu?.uppercased(),
                            model_LO: self.model_Lo,
                            variants: self.varaints?.uppercased(),
                            engineCapacity: self.engineCapacity?.toInt(),
                            fuelDelivery: self.selectFuelDelivery?.uppercased(),
                            fuelType: self.selectfuelType?.uppercased(),
                            gearbox: self.selectGearBox?.uppercased(),
                            gears: self.selectGear?.uppercased(),
                            drive: self.selectDrive?.uppercased(),
                            make: self.selectMake?.uppercased(),
                            body: self.selectBody?.uppercased(),
                            chassisPreCode: self.chassisno?.uppercased(),
                            id: self.id,
                            completion: { [weak self] response in
                                self?.presenter?.presentUpdateModel(response: response)
                            })
    }
    
    
    
    func fillDataFromEditModel(request: CreateModelCode.Something.Request) {
        guard let model = self.editModelCodeTemplate else { return }
        
        modelCode = model.modelCode?.trimWhiteSpace
        modelDisplay = model.modelDisplay?.trimWhiteSpace
        buildYear = model.buildYear?.trimWhiteSpace
        model_Bu = model.model_BU?.trimWhiteSpace
        model_Lo = model.model_LO?.trimWhiteSpace
        varaints = model.variants?.trimWhiteSpace
        engineCapacity = model.engineCapacity?.toString()
        chassisno = model.chassisPreCode?.trimWhiteSpace
        
        selectFuelDelivery = model.fuelDelivery?.trimWhiteSpace
        selectfuelType = model.fuelType?.trimWhiteSpace
        selectGearBox = model.gearbox?.trimWhiteSpace
        selectGear = model.gears?.trimWhiteSpace
        selectDrive = model.drive?.trimWhiteSpace
        selectMake = model.make?.trimWhiteSpace
        selectBody = model.body?.trimWhiteSpace
        
        id = model.id
        
        let editMake = self.makeList?.first(where: { $0.make1?.trimWhiteSpace == model.make?.trimWhiteSpace })?.desc_BU

        let editBody = self.bodyList?.first(where: { $0.body1?.trimWhiteSpace == model.body?.trimWhiteSpace })?.desc_BU
        
        let editFuelDelivery = self.fuelDeliveryList?.first(where: { $0.fuelDelivery1?.trimWhiteSpace == model.fuelDelivery?.trimWhiteSpace })?.desc_BU
        
        let editFuelType = self.fuelTypeList?.first(where: { $0.fuelType1?.trimWhiteSpace == model.fuelType?.trimWhiteSpace })?.desc_BU
        
        let editGearBox = self.gearBoxList?.first(where: { $0.gearBox1?.trimWhiteSpace == model.gearbox?.trimWhiteSpace })?.desc_BU
        
        let editDrive = self.driveList?.first(where: { $0.drive1?.trimWhiteSpace == model.drive?.trimWhiteSpace })?.desc_BU
        
        let response = CreateModelCode.Something.Response(modelCodeTemplate: model,
                                                          editMake: editMake,
                                                          editBody: editBody,
                                                          editFuelDelivery: editFuelDelivery,
                                                          editFuelType: editFuelType,
                                                          editGearBox: editGearBox,
                                                          editDrive: editDrive)
        presenter?.presentFormEditModel(response: response)
        
        
        var mottoModelCode = ""
        mottoModelCode += "\(self.model_Bu ?? "")"
        mottoModelCode += "\(self.varaints ?? "")"

        self.modelDisplay = mottoModelCode.uppercased()
        
        let responseMottoModelCode = CreateModelCode.Something.Response(mottoModelCode: mottoModelCode.uppercased())
        presenter?.presentMottoModelCode(response: responseMottoModelCode)
        
        self.editModelCodeTemplate = nil
    }
}


