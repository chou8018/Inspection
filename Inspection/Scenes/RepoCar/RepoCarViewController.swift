//
//  RepoCarViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 4/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RepoCarDisplayLogic: AnyObject
{
    func displaySomething(viewModel: PhotoCar.Something.ViewModel)
    func displayReceiverDayTimeInspection(viewModel: PhotoCar.Something.ViewModel)
    func displayUploadProgress(viewModel: PhotoCar.Something.ViewModel)
    func displayAlertMessage(viewModel: PhotoCar.Something.ViewModel)
    
    func displayErrorFetchList(viewModel: PhotoCar.Something.ViewModel)
    
    func displayErrorDelete(viewModel: PhotoCar.Something.ViewModel)
    
    func displaySendInsectionIMATSuccess(viewModel: PhotoCar.Something.ViewModel)
    func displaySendInsectionIMATError(viewModel: PhotoCar.Something.ViewModel)
    
    func displayShowImageView(viewModel: PhotoCar.Something.ViewModel)
    
    func displayActionEventSuccess(viewModel: PhotoCar.Something.ViewModel)
}

class RepoCarViewController: UIViewController, RepoCarDisplayLogic
{
    var interactor: RepoCarBusinessLogic?
    var router: (NSObjectProtocol & PhotoCarRoutingLogic & PhotoCarDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = RepoCarInteractor()
        let presenter = RepoCarPresenter()
        let router = RepoCarRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
            
            if let dateTimePicker = segue.destination as? DateTimeViewController {
                dateTimePicker.didSelectedDateTimePicker = { [weak self] (dateInspection) in
                    
                    let request = PhotoCar.Something.Request(dateInspection: dateInspection)
                    self?.interactor?.setReceiverDateTimeInspection(request: request)
                }
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setTitleName()
        setUpTab()
        setUpDateTime()
        doSomething()
    }
    
    // MARK: Do something
    @IBOutlet weak var fullName:UILabel!
    @IBOutlet weak var pickUpStackView: UIView!
    @IBOutlet weak var checkStackView: UIView!
    @IBOutlet weak var photoStackView: UIView!
    @IBOutlet weak var repoStackView: UIView!
    
    @IBOutlet weak var saveButton: UIBarButtonItem!
    @IBOutlet weak var sendInspectionButton: UIBarButtonItem!
    
    @IBOutlet weak var dateTimeView: UIView!
    @IBOutlet weak var dateLabel: UILabel!
    @IBOutlet weak var timeLabel: UILabel!
    
    
    var dataSource = DataSourceCollectionView()
    var imagePicker: ImagePicker!
    
    
    var sourceSectionName : [(name:String, cb: CheckBoxUIButton)] = []
    
    
    
    func doSomething()
    {
        let request = PhotoCar.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: PhotoCar.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    
    //MARK: DateTime
    func setUpDateTime(){
        dateTimeView.isUserInteractionEnabled = true
        dateTimeView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showDateTime)))
    }
    
    func displayReceiverDayTimeInspection(viewModel: PhotoCar.Something.ViewModel) {
        guard let dayTime = viewModel.dayTime else { return }
        self.dateLabel.text = dayTime.day
        self.timeLabel.text = dayTime.time
    }
    
    @objc func showDateTime(){
        performSegue(withIdentifier: "showDateTime", sender: nil)
    }
    
    //MARK: IBAction
    @IBAction func toBackView(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    @IBAction func toRootView(_ sender: Any) {
        popToRootViewController(confirm: true)
    }
    @IBAction func saveTapped(_ sender: Any) {
        alert(message: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡πÑ‡∏´‡∏°") { [weak self] in
            let request = PhotoCar.Something.Request()
            self?.interactor?.confirmPhotoInspection(request: request)
        }
    }
    
    @IBAction func saveToIMAT(_ sender: Any){
        print("üî∂ save to IMAT")
        alert(message: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á\nInspection to IMAT ‡πÑ‡∏´‡∏°") { [weak self] in
            self?.sendToIMAT()
        }
    }
    
    //MARK: send to IMAT
    func sendToIMAT(){
        let request = PhotoCar.Something.Request()
        interactor?.confirmSendToInspectionIMAT(request: request)
    }
    
    func displaySendInsectionIMATError(viewModel: PhotoCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.sendToIMAT()
        }
    }
    
    func displaySendInsectionIMATSuccess(viewModel: PhotoCar.Something.ViewModel) {
        print("üî∂ photo displaySendInsectionIMATSuccess")
        //self.updateVehicleId()
        alertErrorMessageOKAction(message: "Inspection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à") {
            //ignored
        }
    }
    
    func displayShowImageView(viewModel: PhotoCar.Something.ViewModel) {
        
        //
        //
        //   show imageviewer
        //
        //
        performSegue(withIdentifier: "ImageViewerSegue", sender: nil)
    }
    
    func validateInspectionIMAT(){
        let request = PhotoCar.Something.Request()
        interactor?.validateActionSendToInspectionIMAT(request: request)
    }
    
    
    func displayActionEventSuccess(viewModel: PhotoCar.Something.ViewModel) {
        sendInspectionButton.isEnabled = viewModel.isEnableSendToIMAP ?? false
        
    }
    
    
    func displayUploadProgress(viewModel: PhotoCar.Something.ViewModel) {
        performSegue(withIdentifier: "UploadProgress", sender: nil)
    }
    
    func displayAlertMessage(viewModel: PhotoCar.Something.ViewModel) {
        guard let message = viewModel.alertPhotoMessage else { return }
        alertErrorMessageOKAction(message: message) {
            // ignored
        }
    }
    
    //MARK: SetupTab
    func setUpTab(){
        fullName.text = "‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏†‡∏≤‡∏û \(DataController.shared.getFullName())"
        
        pickUpStackView.isUserInteractionEnabled = true
        pickUpStackView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(toPickUpCar)))
        
        checkStackView.isUserInteractionEnabled = true
        checkStackView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(toCheckCar)))
        
        photoStackView.isUserInteractionEnabled = true
        photoStackView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(toPhotoCar)))
        
        repoStackView.isUserInteractionEnabled = true
        repoStackView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(toRepoCar)))
    }
    
    //MARK: Title
    func setTitleName(){
        switch DataController.shared.bookInType {
        case .CAR:
            title = "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ - ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"
        case .MBIKE:
            title = "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ - ‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå"
        case  .CARWRECK:
            title = "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ - ‡∏ã‡∏≤‡∏Å‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"
        case  .MBIKEWRECK:
            title = "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ - ‡∏ã‡∏≤‡∏Å‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå"
        }
    }
    
    func prepareData(){
        let request = PhotoCar.Something.Request()
        interactor?.prepareDataSection(request: request)
    }
    func fetchPhotoList(){
        let request = PhotoCar.Something.Request()
        interactor?.fetchPhotoList(request: request)
    }
    
    func displayErrorFetchList(viewModel: PhotoCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        
        DispatchQueue.main.async { [weak self] in
            self?.alertErrorMessage(message: errorMessage) { [weak self] in
                self?.fetchPhotoList()
            }
        }
        
    }
    func displayErrorDelete(viewModel: PhotoCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        
        DispatchQueue.main.async { [weak self] in
            self?.alertErrorMessageOKAction(message: errorMessage) {
                // ignored
            }
        }
    }
    
    func validateActionSendPhoto(){
        var isCreate = DataController.shared.inspectionCarModel.isCreate
        
        let isCarWreck = DataController.shared.bookInType == .CARWRECK || DataController.shared.bookInType == .MBIKEWRECK
        let vehicleId = DataController.shared.receiverCarModel.vehicleId.trimWhiteSpace
        if isCarWreck && (!vehicleId.isEmpty) { /// carwreck  & send book-in
            isCreate = true
        }
        saveButton.isEnabled = isCreate
    }
}

//MARK: ViewController Lift Cycle
extension RepoCarViewController {
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let dateInspection = DataController.shared.inspectionCarModel.date
        let request = PhotoCar.Something.Request(dateInspection: dateInspection)
        interactor?.setReceiverDateTimeInspection(request: request)
        
        prepareData()
        fetchPhotoList()
        validateActionSendPhoto()
        validateInspectionIMAT()
    }
}

extension RepoCarViewController  {
    @objc func toPickUpCar() {
        navigationController?.popToViewController(withType: PickUpCarViewController.self, animated: false)
    }
    
    @objc func toCheckCar() {
        guard let nav = navigationController else { return }
        let foundCheckCar = nav.viewControllers.filter({ $0 is CheckCarViewController})
        if foundCheckCar.count > 0 {
            navigationController?.popViewController(animated: false)
        }else{
            navigationController?.pushViewController(CarInspectionPage.CHECK_CAR.VC,  animated: false)
        }
    }
    
    @objc func toPhotoCar() {
        guard let nav = navigationController else { return }
        let foundPhotoCar = nav.viewControllers.filter({ $0 is PhotoCarViewController})
        if foundPhotoCar.count > 0 {
            navigationController?.popViewController(animated: false)
        }else{
            navigationController?.pushViewController(CarInspectionPage.PHOTO_CAR.VC, animated: false)
        }
        
    }
    
    @objc func toRepoCar() {
    }
}

extension RepoCarViewController : ImagePickerPresenter {
    func didSelectCallback() {
        showLoading()
    }
    
    func pickImageCallback(image: UIImage?, url: URL?) {
        guard let image =  image  else { return }
        
        let request = PhotoCar.Something.Request(image: image, url: url)
        interactor?.addPhoto(request: request)
    }
    
    
}
