//
//  UploadWorker.swift
//  Inspection
//
//  Created by Thanawat prathumset on 9/3/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
typealias uploadHandler = (Upload.Something.Response) ->()

class UploadWorker
{
//    var completion: uploadHandler?
//    var inProgress: uploadHandler?
//
//    var name:String?
//    var progress = 0.0
//    var timer: Timer?
//
//    func done(){
//        print("✅ finished \(name)")
//        completion?(Upload.Something.Response())
//    }
//
//    @objc func onProgress(){
//        if(progress < 1) {
//            progress += Double.random(in: 0.0...0.5)
//        }else{
//            timer?.invalidate()
//            done()
//        }
//
//        let progressModel = Upload.ProgressModel(name: name ?? "", progress: progress)
//        let response = Upload.Something.Response(progressModel: progressModel)
//        inProgress?(response)
//    }
    
    func uploadImage(_ photoImage: PhotoCar.PhotoImage , dType:DocumentType,
                               inProgress: @escaping uploadHandler,
                               completion: @escaping uploadHandler){
        
//        self.name = photoImage.name
//        self.inProgress = inProgress
//        self.completion = completion
//        timer = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(onProgress), userInfo: nil, repeats: true)
//
        
        guard let base64String = photoImage.image?.toBase64String(),
              let imageName = photoImage.name else { return }
        
        
        let modelReceiver = DataController.shared.receiverCarModel
        let vehicleId = modelReceiver.vehicleId.trimWhiteSpace
        let bookInNumber = modelReceiver.bookinNo?.trimWhiteSpace
        
        let damageDesc = photoImage.damageDesc
        let damageSize = photoImage.damageSize
        let damageType = photoImage.damageType
        
        
        let inspectionImage = InspectionImage(bookInNumber: bookInNumber,
                                              vehicleId: vehicleId,
                                              imageTypeId: dType.documentTypeId,
                                              imageDescTh: imageName,
                                              imageDescEn: imageName,
                                              imageName: imageName,
                                              imagePath: "",
                                              damageDesc: damageDesc,
                                              damageSize: damageSize,
                                              damageType: damageType)
        
        let request = InspectionImageRequest(inspectionImage: inspectionImage,
                                             base64String: base64String)
        
        print("❤️🐶 InspectionImageUpload request: \(inspectionImage.toJSON()) ❤️🐶")
        
        InspectionImageUploadService().callServiceUpload(request: request) { (progress) in

            let progressModel = Upload.ProgressModel(name: photoImage.name ?? "", progress: progress)
            let response = Upload.Something.Response(progressModel: progressModel)
            inProgress(response)

        } _: { results in
            switch results {

            case .success(_):

                let response = Upload.Something.Response()
                completion(response)
                break
            case .failure(let kError):
                let response = Upload.Something.Response(error: kError.getMessage)
                completion(response)
            }
        }
    }

    
    //MARK: Multipart/form-data
//    func uploadImage(_ photoImage: PhotoCar.PhotoImage ,
//                               inProgress: @escaping uploadHandler,
//                               completion: @escaping uploadHandler){
//
//        let request = BaseRequest()
//        ImageUploadService().callServiceUpload2(request: request, photoImage: photoImage) { (progress) in
//
//            let progressModel = Upload.ProgressModel(name: photoImage.name ?? "", progress: progress)
//            let response = Upload.Something.Response(progressModel: progressModel)
//            inProgress(response)
//
//        } _: { results in
//            switch results {
//
//            case .success(_):
//
//                let response = Upload.Something.Response()
//                completion(response)
//                break
//            case .failure(let kError):
//                let response = Upload.Something.Response(error: kError.getMessage)
//                completion(response)
//            }
//        }
//    }
}
