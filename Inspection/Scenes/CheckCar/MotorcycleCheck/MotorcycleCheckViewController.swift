//
//  MotorcycleCheckViewController.swift
//  Inspection
//
//  Created by Thanawat Pratumsat on 20/9/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RadioGroup

protocol MotorcycleCheckDisplayLogic: AnyObject
{
    func displaySomething(viewModel: MotorcycleCheck.Something.ViewModel)
    func displayProvinceDropdown(viewModel: MotorcycleCheck.Something.ViewModel)
    func displayShowProvinceError(viewModel: MotorcycleCheck.Something.ViewModel)
    
    func displayFrontTreadDepthValidNumber(viewModel: MotorcycleCheck.Something.ViewModel)
    func displayRearTreadDepthValidNumber(viewModel: MotorcycleCheck.Something.ViewModel)
    
}

class MotorcycleCheckViewController: ViewController, MotorcycleCheckDisplayLogic
{
    var interactor: MotorcycleCheckBusinessLogic?
    var router: (NSObjectProtocol & MotorcycleCheckRoutingLogic & MotorcycleCheckDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MotorcycleCheckInteractor()
        let presenter = MotorcycleCheckPresenter()
        let router = MotorcycleCheckRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        setRadio()
        setUIView()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var exteriorDamageTextView : MultilineTextField!
    
    @IBOutlet weak var provinceTextField: DropDown!
    @IBOutlet weak var registrationTextField: CustomTextField!
    
    
    @IBOutlet weak var isBatteryCheckBox: CheckBoxUIButton!
    @IBOutlet weak var batteryDamageTextField: CustomTextField!
    
    @IBOutlet weak var isCDICheckBox: CheckBoxUIButton!
    @IBOutlet weak var cdiDamageTextField: CustomTextField!
    
    @IBOutlet weak var isElectricStartCheckBox: CheckBoxUIButton!
    @IBOutlet weak var electricStartDamageTextField: CustomTextField!
    
    @IBOutlet weak var isOdometerCheckBox: CheckBoxUIButton!
    @IBOutlet weak var odometerDamageTextField: CustomTextField!
    
    @IBOutlet weak var fuelDeliveryRadio: RadioGroup!
    @IBOutlet weak var fuelDeliveryDamageTextField: CustomTextField!
    
    @IBOutlet weak var isPedelStartCheckBox: CheckBoxUIButton!
    @IBOutlet weak var pedelStartDamageTextField: CustomTextField!
    
    @IBOutlet weak var isPlateCheckBox: CheckBoxUIButton!
    @IBOutlet weak var plateDamageTextField: CustomTextField!
    
    
    
    /// keys
    @IBOutlet weak var keyCheckBox: CheckBoxUIButton!
    @IBOutlet weak var remoteKeyCheckBox: CheckBoxUIButton!
    @IBOutlet weak var remoteCheckBox: CheckBoxUIButton!
    @IBOutlet weak var immobilizarKeyCheckBox: CheckBoxUIButton!
    
    
    @IBOutlet weak var frontTreadDepth: CustomTextField!
    @IBOutlet weak var rearTreadDepth: CustomTextField!
    
    /// engine condition
    @IBOutlet weak var isServiceable: CheckBoxUIButton!
    @IBOutlet weak var isWillNotStart: CheckBoxUIButton!
    @IBOutlet weak var isRequireAttention: CheckBoxUIButton!
    @IBOutlet weak var isMissing: CheckBoxUIButton!
    
    var isGetProvinceLunch = false
    
    
    // local strings
    
    @IBOutlet weak var registrationNumberLabel: UILabel!
    @IBOutlet weak var fuelSystemLabel: UILabel!
    @IBOutlet weak var batteryLabel: UILabel!
    @IBOutlet weak var cdiLabel: UILabel!
    @IBOutlet weak var electricLabel: UILabel!
    @IBOutlet weak var startPedalLabel: UILabel!
    @IBOutlet weak var odometerLabel: UILabel!
    @IBOutlet weak var plateLabel: UILabel!
    @IBOutlet weak var tyreLabel: UILabel!
    @IBOutlet weak var tyreFlabel: UILabel!
    @IBOutlet weak var tyreRLabel: UILabel!
    @IBOutlet weak var underTyreLabel: UILabel!
    @IBOutlet weak var keyLabel: UILabel!
    @IBOutlet weak var key1Label: UILabel!
    @IBOutlet weak var key2Label: UILabel!
    @IBOutlet weak var key3Label: UILabel!
    @IBOutlet weak var key4Label: UILabel!
    @IBOutlet weak var engineTypeLabel: UILabel!
    @IBOutlet weak var engineType1Label: UILabel!
    @IBOutlet weak var engineType2Label: UILabel!
    @IBOutlet weak var engineType3Label: UILabel!
    @IBOutlet weak var engineType4Label: UILabel!
    @IBOutlet weak var summaryLabel: UILabel!
    
    let strings_motorbike_inspection_exterior_injector_carburetor = [String.localized("car_engine_injector_label"), String.localized("car_engine_carburetor_label")]

    override func initLocalString() {
        super.initLocalString()
        
        let headPlaceholder = String.localized("motorbike_inspection_exterior_head_placeholder_label")
        registrationNumberLabel.text = String.localized("inspection_body_registration_number_label")
        provinceTextField.placeholder = String.localized("car_detail_province_label")
        fuelSystemLabel.text = String.localized("car_engine_fuel_system_label")
        fuelDeliveryDamageTextField.placeholder = headPlaceholder + String.localized("car_engine_fuel_system_label")
        batteryLabel.text = String.localized("motorbike_inspection_exterior_battery_label")
        batteryDamageTextField.placeholder = headPlaceholder + String.localized("motorbike_inspection_exterior_battery_label")
        cdiLabel.text = String.localized("motorbike_inspection_exterior_cdi_label")
        cdiDamageTextField.placeholder = headPlaceholder + String.localized("motorbike_inspection_exterior_cdi_label")
        electricLabel.text = String.localized("motorbike_inspection_exterior_electric_label")
        electricStartDamageTextField.placeholder = headPlaceholder + String.localized("motorbike_inspection_exterior_electric_label")
        startPedalLabel.text = String.localized("motorbike_inspection_exterior_pedal_label")
        pedelStartDamageTextField.placeholder = headPlaceholder + String.localized("motorbike_inspection_exterior_pedal_label")
        odometerLabel.text = String.localized("motorbike_inspection_exterior_odometer_label")
        odometerDamageTextField.placeholder = headPlaceholder + String.localized("motorbike_inspection_exterior_odometer_label")
        plateLabel.text = String.localized("motorbike_inspection_exterior_plate_label")
        plateDamageTextField.placeholder = headPlaceholder + String.localized("motorbike_inspection_exterior_plate_label")
        tyreLabel.text = String.localized("motorbike_inspection_exterior_tyre_label")
        tyreFlabel.text = String.localized("motorbike_inspection_exterior_tyre_f_label")
        tyreRLabel.text = String.localized("motorbike_inspection_exterior_tyre_r_label")
        underTyreLabel.text = String.localized("motorbike_inspection_exterior_under_tyre_label")
        keyLabel.text = String.localized("car_interior_key_label")
        key1Label.text = String.localized("car_interior_key_label")
        key2Label.text = String.localized("car_interior_remote_control_label")
        key3Label.text = String.localized("car_interior_remote_key_label")
        key4Label.text = String.localized("car_interior_key_immobilizer_label")
        engineTypeLabel.text = String.localized("motorbike_inspection_exterior_engine_type_label")
        engineType1Label.text = String.localized("motorbike_inspection_exterior_serviced_label")
        engineType2Label.text = String.localized("motorbike_inspection_exterior_not_working_label")
        engineType3Label.text = String.localized("motorbike_inspection_exterior_need_repair_label")
        engineType4Label.text = String.localized("motorbike_inspection_exterior_missing_label")
        summaryLabel.text = String.localized("motorbike_inspection_exterior_damage_summary_label")
        exteriorDamageTextView.placeholder = String.localized("inspection_body_summary_label")
    }
    
    func doSomething()
    {
        let request = MotorcycleCheck.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: MotorcycleCheck.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func setRadio(){
        let attributedString = [NSAttributedString.Key.foregroundColor : UIColor.appPrimaryColor]
        
        fuelDeliveryRadio.attributedTitles = [
            NSAttributedString(string: strings_motorbike_inspection_exterior_injector_carburetor[0], attributes: attributedString),
            NSAttributedString(string: strings_motorbike_inspection_exterior_injector_carburetor[1], attributes: attributedString),
            NSAttributedString(string: "N/A", attributes: attributedString)
        ]
    }
    
    //MARK: fuel delivery
    @IBAction func fuelDeliveryValueChanged(_ sender: Any) {
        var fuelDeliveryTuple : (String,String)  = ("","")
        switch fuelDeliveryRadio.selectedIndex {
        case 0:
            fuelDeliveryTuple = ("I",strings_motorbike_inspection_exterior_injector_carburetor[0])
        case 1:
            fuelDeliveryTuple = ("N",strings_motorbike_inspection_exterior_injector_carburetor[1])
        case 2:
            fuelDeliveryTuple = ("1","N/A")
        default:
            fuelDeliveryTuple = ("1","N/A")
        }
        print("🔸 fuelDelivery: \(fuelDeliveryTuple.0) , value: \(fuelDeliveryTuple.1)")
        DataController.shared.inspectionCarModel.fuelDeliveryType = fuelDeliveryTuple.1
        
    }
    
    //MARK: UIView
    func setUIView(){
        exteriorDamageTextView.autocorrectionType = .no
        exteriorDamageTextView.delegate = self
        
        provinceTextField.autocorrectionType = .no
        
        
        registrationTextField.autocorrectionType = .no
        registrationTextField.delegate = self
        
        frontTreadDepth.autocorrectionType = .no
        rearTreadDepth.autocorrectionType = .no
        
        frontTreadDepth.delegate = self
        rearTreadDepth.delegate = self
        
        
        batteryDamageTextField.autocorrectionType = .no
        cdiDamageTextField.autocorrectionType = .no
        electricStartDamageTextField.autocorrectionType = .no
        odometerDamageTextField.autocorrectionType = .no
        fuelDeliveryDamageTextField.autocorrectionType = .no
        pedelStartDamageTextField.autocorrectionType = .no
        plateDamageTextField.autocorrectionType = .no
        
        
        batteryDamageTextField.delegate = self
        cdiDamageTextField.delegate = self
        electricStartDamageTextField.delegate = self
        odometerDamageTextField.delegate = self
        fuelDeliveryDamageTextField.delegate = self
        pedelStartDamageTextField.delegate = self
        plateDamageTextField.delegate = self
        
        
        
        addTarget(from: batteryDamageTextField)
        addTarget(from: cdiDamageTextField)
        addTarget(from: electricStartDamageTextField)
        addTarget(from: odometerDamageTextField)
        addTarget(from: fuelDeliveryDamageTextField)
        addTarget(from: pedelStartDamageTextField)
        addTarget(from: plateDamageTextField)
        
        addTarget(from: provinceTextField)
        addTarget(from: registrationTextField)
        
        addTarget(from: frontTreadDepth)
        addTarget(from: rearTreadDepth)
        
    }
    
    fileprivate func addTarget(from textfield: UITextField ){
        textfield.addTarget(self, action: #selector(textFieldDidChange(_:)),for: .editingChanged)
    }
    
    //MARK: CHECKBOX
    @IBAction func batteryCheck(_ sender:Any){
        isBatteryCheckBox.toggle(callback: {  [weak self]  check in
            self?.isBatteryCheckBox.check = check
            DataController.shared.inspectionCarModel.isBattery = check
            
            
        })
    }
    @IBAction func cdiCheck(_ sender:Any){
        isCDICheckBox.toggle(callback: {  [weak self]  check in
            self?.isCDICheckBox.check = check
            DataController.shared.inspectionCarModel.isCDI = check
            
            
        })
    }
    @IBAction func electricStartCheck(_ sender:Any){
        isElectricStartCheckBox.toggle(callback: {  [weak self]  check in
            self?.isElectricStartCheckBox.check = check
            DataController.shared.inspectionCarModel.isElectricStart = check
            
            
        })
    }
    @IBAction func odometerCheck(_ sender:Any){
        isOdometerCheckBox.toggle(callback: {  [weak self]  check in
            self?.isOdometerCheckBox.check = check
            DataController.shared.inspectionCarModel.isOdometer = check
            
        })
    }
    
    @IBAction func pedelStartCheck(_ sender:Any){
        isPedelStartCheckBox.toggle(callback: {  [weak self]  check in
            self?.isPedelStartCheckBox.check = check
            DataController.shared.inspectionCarModel.isPedelStart = check
            
        })
    }
    @IBAction func plateCheck(_ sender:Any){
        isPlateCheckBox.toggle(callback: {  [weak self]  check in
            self?.isPlateCheckBox.check = check
            DataController.shared.inspectionCarModel.isPlate = check
            
        })
    }
    //MARK: Checkbox Keys
    @IBAction func keyTapped(_ sender: Any) {
        keyCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.isKey = check
        }
    }
    
    @IBAction func remoteKeyTapped(_ sender: Any) {
        remoteKeyCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.isRemoteKey = check
        }
    }
    
    
    @IBAction func remoteTapped(_ sender: Any) {
        remoteCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.isRemote = check
        }
    }
    @IBAction func immobilizerKeyTapped(_ sender: Any) {
        immobilizarKeyCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.isImmobilizarKey = check
        }
    }
    //MARK: CheckBox Engine
    @IBAction func serviceableTapped(_ sender: Any) {
        isServiceable.toggle { check in
            //"serviceable for age เช็คสภาพตามอายุการใช้งาน"
            DataController.shared.inspectionCarModel.isServiceable = check
        }
    }
    @IBAction func willNotStartTapped(_ sender: Any) {
        isWillNotStart.toggle { check in
            //"will not start สตาร์ทไม่ติด"
            DataController.shared.inspectionCarModel.isWillNotStart = check
        }
    }
    @IBAction func requireAttentionTapped(_ sender: Any) {
        isRequireAttention.toggle { check in
            //"requires attention ต้องทำการซ่อมแซม"
            DataController.shared.inspectionCarModel.isRequireAttention = check
        }
    }
    @IBAction func missingTapped(_ sender: Any) {
        isMissing.toggle { check in
            //"missing สูญหาย"
            DataController.shared.inspectionCarModel.isMissing = check
        }
    }
    
    
    //MARK: Province
    func getProvince(){
        let request = MotorcycleCheck.Something.Request()
        interactor?.getProvince(request: request)
    }
    func displayShowProvinceError(viewModel: MotorcycleCheck.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.getProvince()
        }
    }
    func displayProvinceDropdown(viewModel: MotorcycleCheck.Something.ViewModel) {
        
        guard let values = viewModel.provinceList else { return }
        isGetProvinceLunch = true
        
        setValue(to: provinceTextField, values: values) { [weak self] (selectValue, _, _) in
            
            self?.provinceTextField.text = selectValue
            
            print("🔸 Province : \(selectValue)")
            DataController.shared.inspectionCarModel.registrationProvince = selectValue
        }
    }
    
    
    func prepareData(){
        let model = DataController.shared.inspectionCarModel
        
        /// Mapping Data Book-In
        if let province = model.registrationProvince ,
           let registration = model.registration {
            
            registrationTextField.text = registration
            provinceTextField.text = province
        }else{
            let provinceBookIn = DataController.shared.receiverCarModel.province
            let registrationBookIn = DataController.shared.receiverCarModel.registration
            
            registrationTextField.text = registrationBookIn
            provinceTextField.text = provinceBookIn
            
            
            model.registrationProvince = provinceBookIn
            model.registration = registrationBookIn
        }
        
        ///Mapping isPlate
        if let isPlate = model.isPlate {
            isPlateCheckBox.check = isPlate
        }else{
            let isPlate = DataController.shared.receiverCarModel.isRegistrationPlate ?? false
            isPlateCheckBox.check = isPlate
            model.isPlate = isPlate
        }
        
        ///Mapping isPedelStart
        if let isPedelStart = model.isPedelStart {
            isPedelStartCheckBox.check = isPedelStart
        }else{
            let isKickStart = DataController.shared.receiverCarModel.isKickStart ?? false
            isPedelStartCheckBox.check = isKickStart
            model.isPedelStart = isKickStart
        }
        
        ///Mapping isElectricStart
        if let isElectricStart = model.isElectricStart {
            isElectricStartCheckBox.check = isElectricStart
        }else{
            let isHandStart = DataController.shared.receiverCarModel.isHandStart ?? false
            isElectricStartCheckBox.check = isHandStart
            model.isElectricStart = isHandStart
        }
        
        ///Mapping exteriorDamage
        if let exteriorDamage = model.exteriorDamage {
            exteriorDamageTextView.text = exteriorDamage
        }else{
            let otherNote = DataController.shared.receiverCarModel.otherNote ?? ""
            exteriorDamageTextView.text = otherNote
            model.exteriorDamage = otherNote
        }
        
        
        
        
        
        
        //MARK: MotorBike
        
        batteryDamageTextField.text = model.batteryDamage
        cdiDamageTextField.text = model.cdiDamage
        electricStartDamageTextField.text = model.electricStartDamage
        odometerDamageTextField.text = model.odometerDamage
        fuelDeliveryDamageTextField.text = model.fuelDeliveryDamage
        pedelStartDamageTextField.text = model.pedelStartDamage
        plateDamageTextField.text = model.plateDamage
        frontTreadDepth.text = model.frontTreadDepth
        rearTreadDepth.text = model.rearTreadDepth
        
        isBatteryCheckBox.check = model.isBattery ?? false
        isCDICheckBox.check = model.isCDI ?? false
        
        isOdometerCheckBox.check = model.isOdometer ?? false
        
        
        fuelDeliveryRadio.selectedIndex = getRadioIndexByValue(from : [strings_motorbike_inspection_exterior_injector_carburetor[0], strings_motorbike_inspection_exterior_injector_carburetor[1], "N/A"], value: model.fuelDeliveryType)
        
        
        keyCheckBox.check = model.isKey ?? false
        remoteKeyCheckBox.check = model.isRemoteKey ?? false
        remoteCheckBox.check = model.isRemote ?? false
        immobilizarKeyCheckBox.check = model.isImmobilizarKey ?? false
        
        
        isServiceable.check = model.isServiceable ?? false
        isWillNotStart.check = model.isWillNotStart ?? false
        isRequireAttention.check = model.isRequireAttention ?? false
        isMissing.check = model.isMissing ?? false
        
    }
    
    func setValue(to textfield:DropDown , values: [String], didSelected:@escaping (_ selectedText: String, _ index: Int , _ id:Int )->() ){
        textfield.optionArray = values
        textfield.didSelect(completion: didSelected)
    }
    
    
    func displayFrontTreadDepthValidNumber(viewModel: MotorcycleCheck.Something.ViewModel) {
        let text = viewModel.frontTreadDepthValidNumber
        frontTreadDepth.text = text
        DataController.shared.inspectionCarModel.frontTreadDepth = text
    }
    func displayRearTreadDepthValidNumber(viewModel: MotorcycleCheck.Something.ViewModel) {
        let text = viewModel.rearTreadDepthValidNumber
        rearTreadDepth.text = text
        DataController.shared.inspectionCarModel.rearTreadDepth = text
    }
    
}


//MARK: TextView Delegate
extension MotorcycleCheckViewController : UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        print("exteriorDamage: \(textView.text ?? "")")
        DataController.shared.inspectionCarModel.exteriorDamage = textView.text
    }
}

extension MotorcycleCheckViewController : UITextFieldDelegate {
    @objc func textFieldDidChange(_ textField: UITextField) {
        
        switch textField {
            
        case provinceTextField:
            DataController.shared.inspectionCarModel.registrationProvince = textField.text
            
        case registrationTextField:
            DataController.shared.inspectionCarModel.registration = textField.text
            
        case batteryDamageTextField:
            DataController.shared.inspectionCarModel.batteryDamage = textField.text
            
        case cdiDamageTextField:
            DataController.shared.inspectionCarModel.cdiDamage = textField.text
            
        case electricStartDamageTextField:
            DataController.shared.inspectionCarModel.electricStartDamage = textField.text
            
        case odometerDamageTextField:
            DataController.shared.inspectionCarModel.odometerDamage = textField.text
            
        case fuelDeliveryDamageTextField:
            DataController.shared.inspectionCarModel.fuelDeliveryDamage = textField.text
            
        case pedelStartDamageTextField:
            DataController.shared.inspectionCarModel.pedelStartDamage = textField.text
            
        case plateDamageTextField:
            DataController.shared.inspectionCarModel.plateDamage = textField.text
            
            
        case frontTreadDepth:
            let request = MotorcycleCheck.Something.Request(decimalNumber: textField.text)
            interactor?.validationFrontTreadDepthDecimal(request: request)
            
        case rearTreadDepth:
            let request = MotorcycleCheck.Something.Request(decimalNumber: textField.text)
            interactor?.validationRearTreadDepthDecimal(request: request)
            
        default:
            break
        }
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        
        return true
    }
}


extension MotorcycleCheckViewController {
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        scrollView.registKeyboardNotification()
        
        prepareData()
        
        if !isGetProvinceLunch {
            getProvince()
        }
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        scrollView.resignKeyboardNotification()
    }
}
