//
//  ItemPendingListInteractor.swift
//  Inspection
//
//  Created by Thanawat prathumset on 3/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemPendingListBusinessLogic
{
  func fetchPendingList(request: ItemPendingList.Fetch.Request)
    func didSelectRow(request: ItemPendingList.Fetch.Request)
    

    
    func fetchBookinDetail(request: ItemPendingList.Fetch.Request, type: Selection)
    func itemSelection(request: ItemPendingList.Fetch.Request)
}

protocol ItemPendingListDataStore
{
  //var name: String { get set }
    var modelBookinList : BookInListResponse? { get set }
    var documentData : Data? { get set }
    var pdfName : String? { get set }
}

class ItemPendingListInteractor: ItemPendingListBusinessLogic, ItemPendingListDataStore
{
  var presenter: ItemPendingListPresentationLogic?
    var worker: ItemAllListWorker?
    var workerPending: ItemPendingListWorker?
  //var name: String = ""
    
    var modelBookinList : BookInListResponse?
    var workerPickup : PickUpCarPDFWorker?
    var workerSummary : SummaryCarPDFWorker?
    var workerqrcode : IMatQRCodePDFWorker?
    
    var documentData : Data?
    
    var selectionType: Selection?
    var pdfName: String?
    
  // MARK: Do something
  
  func fetchPendingList(request: ItemPendingList.Fetch.Request)
  {
    /// fetch pending list
    let user = DataController.shared.getUser()
    
    workerPending = ItemPendingListWorker()
    workerPending?.pendingList(email: user, completion: { [weak self] (response) in
        self?.presenter?.presentFetchResult(response: response)
    })
    
  }
    
    
    func didSelectRow(request: ItemPendingList.Fetch.Request) {
        self.modelBookinList = request.didSelectItem
        
        let response = ItemPendingList.Fetch.Response()
        presenter?.presentItemSelected(response: response)
    }
    
    func fetchBookinDetail(request: ItemPendingList.Fetch.Request, type: Selection) {
        selectionType = type
     

        let bookInNumber = self.modelBookinList?.bookInNumber?.trimWhiteSpace

        worker = ItemAllListWorker()
        worker?.getBookIN(from: bookInNumber,  completion: { [weak self] (response) in
            let pendingResponse = ItemPendingList.Fetch.Response()
            self?.presenter?.presentBookInDetail(response: pendingResponse)
        })
       
    }
    var photoWorker : PhotoCarWorker?
    var motorbikeWorker: MotorBikePDFWorker?
    //MARK: Generate PDF
    func itemSelection(request: ItemPendingList.Fetch.Request) {
        switch selectionType {
        
        case .BOOKIN:
            
            let model = DataController.shared.receiverCarModel
            
            switch DataController.shared.bookInType {
                   
            case .CAR, .CARWRECK:
                workerPickup = PickUpCarPDFWorker()
                workerPickup?.generatePDFForReceiver(receiverCarModel: model, completion: { [weak self] (response) in
                    self?.documentData = response.documentData
                    self?.pdfName = createPDFName("BookIn")
                    let response = ItemPendingList.Fetch.Response()
                    self?.presenter?.presentPDFViewer(response: response)
                })
            case .MBIKE, .MBIKEWRECK:
                print("ðŸ›µPDF MOTORBIKE BOOKIN")
                motorbikeWorker = MotorBikePDFWorker()
                motorbikeWorker?.generateMotorBikePDFForBookIn(model: model, completion: { [weak self] response in
                    
                    self?.documentData = response.documentData
                    self?.pdfName = createPDFName("MotorBikeBookIn")
                    let response = ItemPendingList.Fetch.Response()
                    self?.presenter?.presentPDFViewer(response: response)
                })
            }
            
            break
            
        case .INSPECTION:
            
            let bookinNo = DataController.shared.receiverCarModel.bookinNo?.trimWhiteSpace
            photoWorker = PhotoCarWorker()
            photoWorker?.fetchInspectionImageList(from: bookinNo, completion: {[weak self] photoResponse in
            
                self?.createPDF({[weak self] pdfResponse in
                    self?.documentData = pdfResponse.documentData
                    self?.pdfName = createPDFName("Inspection")
                    let response = ItemPendingList.Fetch.Response()
                    self?.presenter?.presentPDFViewer(response: response)
                })
            })
       
            break
        case .IMAT_QRCODE:
            workerqrcode = IMatQRCodePDFWorker()
            let model = DataController.shared.receiverCarModel
            workerqrcode?.generateIMATQRCodePDF(receiverCarModel: model, completion: { [weak self] (response) in
                self?.documentData = response.documentData
                self?.pdfName = createPDFName("IMATQR")
                let response = ItemPendingList.Fetch.Response()
                self?.presenter?.presentPDFViewer(response: response)
            })
            break
            
        case .DETAIL:
            
            DataController.shared.isFromEditView = true
            
            let response = ItemPendingList.Fetch.Response()
            presenter?.presentDetail(response: response)
            break
        case .none:
            break
        }
    }

    var mbInspecWorkerPDF : MotorbikeInspecPDFWorker?
    
    func createPDF(_ pdfResponse:@escaping (SummaryCar.Something.Response)->()){
        let model = DataController.shared.inspectionCarModel
        let inspector = model.inspector

        switch DataController.shared.bookInType {
        
        case .CAR, .CARWRECK:
            workerSummary = SummaryCarPDFWorker()
            workerSummary?.generatePDFForInspection(model: model, inspector: inspector,  completion: {(response) in
                
                pdfResponse(response)
            })
        case .MBIKE, .MBIKEWRECK:
            print("ðŸ›µ CREATE PDF MOTORBIKE INSPECTION")
            mbInspecWorkerPDF = MotorbikeInspecPDFWorker()
            mbInspecWorkerPDF?.generateMBPDFForInspection(model: model, inspector: inspector,  completion: {(response) in
                
                pdfResponse(response)
            })
        
        }
    }
}
