//
//  RepoCarInteractor.swift
//  Inspection
//
//  Created by Thanawat prathumset on 4/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RepoCarBusinessLogic
{
    func doSomething(request: RepoCar.Something.Request)
    func fetchDeliveryList(request: RepoCar.Something.Request)
    func setReceiverDateTimeInspection(request: RepoCar.Something.Request)
    func setDataDateTimeInspection(request: RepoCar.Something.Request)
    func setWarehouseDateTimeInspection(request: RepoCar.Something.Request)
    func confirmSendToRepo(request: RepoCar.Something.Request)
    func fillOldBuyer(request: RepoCar.Something.Request)
    func selectDelivery(request: RepoCar.Something.Request)
    func fillDelivery(request: RepoCar.Something.Request)

}

protocol RepoCarDataStore
{
    var currentDate: Date? { get set }
    var itemList : [DeliveryPersonModel] { get set }
}

class RepoCarInteractor: RepoCarBusinessLogic, RepoCarDataStore
{
    
    var itemList: [DeliveryPersonModel] = []
    var presenter: RepoCarPresentationLogic?
    var worker: RepoCarWorker?
    var currentDate: Date?
    
    var dataDate:String?
    var warehouseDate:String?
    var oldBuyer:String?
    var deliveryPerson:String?
    var deliveryInputText:String?


    deinit {
        print("🔸🐶 deinit repocar RepoCarInteractor")
    }
    
    func doSomething(request: RepoCar.Something.Request)
    {
        let response = RepoCar.Something.Response()
        presenter?.presentSomething(response: response)
    }
    
    //MARK: Fetch Delivery List
    func fetchDeliveryList(request: RepoCar.Something.Request) {
        worker = RepoCarWorker()
        worker?.fetchDeliveryPersonList(completion: {[weak self] (response) in
            guard let weakself = self else { return }
            if let _ = response.error {
                weakself.presenter?.presentSomething(response: response)
            }else{
                weakself.presenter?.presentDeliveryPersonList(response: response)
            }
        })
    }
    
    func confirmSendToRepo(request: RepoCar.Something.Request) {
        worker = RepoCarWorker()
        worker?.sendRepo(completion: {[weak self] (response) in
            guard let weakself = self else { return }
            if let _ = response.error {
                weakself.presenter?.presentSomething(response: response)
            }else{
                weakself.presenter?.presentSendToRepo(response: response)
            }
        })
    }
    
    func setReceiverDateTimeInspection(request: RepoCar.Something.Request) {
        let date = request.dateInspection ?? Date()
        currentDate = date

        let day = DateFormatter().dateFormat(from: date, dateFormat: "dd-MM-yyyy")
        let time = DateFormatter().dateFormat(from: date, dateFormat: "HH:mm")
       
        DataController.shared.inspectionCarModel.date = date
        DataController.shared.inspectionCarModel.dayString = day
        DataController.shared.inspectionCarModel.timeString = time
        
        let dateTuple = (day , time)
        let response = RepoCar.Something.Response(dayTime: dateTuple)
        presenter?.presentReceiverDayTimeInspection(response: response)
    }
    
    func setDataDateTimeInspection(request: RepoCar.Something.Request) {
        let response = dateResponse(request: request)
        presenter?.presentDataDateTimeInspection(response: response)
        self.dataDate = response.dayTime?.day
        DataController.shared.repoCarModel.dataDate = response.dayTime?.day
    }
    
    func setWarehouseDateTimeInspection(request: RepoCar.Something.Request) {
        let response = dateResponse(request: request)
        presenter?.presentWarehouseTimeInspection(response: response)
        self.warehouseDate = response.dayTime?.day
        DataController.shared.repoCarModel.warehouseName = response.dayTime?.day
    }
    
    func dateResponse(request: RepoCar.Something.Request) -> RepoCar.Something.Response {
        let date = request.dateInspection ?? Date()
        let day = DateFormatter().dateFormat(from: date, dateFormat: "dd-MM-yyyy")
        let time = DateFormatter().dateFormat(from: date, dateFormat: "HH:mm")
        let dateTuple = (day , time)
        let response = RepoCar.Something.Response(dayTime: dateTuple)
        return response
    }
    
    func fillOldBuyer(request: RepoCar.Something.Request){
        self.oldBuyer = request.oldBuyer
        DataController.shared.repoCarModel.oldBuyer = request.oldBuyer
    }
    
    func fillDelivery(request: RepoCar.Something.Request){
        self.deliveryInputText = request.deliveryInputText
        DataController.shared.repoCarModel.deliveryInputText = request.deliveryInputText
    }
    
    func selectDelivery(request: RepoCar.Something.Request) {
        self.deliveryPerson = request.deliveryPerson
        DataController.shared.repoCarModel.deliveryPerson = request.deliveryPerson
    }
}

//MARK: extension
extension RepoCarInteractor {
}
