//
//  DetailViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 3/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Selection{
    case BOOKIN
    case INSPECTION
    case DETAIL
    case IMAT_QRCODE
}
protocol DetailDisplayLogic: AnyObject
{
    func displayDetail(viewModel: Detail.Model.ViewModel)
    var callbackSelectOption: ((Selection)->Void)? { get set }
}

class DetailViewController: ViewController, DetailDisplayLogic
{
    var interactor: DetailBusinessLogic?
    var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
    var callbackSelectOption: ((Selection)->Void)?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DetailInteractor()
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        setUIView()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var carRegistrationLabel: UILabel!
    @IBOutlet weak var detailLabel: UILabel!
    
    
    @IBOutlet weak var chassisNumberLabel: UILabel!
    @IBOutlet weak var vinLabel: UILabel!
    
    @IBOutlet weak var closeImageView: UIImageView!
    
    @IBOutlet weak var editButton: CustomUIButton!
    
    // local strings
    @IBOutlet weak var vinKeyLabel: UILabel!
    @IBOutlet weak var engineKeyLabel: UILabel!

    override func initLocalString() {
        super.initLocalString()
        
        vinKeyLabel.text = String.localized("inspection_list_vin_number_label")
        engineKeyLabel.text = String.localized("car_detail_engine_number_label")
        editButton.setTitle(String.localized("mode_code_edit_label"), for: .normal)
    }
    
    func doSomething()
    {
        let request = Detail.Model.Request()
        interactor?.showDetail(request: request)
    }
    
    
    func setUIView(){
        closeImageView.isUserInteractionEnabled = true
        closeImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(dismissView)))
    }
    
    @objc func dismissView(){
        dismiss(animated: true, completion: nil)
    }
    
    func displayDetail(viewModel: Detail.Model.ViewModel)
    {
        detailLabel.text = viewModel.detail
        carRegistrationLabel.text = viewModel.registration
        vinLabel.text = viewModel.vin
        chassisNumberLabel.text = viewModel.chassisNumber
    }
    @IBAction func editTapped(_ sender: Any) {
        dismiss(animated: true) { [weak self] in
            self?.callbackSelectOption?(.DETAIL)
        }
    }
    @IBAction func bookinTapped(_ sender: Any) {
        dismiss(animated: true) { [weak self] in
            self?.callbackSelectOption?(.BOOKIN)
        }
        
    }
    @IBAction func inspecTapped(_ sender: Any) {
        dismiss(animated: true) { [weak self] in
            self?.callbackSelectOption?(.INSPECTION)
        }
    }
    @IBAction func imatQRcodeTapped(_ sender: Any) {
        dismiss(animated: true) { [weak self] in
            self?.callbackSelectOption?(.IMAT_QRCODE)
        }
    }
}
