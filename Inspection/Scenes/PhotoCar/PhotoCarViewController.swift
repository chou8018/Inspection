//
//  PhotoCarViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 4/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PhotoCarDisplayLogic: AnyObject
{
  func displaySomething(viewModel: PhotoCar.Something.ViewModel)
    func displayReceiverDayTimeInspection(viewModel: PhotoCar.Something.ViewModel)
    func displayCollectionImageBySection(viewModel: PhotoCar.Something.ViewModel)
    func displayUploadProgress(viewModel: PhotoCar.Something.ViewModel)
    func displayAlertMessage(viewModel: PhotoCar.Something.ViewModel)
    
    func displayErrorFetchList(viewModel: PhotoCar.Something.ViewModel)
    
    func displayErrorDelete(viewModel: PhotoCar.Something.ViewModel)
    
    func displayUpdateRequiredButton(viewModel: PhotoCar.Something.ViewModel)
    func displayUpdateCheckBox(viewModel: PhotoCar.Something.ViewModel)
    
    func displaySendInsectionIMATSuccess(viewModel: PhotoCar.Something.ViewModel)
    func displaySendInsectionIMATError(viewModel: PhotoCar.Something.ViewModel)
    
    func displayShowImageView(viewModel: PhotoCar.Something.ViewModel)
    
    func displayActionEventSuccess(viewModel: PhotoCar.Something.ViewModel)
}

class PhotoCarViewController: UIViewController, PhotoCarDisplayLogic
{
  var interactor: PhotoCarBusinessLogic?
  var router: (NSObjectProtocol & PhotoCarRoutingLogic & PhotoCarDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = PhotoCarInteractor()
    let presenter = PhotoCarPresenter()
    let router = PhotoCarRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
        
        if let dateTimePicker = segue.destination as? DateTimeViewController {
            dateTimePicker.didSelectedDateTimePicker = { [weak self] (dateInspection) in
                
                let request = PhotoCar.Something.Request(dateInspection: dateInspection)
                self?.interactor?.setReceiverDateTimeInspection(request: request)
            }
        }
//        if let damageVc = segue.destination as? DamageViewController {
//            damageVc.callbackDamageImage = { [weak self] (damageImageModel) in
//                print("üî∏üê∂ \(damageImageModel)")
//
//                let image = damageImageModel.image
//                let url = URL(string: "https://inspecfakeurl.com/image/\(Date().DateToServerFormatString()).jpeg")
//
//                let request = PhotoCar.Something.Request(image: image,
//                                                         url: url,
//                                                         damageModel: damageImageModel)
//                self?.interactor?.addPhoto(request: request)
//            }
//        }
    }
  }
  
  // MARK: View lifecycle
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setTitleName()
    setImagePicker()
    setUpTab()
    setUpDateTime()
    setUpCollectionView()
    setUpCheckButton()
    doSomething()
  }
  
  // MARK: Do something
    @IBOutlet weak var fullName:UILabel!
    @IBOutlet weak var pickUpStackView: UIView!
    @IBOutlet weak var checkStackView: UIView!
    @IBOutlet weak var photoStackView: UIView!
  
  
    @IBOutlet weak var saveButton: UIBarButtonItem!
    @IBOutlet weak var sendInspectionButton: UIBarButtonItem!
    
    @IBOutlet weak var dateTimeView: UIView!
    @IBOutlet weak var dateLabel: UILabel!
    @IBOutlet weak var timeLabel: UILabel!
    

    @IBOutlet weak var frontCheckBox: CheckBoxUIButton!
    @IBOutlet weak var engineCheckBox: CheckBoxUIButton!
    @IBOutlet weak var plateCheckBox: CheckBoxUIButton!
    @IBOutlet weak var chassisCheckBox: CheckBoxUIButton!
    @IBOutlet weak var interiorCheckBox: CheckBoxUIButton!
    @IBOutlet weak var trayCheckBox: CheckBoxUIButton!
    @IBOutlet weak var sideCheckBox: CheckBoxUIButton!
    @IBOutlet weak var backCheckBox: CheckBoxUIButton!
    @IBOutlet weak var gasTankCheckBox: CheckBoxUIButton!
    @IBOutlet weak var damageCheckBox: CheckBoxUIButton!
    @IBOutlet weak var assetCheckBox: CheckBoxUIButton!
    @IBOutlet weak var amountLabel: UILabel!
    @IBOutlet weak var addPhotoView: CustomUIView!
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    @IBOutlet weak var skipCheckBox:CheckBoxUIButton!
    
    var dataSource = DataSourceCollectionView()
    var imagePicker: ImagePicker!
    
    
    var sourceSectionName : [(name:String, cb: CheckBoxUIButton)] = []
    
    
    
  func doSomething()
  {
    let request = PhotoCar.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: PhotoCar.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    
    //MARK: DateTime
    func setUpDateTime(){
        dateTimeView.isUserInteractionEnabled = true
        dateTimeView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showDateTime)))
    }

    func displayReceiverDayTimeInspection(viewModel: PhotoCar.Something.ViewModel) {
        guard let dayTime = viewModel.dayTime else { return }
        self.dateLabel.text = dayTime.day
        self.timeLabel.text = dayTime.time
    }
    
    @objc func showDateTime(){
        performSegue(withIdentifier: "showDateTime", sender: nil)
    }
  
    //MARK: IBAction
    @IBAction func toBackView(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    @IBAction func toRootView(_ sender: Any) {
        popToRootViewController(confirm: true)
    }
    @IBAction func saveTapped(_ sender: Any) {
        alert(message: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡πÑ‡∏´‡∏°") { [weak self] in
            let request = PhotoCar.Something.Request()
            self?.interactor?.confirmPhotoInspection(request: request)
        }
    }
    
    @IBAction func saveToIMAT(_ sender: Any){
        print("üî∂ save to IMAT")
        alert(message: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á\nInspection to IMAT ‡πÑ‡∏´‡∏°") { [weak self] in
            self?.sendToIMAT()
        }
    }
   
    //MARK: send to IMAT
    func sendToIMAT(){
        let request = PhotoCar.Something.Request()
        interactor?.confirmSendToInspectionIMAT(request: request)
    }
    
    func displaySendInsectionIMATError(viewModel: PhotoCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.sendToIMAT()
        }
    }
    
    func displaySendInsectionIMATSuccess(viewModel: PhotoCar.Something.ViewModel) {
        print("üî∂ photo displaySendInsectionIMATSuccess")
        //self.updateVehicleId()
        alertErrorMessageOKAction(message: "Inspection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à") {
            //ignored
        }
    }
    
    func displayShowImageView(viewModel: PhotoCar.Something.ViewModel) {
       
        //
        //
        //   show imageviewer
        //
        //
        performSegue(withIdentifier: "ImageViewerSegue", sender: nil)
    }
    
    func validateInspectionIMAT(){
        let request = PhotoCar.Something.Request()
        interactor?.validateActionSendToInspectionIMAT(request: request)
    }
    
    
    func displayActionEventSuccess(viewModel: PhotoCar.Something.ViewModel) {
        sendInspectionButton.isEnabled = viewModel.isEnableSendToIMAP ?? false

    }
    
    
    func displayUploadProgress(viewModel: PhotoCar.Something.ViewModel) {
        performSegue(withIdentifier: "UploadProgress", sender: nil)
    }
    
    func displayAlertMessage(viewModel: PhotoCar.Something.ViewModel) {
        guard let message = viewModel.alertPhotoMessage else { return }
        alertErrorMessageOKAction(message: message) {
            // ignored
        }
    }
    
    //MARK: Image Oicker
    func setImagePicker(){
        imagePicker = ImagePicker(presentationController: self)
        imagePicker.delegateImage = self

        addPhotoView.isUserInteractionEnabled = true
        addPhotoView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(addPhotoViewTap)))
    }
    
    @objc func addPhotoViewTap() {
        self.addPhotoView.fadeIn { [weak self] in
            guard let weakself = self else { return }
//            let index = DataController.shared.photoCarModel.indexSection
//            if index == 10 {
//                //photo damage
//                weakself.performDamageView()
//            }else{
//                //default photo book-in
//                weakself.imagePicker.present(from: weakself.addPhotoView)
//            }
            
            weakself.imagePicker.present(from: weakself.addPhotoView)        }
    }
    
    //MARK: SetupTab
    func setUpTab(){
        fullName.text = "\(String.localized("select_inspection_inspector_label")) \(DataController.shared.getFullName())"
        
        pickUpStackView.isUserInteractionEnabled = true
        pickUpStackView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(toPickUpCar)))
        
        checkStackView.isUserInteractionEnabled = true
        checkStackView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(toCheckCar)))
        
        photoStackView.isUserInteractionEnabled = true
        photoStackView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(toPhotoCar)))
        
        
    }
    
    //MARK: Title
    func setTitleName(){
        switch DataController.shared.bookInType {
        case .CAR:
            title = "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ - ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"
        case .MBIKE:
            title = "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ - ‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå"
        case  .CARWRECK:
            title = "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ - ‡∏ã‡∏≤‡∏Å‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"
        case  .MBIKEWRECK:
            title = "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ - ‡∏ã‡∏≤‡∏Å‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå"
        }
    }
    

    //MARK: SetUp Check
    func setUpCheckButton(){
        frontCheckBox.typecheck = .BACKGROUND
        engineCheckBox.typecheck = .BACKGROUND
        plateCheckBox.typecheck = .BACKGROUND
        chassisCheckBox.typecheck = .BACKGROUND
        interiorCheckBox.typecheck = .BACKGROUND
        trayCheckBox.typecheck = .BACKGROUND
        sideCheckBox.typecheck = .BACKGROUND
        backCheckBox.typecheck = .BACKGROUND
        gasTankCheckBox.typecheck = .BACKGROUND
        damageCheckBox.typecheck = .BACKGROUND
        assetCheckBox.typecheck = .BACKGROUND
        
       
        sourceSectionName = [(name: "Front(‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤) *", cb: frontCheckBox),
                             (name: "Engine(‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå) *", cb: engineCheckBox),
                             (name: "Plate(‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡πâ‡∏≤‡∏¢) *", cb: plateCheckBox),
                             (name: "Chassis(‡πÄ‡∏•‡∏Ç‡πÅ‡∏ä‡∏™‡∏ã‡∏µ) *", cb: chassisCheckBox),
                             (name: "Interior(‡∏†‡∏≤‡∏¢‡πÉ‡∏ô) *", cb: interiorCheckBox),
                             (name: "Tray(‡∏´‡πâ‡∏≠‡∏á‡∏ó‡πâ‡∏≤‡∏¢) *", cb: trayCheckBox),
                             (name: "Side(‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á) *", cb: sideCheckBox),
                             (name: "Back(‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á) *", cb: backCheckBox),
                             (name: "Gas tank(‡∏ñ‡∏±‡∏á‡πÅ‡∏Å‡πä‡∏™) *", cb: gasTankCheckBox),
                             (name: "Asset(‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô) *", cb: assetCheckBox),
                             (name: "Damage(‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢) *", cb: damageCheckBox)
                             ]
        
        for item in sourceSectionName {
            setTitleCheckBox(item.name, cb: item.cb)
        }
       
        
    }
    
    @IBAction func skipTapped(_ sender: Any) {
        skipCheckBox.toggle { [weak self] check in
           print("üî∏ \(check)")
            let request =  PhotoCar.Something.Request(isSkip: check)
            self?.interactor?.ignoredSection(request: request)
            
        }
    }
    
    func displayUpdateCheckBox(viewModel: PhotoCar.Something.ViewModel) {
        skipCheckBox.check = viewModel.isCheck ?? false
    }
    
    func setTitleCheckBox(_ title:String , cb:CheckBoxUIButton){
        let range = (title as NSString).range(of: "*")
        let attr = NSMutableAttributedString(string: title)
        attr.addAttribute(.foregroundColor, value: UIColor.red, range: range)
        cb.setAttributedTitle(attr, for: .normal)
    }
    
    func setTitleFieldRequired(_ model:(name:String, cb: CheckBoxUIButton)){        
        let name = model.name.split(separator: "*")[0]
        self.setTitleCheckBox(String(name), cb: model.cb)
    }
    
    @IBAction func frontCheckBoxTapped(_ sender: Any) {
        frontCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.frontCheckBox)
        }
    }
    @IBAction func engineCheckBoxTapped(_ sender: Any) {
        engineCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.engineCheckBox)
        }
    }
    @IBAction func plateCheckBoxTapped(_ sender: Any) {
        plateCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.plateCheckBox)
        }
    }
    @IBAction func chassisCheckBoxTapped(_ sender: Any) {
        chassisCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.chassisCheckBox)
        }
    }
    @IBAction func interiorCheckBoxTapped(_ sender: Any) {
        interiorCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.interiorCheckBox)
        }
    }
    @IBAction func trayCheckBoxTapped(_ sender: Any) {
        trayCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.trayCheckBox)
        }
    }
    @IBAction func sideCheckBoxTapped(_ sender: Any) {
        sideCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.sideCheckBox)
        }
    }
    @IBAction func backCheckBoxTapped(_ sender: Any) {
        backCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.backCheckBox)
        }
    }
    @IBAction func gasTankCheckBoxTapped(_ sender: Any) {
        gasTankCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.gasTankCheckBox)
        }
    }
    @IBAction func damageCheckBoxTapped(_ sender: Any) {
        damageCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.damageCheckBox)
        }
    }
    @IBAction func assetCheckBoxTapped(_ sender: Any) {
        assetCheckBox.toggle { [weak self] check in
            guard let weakself = self else { return }
            weakself.selectButton(selectView: weakself.assetCheckBox)
        }
    }
    //MARK: Damage
//    func performDamageView(){
//        performSegue(withIdentifier: "damageSegue", sender: nil)
//    }
    
    //MARK: Select Section
    func selectButton(selectView: CheckBoxUIButton?){
        guard let _  = selectView else { return }
        
 
        let viewList = [frontCheckBox, engineCheckBox, plateCheckBox, chassisCheckBox, interiorCheckBox, trayCheckBox, sideCheckBox, backCheckBox, gasTankCheckBox, assetCheckBox, damageCheckBox]
        
        let selectionList = viewList.map { (view) -> String in
            view?.check = view == selectView
            var name = ""
            switch view {
            case frontCheckBox:
                name = "Front_B"
            case engineCheckBox:
                name = "Engine_B"
            case plateCheckBox:
                name = "Plate_B"
            case chassisCheckBox:
                name = "Chassis_B"
            case interiorCheckBox:
                name = "Interior_B"
            case trayCheckBox:
                name = "Tray_B"
            case sideCheckBox:
                name = "Side_B"
            case backCheckBox:
                name = "Back_B"
            case gasTankCheckBox:
                name = "Gas_B"
            case damageCheckBox:
                name = "Damage"
            case assetCheckBox:
                name = "Asset"
            default:
                break
            }
            return name
        }
        //get section name
        let index = viewList.firstIndex(of: selectView) ?? 0
        
        DataController.shared.photoCarModel.indexSection = index
        
        let request = PhotoCar.Something.Request(sectionName: selectionList[index])
        interactor?.loadListBySection(request: request)
        
        //skipCheckBox.check = false
        
    }
    //MARK: Setup CollectionView
    func setUpCollectionView(){
        collectionView.dataSource = dataSource
        collectionView.delegate = dataSource
        
        dataSource.didTapImageDelete = {[weak self] model in
            guard let model = model else { return }
            self?.alert(message: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö \(model.name ?? "") ‡πÑ‡∏´‡∏°", { [weak self] in
                let request = PhotoCar.Something.Request(deleteModel: model)
                self?.interactor?.deletePhotoModel(request: request)
            })
        }
        
        dataSource.didTapImageViewer = {[weak self] model in
            guard let model = model else { return }
            let request = PhotoCar.Something.Request(imageViewerModel: model)
            self?.interactor?.showImageViewer(request: request)
        }
    }
    
    //MARK: Presenter
    func displayCollectionImageBySection(viewModel: PhotoCar.Something.ViewModel) {
        //print("Reload Collection View")
        hideLoading()
        
        let viewList = [frontCheckBox, engineCheckBox, plateCheckBox, chassisCheckBox, interiorCheckBox, trayCheckBox, sideCheckBox, backCheckBox, gasTankCheckBox, assetCheckBox, damageCheckBox]
        
        DispatchQueue.main.async { [weak self] in
           

            let indexSection = DataController.shared.photoCarModel.indexSection
            if let selectView = viewList[indexSection] {
                selectView.check = true
            }
            
            if let count = viewModel.imageList?.count , count > 0,
               let model = self?.sourceSectionName[indexSection] {
                self?.setTitleFieldRequired(model)
            }
            
            if let requiredSection = viewModel.requiredSection ,
               let sourceSectionName = self?.sourceSectionName {
                for i in requiredSection {
                    self?.setTitleFieldRequired(sourceSectionName[i])
                }
            }
            
            
            self?.amountLabel.text = "\(viewModel.imageList?.count ?? 0)"
            //self?.dataSource.styleCell = (indexSection == 10) ? .DAMAGE : .NORMAL
            self?.dataSource.itemList = viewModel.imageList ?? []
            self?.collectionView.reloadData()
        }
        
       
    }
    
    func displayUpdateRequiredButton(viewModel: PhotoCar.Something.ViewModel) {
        guard let updateSection = viewModel.updateSection,
              let isSkip = viewModel.isSkip else{ return }
        let model = sourceSectionName[updateSection]
        
        if isSkip {
            setTitleFieldRequired(model)
        }else{
            setTitleCheckBox(model.name, cb: model.cb)
        }
        
    }
    
    func prepareData(){
        let request = PhotoCar.Something.Request()
        interactor?.prepareDataSection(request: request)
    }
    func fetchPhotoList(){
        let request = PhotoCar.Something.Request()
        interactor?.fetchPhotoList(request: request)
    }
    
    func displayErrorFetchList(viewModel: PhotoCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        
        DispatchQueue.main.async { [weak self] in
            self?.alertErrorMessage(message: errorMessage) { [weak self] in 
                self?.fetchPhotoList()
            }
        }
        
    }
    func displayErrorDelete(viewModel: PhotoCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        
        DispatchQueue.main.async { [weak self] in
            self?.alertErrorMessageOKAction(message: errorMessage) {
                // ignored
            }
        }
    }
    
    func validateActionSendPhoto(){
        var isCreate = DataController.shared.inspectionCarModel.isCreate
        
        let isCarWreck = DataController.shared.bookInType == .CARWRECK || DataController.shared.bookInType == .MBIKEWRECK
        let vehicleId = DataController.shared.receiverCarModel.vehicleId.trimWhiteSpace
        if isCarWreck && (!vehicleId.isEmpty) { /// carwreck  & send book-in
            isCreate = true
        }
        saveButton.isEnabled = isCreate
    }
}

//MARK: ViewController Lift Cycle
extension PhotoCarViewController {
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionView.collectionViewLayout.invalidateLayout()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let dateInspection = DataController.shared.inspectionCarModel.date
        let request = PhotoCar.Something.Request(dateInspection: dateInspection)
        interactor?.setReceiverDateTimeInspection(request: request)
        
        prepareData()
        fetchPhotoList()
        validateActionSendPhoto()
        validateInspectionIMAT()
    }
}

extension PhotoCarViewController  {
    @objc func toPickUpCar() {
        navigationController?.popToViewController(withType: PickUpCarViewController.self, animated: false)
    }
    
    @objc func toCheckCar() {
        guard let nav = navigationController else { return }
        let foundCheckCar = nav.viewControllers.filter({ $0 is CheckCarViewController})
        if foundCheckCar.count > 0 {
            navigationController?.popViewController(animated: false)
        }else{
            navigationController?.pushViewController(CarInspectionPage.CHECK_CAR.VC,  animated: false)
        }
    }
    
    @objc func toPhotoCar() {
    }
}
 
extension PhotoCarViewController : ImagePickerPresenter {
    func didSelectCallback() {
        showLoading()
    }
    
    func pickImageCallback(image: UIImage?, url: URL?) {
        guard let image =  image  else { return }

         let request = PhotoCar.Something.Request(image: image, url: url)
         interactor?.addPhoto(request: request)
    }
    
    
}
