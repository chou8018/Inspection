//
//  ReceiverCarPresenter.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ReceiverCarPresentationLogic
{
  func presentSomething(response: ReceiverCar.Something.Response)
    func presentSignatureModalView(response: ReceiverCar.Something.Response)
    func presentSignatureImageView(response: ReceiverCar.Something.Response)
    func presentValidatePhoneNumber(response: ReceiverCar.Something.Response)
    func validatePhoneNumberWithError(response: ReceiverCar.Something.Response)
    func errorNotMatchCompany(response: ReceiverCar.Something.Response)
    func presentCompany(response: ReceiverCar.Something.Response)
    
    func presentLocation(response: ReceiverCar.Something.Response)
    func presentPlantLocation(response: ReceiverCar.Something.Response)
    func presentSetPlantTextField(response: ReceiverCar.Something.Response)
    func presentSetSellCateTextField(response: ReceiverCar.Something.Response)
    
    func presentSellCategory(response: ReceiverCar.Something.Response)
}

class ReceiverCarPresenter: ReceiverCarPresentationLogic
{
  weak var viewController: ReceiverCarDisplayLogic?
  
  // MARK: Do something
  
  func presentSomething(response: ReceiverCar.Something.Response)
  {
    let viewModel = ReceiverCar.Something.ViewModel()
    viewController?.displaySomething(viewModel: viewModel)
  }
    
    func presentSignatureModalView(response: ReceiverCar.Something.Response) {
        
        let viewModel = ReceiverCar.Something.ViewModel()
        viewController?.displaySignatureViewModal(viewModel: viewModel)
    }
    
    
    func presentSignatureImageView(response: ReceiverCar.Something.Response) {
        
        let viewModel = ReceiverCar.Something.ViewModel(signatureImage: response.signatureImage,
                                                        userType: response.userType)
        viewController?.displaySignatureToImageView(viewModel: viewModel)
    }
    
    func presentValidatePhoneNumber(response: ReceiverCar.Something.Response) {
        let viewModel = ReceiverCar.Something.ViewModel(validatePhoneNumber : response.validatePhoneNumber)
        viewController?.displayPhoneNummber(viewModel: viewModel)
    }
    
    
    func validatePhoneNumberWithError(response: ReceiverCar.Something.Response) {
      
        let viewModel = ReceiverCar.Something.ViewModel(
            validPhoneNumber10Digit: response.validPhoneNumber10Digit,
            errorValidatePhoneNumber: "เบอร์โทรศัพท์ไม่ถูกต้อง")
        
        viewController?.displayMessageErrorValidatePhoneNummber(viewModel: viewModel)
    }
    
    func errorNotMatchCompany(response: ReceiverCar.Something.Response) {
        guard let match = response.isMatchCompany else { return }
        let errorMessage = match ? "" : "ชื่อบริษัทไม่มีในรายการ"
        let viewModel = ReceiverCar.Something.ViewModel(isMatchCompany: match,
                                                        errorNotMatchCompanyName: errorMessage)
        viewController?.displayMessageErrorNotMatchCompany(viewModel: viewModel)
    }
    
    func presentCompany(response: ReceiverCar.Something.Response) {

        
        if let kError = response.error {
            let message = kError.message
            let viewModel = ReceiverCar.Something.ViewModel(errorMessage: message)
            viewController?.displayShowError(viewModel: viewModel)
        }else{
            guard let sellerList = response.sellerList else { return }
            //let companyList = sellerList.map( { $0.name })
            let companyList = mapSellerList(from: sellerList.map( { $0.name }))
            
            let viewModel = ReceiverCar.Something.ViewModel(companyList: companyList)
            viewController?.displayCompany(viewModel: viewModel)
        }
    }
    //MARK: location
    func presentLocation(response: ReceiverCar.Something.Response) {
        if let kError = response.error {
            let message = kError.message
            let viewModel = ReceiverCar.Something.ViewModel(errorMessage: message)
            viewController?.displayLocationError(viewModel: viewModel)
        }else{
            guard let storageList = response.storageList else { return }
            let locationList = storageList.compactMap({ $0.location })
            let viewModel = ReceiverCar.Something.ViewModel(locationList: locationList)
            viewController?.displayLocation(viewModel: viewModel)
        }
    }
    //MARK: Plant
    func presentPlantLocation(response: ReceiverCar.Something.Response) {
        if let kError = response.error {
            let message = kError.message
            let viewModel = ReceiverCar.Something.ViewModel(errorMessage: message)
            viewController?.displayLocationError(viewModel: viewModel)
        }else{
            guard let plantLocations = response.plantLocations else { return }
            let plantList = plantLocations.compactMap({ $0.desc_BU })
            let viewModel = ReceiverCar.Something.ViewModel(plantList: plantList)
            viewController?.displayPlantLocation(viewModel: viewModel)
        }
    }
    
    func presentSetPlantTextField(response: ReceiverCar.Something.Response) {
        let viewModel = ReceiverCar.Something.ViewModel(plant_BU: response.plant_BU)
        viewController?.displaySetPlantTextField(viewModel: viewModel)
    }
    
    func presentSellCategory(response: ReceiverCar.Something.Response) {
        if let kError = response.error {
            let message = kError.message
            let viewModel = ReceiverCar.Something.ViewModel(errorMessage: message)
            viewController?.displaySellCateError(viewModel: viewModel)
        }else{
            guard let catelist = response.sellCategory else { return }
            let sellCateList = catelist.compactMap({ $0.desc_BU })
            let viewModel = ReceiverCar.Something.ViewModel(sellCateList: sellCateList)
            viewController?.displaySellCate(viewModel: viewModel)
        }
    }
    
    func presentSetSellCateTextField(response: ReceiverCar.Something.Response) {
        let viewModel = ReceiverCar.Something.ViewModel(sellCategory_BU: response.sellCategory_BU)
        viewController?.displaySetSellCategoryTextField(viewModel: viewModel)
    }
}
