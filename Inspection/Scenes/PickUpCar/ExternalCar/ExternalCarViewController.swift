//
//  ExternalCarViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RadioGroup

protocol ExternalCarDisplayLogic: AnyObject
{
    func displaySomething(viewModel: ExternalCar.Something.ViewModel)
    func displayTireCheckBox(viewModel: ExternalCar.Something.ViewModel)
    func displayMagWheelCheckBox(viewModel: ExternalCar.Something.ViewModel)
    func displayValidateResultTireTextField(viewModel: ExternalCar.Something.ViewModel)
    func displayNormalWheelCheckBox(viewModel: ExternalCar.Something.ViewModel)
    
    // add on 12/22/2023
    func displayRoofTypesDropdown(viewModel: ExternalCar.Something.ViewModel)
    func displayRoofTypesError(viewModel: ExternalCar.Something.ViewModel)

}

class ExternalCarViewController: ViewController, ExternalCarDisplayLogic
{
    
    var interactor: ExternalCarBusinessLogic?
    var router: (NSObjectProtocol & ExternalCarRoutingLogic & ExternalCarDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ExternalCarInteractor()
        let presenter = ExternalCarPresenter()
        let router = ExternalCarRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUIView()
        setUpDropdown()
        setUpRadio()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var scrollView: UIScrollView!
    
    @IBOutlet weak var qualityColorRadio: RadioGroup!
    @IBOutlet weak var qualityOverallRadio: RadioGroup!
    
    
    @IBOutlet weak var spoilerCheckBox: CheckBoxUIButton!
    @IBOutlet weak var magWheelCheckBox: CheckBoxUIButton!
    @IBOutlet weak var normalWheelCheckBox: CheckBoxUIButton!
    @IBOutlet weak var tireCheckBox: CheckBoxUIButton!
    
    
    @IBOutlet weak var magWheelTextField: DropDown!
    @IBOutlet weak var normalWheelTextField: DropDown!
    
    @IBOutlet weak var tireTextField: UITextField!
    @IBOutlet weak var tireQualityTextField: UITextField!
    @IBOutlet weak var damageDetailTextField: MultilineTextField!
    
    // local strings
    @IBOutlet weak var exteriorTitleLabel: UILabel!
    @IBOutlet weak var paintConditionLabel: UILabel!
    @IBOutlet weak var spoilerLabel: UILabel!
    @IBOutlet weak var alloyWheelLabel: UILabel!
    @IBOutlet weak var steelWheelLabel: UILabel!
    @IBOutlet weak var alloyUnitLabel: UILabel!
    @IBOutlet weak var steelUnitLabel: UILabel!
    @IBOutlet weak var tiresLabel: UILabel!
    @IBOutlet weak var damagesLabel: UILabel!
    @IBOutlet weak var roofTypeLabel: UILabel!
    @IBOutlet weak var roofTypeTextField: DropDown!
    @IBOutlet weak var roofTypeView: UIStackView!
    @IBOutlet weak var roofTypeLineView: UIView!
    var isGetRoofTypeLunch = false

    override func initLocalString() {
        super.initLocalString()
        exteriorTitleLabel.text = String.localized("car_exterior_label")
        paintConditionLabel.text = String.localized("car_exterior_paint_label")
        spoilerLabel.text = String.localized("car_exterior_spoiler_label")
        alloyWheelLabel.text = String.localized("car_exterior_alloy_wheel_label")
        magWheelTextField.placeholder = String.localized("car_exterior_amount_label")
        normalWheelTextField.placeholder = String.localized("car_exterior_amount_label")
        steelWheelLabel.text = String.localized("car_exterior_steel_wheel_label")
        alloyUnitLabel.text = String.localized("car_exterior_unit_label")
        steelUnitLabel.text = String.localized("car_exterior_unit_label")
        tiresLabel.text = String.localized("car_exterior_tires_label")
        tireTextField.placeholder = String.localized("car_exterior_make_label")
        tireQualityTextField.placeholder = String.localized("car_exterior_condition_label")
        damagesLabel.text = String.localized("car_exterior_damages_label")
        damageDetailTextField.placeholder = damagesLabel.text
        roofTypeLabel.text = String.localized("car_exterior_roof_type_label")
        roofTypeTextField.placeholder = roofTypeLabel.text
    }
    
    func loadRetryApi() {
        
        if !isGetRoofTypeLunch {
            getRoofType()
        }
        
        if DataController.shared.hasRoofType() {
            roofTypeView.isHidden = false
            roofTypeLineView.isHidden = false
            
        } else {
            roofTypeView.isHidden = true
            roofTypeLineView.isHidden = true
        }
    }
    
    //MARK: roofType
    func getRoofType(){
        
        let request = ExternalCar.Something.Request()
        interactor?.getRoofType(request: request)
    }
    func displayRoofTypesError(viewModel: ExternalCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.loadRetryApi()
        }
    }
    func displayRoofTypesDropdown(viewModel: ExternalCar.Something.ViewModel) {
        
        guard let values = viewModel.roofTypes else { return }
        isGetRoofTypeLunch = true
        
        roofTypeView.isHidden = false
        roofTypeLineView.isHidden = false
        
        roofTypeTextField.optionArray = values
        if let roofTypeId = DataController.shared.receiverCarModel.roofTypeId, roofTypeId > 1 {
            roofTypeTextField.selectedIndex = roofTypeId - 1
            roofTypeTextField.text = values[roofTypeId - 1]
        }
        
        roofTypeTextField.didSelect { [weak self] (selected, index, _) in
            self?.roofTypeTextField.text = selected
            DataController.shared.receiverCarModel.roofType = selected
            DataController.shared.inspectionCarModel.roofType = selected
            
            DataController.shared.receiverCarModel.roofTypeId = index + 1
            DataController.shared.inspectionCarModel.roofTypeId = index + 1
        }
     
    }
    
    func setValue(to textfield:DropDown , values: [String], didSelected:@escaping (_ selectedText: String, _ index: Int , _ id:Int )->() ){
        textfield.optionArray = values
        textfield.didSelect(completion: didSelected)
    }
    
    func doSomething()
    {
        let request = ExternalCar.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: ExternalCar.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    //MARK: UIVIEW
    func setUIView() {
        
        //DropDown
        magWheelTextField.autocorrectionType = .no
        normalWheelTextField.autocorrectionType = .no
        
        //UITextField
        tireTextField.autocorrectionType = .no
        tireQualityTextField.autocorrectionType = .no
        damageDetailTextField.autocorrectionType = .no
        
        tireTextField.delegate = self
        tireQualityTextField.delegate = self
        damageDetailTextField.delegate = self
        
        addTarget(from: magWheelTextField)
        addTarget(from: normalWheelTextField)
        
        addTarget(from: tireTextField)
        addTarget(from: tireQualityTextField)
        
    }
    fileprivate func addTarget(from textfield: UITextField ){
        textfield.addTarget(self, action: #selector(textFieldDidChange(_:)),for: .editingChanged)
    }
    
    
    //MARK: RADIO
    func setUpRadio(){
        let attributedString = [NSAttributedString.Key.foregroundColor : UIColor.appPrimaryColor]
        
        //Color
        qualityColorRadio.attributedTitles = [
            NSAttributedString(string: string_good,
                               attributes: attributedString),
            NSAttributedString(string: string_average,
                               attributes: attributedString),
            NSAttributedString(string: string_fair,
                               attributes: attributedString),
            NSAttributedString(string: string_poor,
                               attributes: attributedString)
        ]
        
        //overall
        qualityOverallRadio.attributedTitles = [
            NSAttributedString(string: string_excellent,
                               attributes: attributedString),
            NSAttributedString(string: string_good,
                               attributes: attributedString),
            NSAttributedString(string: string_average,
                               attributes: attributedString),
            NSAttributedString(string: string_fair,
                               attributes: attributedString),
            NSAttributedString(string: string_poor,
                               attributes: attributedString),
            NSAttributedString(string: string_as_is,
                               attributes: attributedString),
            NSAttributedString(string: string_salvage,
                               attributes: attributedString)
        ]
    }
    @IBAction func overallValueChange(_ sender: Any) {
        var selectString:String? = nil
        switch qualityOverallRadio.selectedIndex {
        case 0:
            selectString = string_excellent
        case 1:
            selectString = string_good
        case 2:
            selectString = string_average
        case 3:
            selectString = string_fair
        case 4:
            selectString = string_poor
        case 5:
            selectString = string_as_is
        case 6:
            selectString = string_salvage
        default:
            return
        }
        DataController.shared.receiverCarModel.externalOverall = selectString
        let gradeOverallId = qualityOverallRadio.selectedIndex + 1
        DataController.shared.receiverCarModel.gradeOverallId = gradeOverallId
        
        
        
        // redbookCondition for salvage
        if DataController.shared.bookInType == .CARWRECK {
            
            switch qualityOverallRadio.selectedIndex {
            case 0:
                DataController.shared.receiverCarModel.redBookCondition = "E"
            case 1:
                DataController.shared.receiverCarModel.redBookCondition = "G"
            case 2:
                DataController.shared.receiverCarModel.redBookCondition = "A"
            case 3:
                DataController.shared.receiverCarModel.redBookCondition = "F"
            case 4:
                DataController.shared.receiverCarModel.redBookCondition = "P"
            case 5:
                DataController.shared.receiverCarModel.redBookCondition = "X"
            case 6:
                DataController.shared.receiverCarModel.redBookCondition = "Y"
            default:
                return
            }
        }
        
    }
    @IBAction func qualityColorValueChange(_ sender: Any) {
        var selectString:String? = nil
        switch qualityColorRadio.selectedIndex {
        case 0:
            selectString = string_good_first
        case 1:
            selectString = string_average
        case 2:
            selectString = string_fair
        case 3:
            selectString = string_poor
        default:
            return
        }
        DataController.shared.receiverCarModel.colorOverall = selectString
        let colorOverallId = qualityColorRadio.selectedIndex + 1
        DataController.shared.receiverCarModel.colorOverallId = colorOverallId
    }
    
    
    //MARK: Dropdown
    func setUpDropdown(){
        magWheelTextField.optionArray = ["1", "2", "3", "4"]
        magWheelTextField.didSelect { [weak self] (selected, _, _) in
            
            DataController.shared.receiverCarModel.magWheelAmount = selected
            DataController.shared.receiverCarModel.isMagWheel = true
            
            self?.magWheelTextField.text = selected
            
            let request = ExternalCar.Something.Request(validateWheel: selected)
            self?.interactor?.validateWheel(request: request)
        }
        
        normalWheelTextField.optionArray = ["1", "2", "3", "4"]
        normalWheelTextField.didSelect { [weak self] (selected, _, _) in
            
            DataController.shared.receiverCarModel.normalWheelAmount = selected
            DataController.shared.receiverCarModel.isNormalWheel = true
            
            self?.normalWheelTextField.text = selected
            
            let request = ExternalCar.Something.Request(validateNormalWheel: selected)
            self?.interactor?.validateNormalWheel(request: request)
        }
    }
    
    //MARK: CheckBox
    @IBAction func spoilerTapped(_ sender: Any) {
        spoilerCheckBox.toggle { check in
            DataController.shared.receiverCarModel.isSpoiler = check
            
        }
    }
    @IBAction func magWheelTapped(_ sender: Any) {
        magWheelCheckBox.toggle { [weak self] check in
            if !check {
                self?.magWheelTextField.text = ""
                DataController.shared.receiverCarModel.magWheelAmount = nil
            }
            DataController.shared.receiverCarModel.isMagWheel = check
        }
    }
    @IBAction func normalWheelTapped(_ sender: Any){
        normalWheelCheckBox.toggle { [weak self] check in
            if !check {
                self?.normalWheelTextField.text = ""
                DataController.shared.receiverCarModel.normalWheelAmount = nil
            }
            DataController.shared.receiverCarModel.isNormalWheel = check
        }
    }
    
    @IBAction func tireTapped(_ sender: Any) {
        tireCheckBox.toggle { [weak self] check in
            if !check {
                self?.tireTextField.text = ""
                self?.tireQualityTextField.text = ""
                DataController.shared.receiverCarModel.tireQuality = nil
                DataController.shared.receiverCarModel.brandTire = nil
            }
            DataController.shared.receiverCarModel.isTire = check
        }
    }
    
    func displayTireCheckBox(viewModel: ExternalCar.Something.ViewModel) {
        tireCheckBox.check = viewModel.isTire ?? false
        DataController.shared.receiverCarModel.isTire = viewModel.isTire ?? false
    }
    func displayMagWheelCheckBox(viewModel: ExternalCar.Something.ViewModel) {
        magWheelCheckBox.check = viewModel.isMagWheel ?? false
        DataController.shared.receiverCarModel.isMagWheel = viewModel.isMagWheel ?? false
    }
    func displayNormalWheelCheckBox(viewModel: ExternalCar.Something.ViewModel) {
        normalWheelCheckBox.check = viewModel.isNormalWheel ?? false
        DataController.shared.receiverCarModel.isNormalWheel = viewModel.isNormalWheel ?? false
    }
    
    
    //MARK: TextField
    func displayValidateResultTireTextField(viewModel: ExternalCar.Something.ViewModel) {
        tireQualityTextField.text = viewModel.validateNumberResult
        DataController.shared.receiverCarModel.tireQuality = viewModel.validateNumberResult
    }
    
    @objc func prepareData(){
        //MARK: External
        let model = DataController.shared.receiverCarModel
        let gradeOverallValue = [string_excellent,string_good,string_average,string_fair,string_poor,string_as_is,string_salvage]
        let colorOverallValue = [string_good_first,string_average,string_fair,string_poor]
        
        qualityColorRadio.selectedIndex = getRadioIndexByValue(from: colorOverallValue, value: model.colorOverall)
        
        qualityOverallRadio.selectedIndex = getRadioIndexByValue(from: gradeOverallValue, value: model.externalOverall)
        
        spoilerCheckBox.check = model.isSpoiler ?? false
        magWheelCheckBox.check = model.isMagWheel
        normalWheelCheckBox.check = model.isNormalWheel
        tireCheckBox.check = model.isTire ?? false
        
        magWheelTextField.text = model.magWheelAmount
        normalWheelTextField.text = model.normalWheelAmount
        
        tireTextField.text = model.brandTire
        tireQualityTextField.text = model.tireQuality
        damageDetailTextField.text = model.damageDetail
        
//        displayRoofTypeOptions()
        
    }
    @objc func updateView(){
        let isEnabled = getEnableView()
        qualityColorRadio.setEnableView(isEnable: isEnabled)
        qualityOverallRadio.setEnableView(isEnable: isEnabled)
        
        spoilerCheckBox.setEnableView(isEnable: isEnabled)
        magWheelCheckBox.setEnableView(isEnable: isEnabled)
        normalWheelCheckBox.setEnableView(isEnable: isEnabled)
        tireCheckBox.setEnableView(isEnable: isEnabled)
        
        magWheelTextField.setEnableView(isEnable: isEnabled)
        normalWheelTextField.setEnableView(isEnable: isEnabled)
        tireTextField.setEnableView(isEnable: isEnabled)
        tireQualityTextField.setEnableView(isEnable: isEnabled)
        damageDetailTextField.setEnableView(isEnable: isEnabled)
        
        
    }
    
    @objc func categoryChanged(){
        loadRetryApi()
    }
    
    func displayRoofTypeOptions() {
        if DataController.shared.receiverCarModel.sellingCategory?.trimWhiteSpace == "PU" {
            roofTypeView.isHidden = false
            roofTypeLineView.isHidden = false
            
//            roofTypeTextField.text = DataController.shared.receiverCarModel.roofType
         
            roofTypeTextField.optionArray = [
                String.localized("car_exterior_roof_not_attach_label"),
                String.localized("car_exterior_roof_corral_label"),
                String.localized("car_exterior_roof_high_label"),
                String.localized("car_exterior_roof_cargo_box_label"),
                String.localized("car_exterior_roof_high_canopy_label"),
                String.localized("car_exterior_roof_canoly_label")
            ]
            
            if let roofTypeId = DataController.shared.receiverCarModel.roofTypeId, roofTypeId > 1 {
                roofTypeTextField.selectedIndex = roofTypeId - 1
                roofTypeTextField.text = roofTypeTextField.optionArray[roofTypeId - 1]
            }
            
            roofTypeTextField.didSelect { [weak self] (selected, index, _) in
                self?.roofTypeTextField.text = selected
                DataController.shared.receiverCarModel.roofType = selected
                DataController.shared.inspectionCarModel.roofType = selected
                
                DataController.shared.receiverCarModel.roofTypeId = index + 1
                DataController.shared.inspectionCarModel.roofTypeId = index + 1
            }
        } else {
            roofTypeView.isHidden = true
            roofTypeLineView.isHidden = true
        }
    }
}

extension ExternalCarViewController : UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        //print(textView.text)
        
        DataController.shared.receiverCarModel.damageDetail = textView.text
    }
}
// MARK: UITextFieldDelegate
extension ExternalCarViewController : UITextFieldDelegate {
    @objc func textFieldDidChange(_ textField: UITextField) {
        //print(textField.text)
        
        switch textField {
            
        case tireQualityTextField:
            let request = ExternalCar.Something.Request(validateNumber: textField.text)
            self.interactor?.validateNumber(request: request)
            
        case tireTextField:
            DataController.shared.receiverCarModel.brandTire = textField.text
            let request = ExternalCar.Something.Request(tire: textField.text)
            self.interactor?.checkTire(request: request)
            
            
            
        default:
            return
        }
        
    }
    
    
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        
        
        return true
    }
}
//MARK: keyboard
extension ExternalCarViewController {
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        scrollView.registKeyboardNotification()
        loadRetryApi()
        prepareData()
        updateView()
        
        NotificationCenter.default.addObserver(self, selector: #selector(updateView), name: NSNotification.Name("updateUI"), object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(categoryChanged), name: NSNotification.Name("categoryChanged"), object: nil)
        
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        scrollView.resignKeyboardNotification()
        
        NotificationCenter.default.removeObserver(self)
    }
}
