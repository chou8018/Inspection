//
//  ReceiverCarInteractor.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ReceiverCarBusinessLogic
{
  func doSomething(request: ReceiverCar.Something.Request)
    func signatureViewTap(request: ReceiverCar.Something.Request)
    func getSignature(request: ReceiverCar.Something.Request)
    func validatePhoneNumber(request: ReceiverCar.Something.Request)
    func verifyCompany(request: ReceiverCar.Something.Request)
    func fetchCompany(request: ReceiverCar.Something.Request)
   
    func fetchLocation(request: ReceiverCar.Something.Request)
    func fetchPlantLocation(request: ReceiverCar.Something.Request)
    func selectPlantLocation(request: ReceiverCar.Something.Request)
    
    func preparePlantLocation(request: ReceiverCar.Something.Request)
    
    func fetchSellCategory(request: ReceiverCar.Something.Request)
    func selectSellCategory(request: ReceiverCar.Something.Request)
    func prepareSellCategory(request: ReceiverCar.Something.Request)
}

protocol ReceiverCarDataStore
{
  //var name: String { get set }
    var title : String { get set }
    var signatureImage : UIImage? { get set }
    var user : Signature.USER? { get set }
}

class ReceiverCarInteractor: ReceiverCarBusinessLogic, ReceiverCarDataStore
{
  var presenter: ReceiverCarPresentationLogic?
  var worker: ReceiverCarWorker?

    var title : String = ""
    var signatureImage : UIImage?
    var user : Signature.USER?
    

    var sellerList : [SellerModel]?
    var workerSelect: SelectInspectionWorker?
    
    var plantLocation : [PlantResponse]?
    var sellCategoryList : [SellCateResponse]?
    
    
  // MARK: Do something
  
  func doSomething(request: ReceiverCar.Something.Request)
  {
//    worker = ReceiverCarWorker()
//    worker?.doSomeWork()
    
    let response = ReceiverCar.Something.Response()
    presenter?.presentSomething(response: response)
  }
    
    func signatureViewTap(request: ReceiverCar.Something.Request) {
        title = request.titleName!
        signatureImage = request.signatureImage
        user = request.userType
        
        let response = ReceiverCar.Something.Response()
        presenter?.presentSignatureModalView(response: response)
    }
    
    
    func getSignature(request: ReceiverCar.Something.Request) {
       
        let response = ReceiverCar.Something.Response(signatureImage: request.signatureImage,
                                                      userType: request.userType)
        
        presenter?.presentSignatureImageView(response: response)
    }
    
    
    var oldValue = ""
    func validatePhoneNumber(request: ReceiverCar.Something.Request) {
        guard let newValue = request.phoneNumber  else { return }
        let isValid = newValue.isValidNumber()
        let validateResult = isValid ? newValue : oldValue
        oldValue = validateResult
     
        let response = ReceiverCar.Something.Response(validatePhoneNumber: validateResult)
        presenter?.presentValidatePhoneNumber(response : response)
        
        
        //MARK: validate  phone number
        if !validateResult.isEmpty {
            let validPhoneNumber10Digit = validateResult.isValidMobile10Digit()
            let responseError = ReceiverCar.Something.Response(validPhoneNumber10Digit: validPhoneNumber10Digit)
            presenter?.validatePhoneNumberWithError(response: responseError)
        }else{
            let responseError = ReceiverCar.Something.Response(validPhoneNumber10Digit: true)
            presenter?.validatePhoneNumberWithError(response: responseError)
        }
        
    }
    
    func verifyCompany(request: ReceiverCar.Something.Request) {
        guard let text = request.companyNameDidChange?.replacingOccurrences(of: "âœ”ï¸Ž ", with: "") else { return }
        //check match
        if let index = sellerList?.firstIndex(where: { $0.name == text }) ,
           let modelSelect = sellerList?[index] {
            DataController.shared.receiverCarModel.companyName = modelSelect.sellerNameTh
            DataController.shared.receiverCarModel.companyNameEn = modelSelect.sellerNameEn
            DataController.shared.receiverCarModel.sellerCode = modelSelect.sellerCode
        }else{
            DataController.shared.receiverCarModel.companyName = ""
            DataController.shared.receiverCarModel.companyNameEn = ""
            DataController.shared.receiverCarModel.sellerCode = nil
        }
        
        let response = ReceiverCar.Something.Response(isMatchCompany: true)
        presenter?.errorNotMatchCompany(response: response)
    }
    
    func fetchCompany(request: ReceiverCar.Something.Request) {
        
        // fetch company
        worker = ReceiverCarWorker()
        worker?.fetchCompany(completion: {[weak self] (response) in
            self?.sellerList = response.sellerList
            self?.presenter?.presentCompany(response: response)
        })
         
    }
    
    //MARK: location
    func fetchLocation(request: ReceiverCar.Something.Request) {
        workerSelect = SelectInspectionWorker()
        workerSelect?.fetchLocation(completion: { [weak self] (response) in
            if let error = response.error {
                let response = ReceiverCar.Something.Response(error: error)
                self?.presenter?.presentLocation(response: response)
            }else{
                let response = ReceiverCar.Something.Response(storageList: response.storageList)
                self?.presenter?.presentLocation(response: response)
            }

            
        })
    }
    
    //MARK: Plant
    func fetchPlantLocation(request: ReceiverCar.Something.Request) {
        worker =  ReceiverCarWorker()
        worker?.getPlantLocation(completion: { [weak self] response in
            if let location = response.plantLocations {
                self?.plantLocation = location
            }
            self?.presenter?.presentPlantLocation(response: response)
            
        })
    }
    func selectPlantLocation(request: ReceiverCar.Something.Request) {
        guard let plantLocationName = request.plantLocationName else { return }
        
        if let plant = self.plantLocation?.filter({ $0.desc_BU == plantLocationName }).first {
            DataController.shared.receiverCarModel.plant = plant.plant1
            print("ðŸ”¸ \(plant)")
        }
    }
    
    func preparePlantLocation(request: ReceiverCar.Something.Request) {
        guard let plantCode = request.plantCode else { return }
        
        if let plant = self.plantLocation?.filter({ $0.plant1 == plantCode }).first {
            let response = ReceiverCar.Something.Response(plant_BU : plant.desc_BU)
            presenter?.presentSetPlantTextField(response: response)
        }
    }
    //MARK: Sell Category
    func fetchSellCategory(request: ReceiverCar.Something.Request) {
        
        worker = ReceiverCarWorker()
        worker?.fetchSellCate(completion: {[weak self] response in
            if let sellcate = response.sellCategory {
                self?.sellCategoryList = sellcate
            }
            self?.presenter?.presentSellCategory(response: response)
        })
    }
    
    func selectSellCategory(request: ReceiverCar.Something.Request) {
        guard let sellCate = request.sellCategory else { return }
        
        if let sellCateSelect = self.sellCategoryList?.filter({ $0.desc_BU?.trimWhiteSpace == sellCate.trimWhiteSpace }).first {
            DataController.shared.receiverCarModel.sellingCategory = sellCateSelect.sellingCategory1
        }
    }
    
    func prepareSellCategory(request: ReceiverCar.Something.Request) {
        guard let sellCateCode = request.sellCategoryCode else { return }
        
        if let sellingCategory = self.sellCategoryList?.filter({ $0.sellingCategory1?.trimWhiteSpace == sellCateCode.trimWhiteSpace }).first {
            let response = ReceiverCar.Something.Response(sellCategory_BU : sellingCategory.desc_BU)
            presenter?.presentSetSellCateTextField(response: response)
        }
    }
}
