//
//  AboutCarPresenter.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AboutCarPresentationLogic
{
  func presentSomething(response: AboutCar.Something.Response)
    func presentDropdownYear(response: AboutCar.Something.Response)
    func presentIsGasNumber(response: AboutCar.Something.Response)
    func presentValidateCapacityNumber(response: AboutCar.Something.Response)
    func presentMakeCarList(response: AboutCar.Something.Response)
    func presentModelCarList(response: AboutCar.Something.Response)
    func presentColorCarList(response: AboutCar.Something.Response)
    func presentProvinceList(response: AboutCar.Something.Response)
    func presentBodyList(response: AboutCar.Something.Response)
    
    func presentModelCarSelected(response: AboutCar.Something.Response)
    
    func presentBodySelect(response: AboutCar.Something.Response)
    func presentMakeSelect(response: AboutCar.Something.Response)
    
    func presentVariantsList(response: AboutCar.Something.Response)
    
    func presentValidRegistration(response: AboutCar.Something.Response)
}

class AboutCarPresenter: AboutCarPresentationLogic
{
  weak var viewController: AboutCarDisplayLogic?
  
  // MARK: Do something
  
  func presentSomething(response: AboutCar.Something.Response)
  {
    let viewModel = AboutCar.Something.ViewModel()
    viewController?.displaySomething(viewModel: viewModel)
  }
    
    func presentDropdownYear(response: AboutCar.Something.Response) {
        let viewModel = AboutCar.Something.ViewModel(yearLists: response.yearLists)
        viewController?.displayDropdownYear(viewModel: viewModel)
    }
    
    func presentIsGasNumber(response: AboutCar.Something.Response) {
        let viewModel = AboutCar.Something.ViewModel(isGasNumber: response.isGasNumber)
        viewController?.displayGasCheckBox(viewModel: viewModel)
    }
    
    func presentValidateCapacityNumber(response: AboutCar.Something.Response) {
        let viewModel = AboutCar.Something.ViewModel(validateResult: response.validateResult)
        viewController?.displayCapacityNumberResult(viewModel: viewModel)
    }
    
    func presentMakeCarList(response: AboutCar.Something.Response) {
        if let kError = response.error {
            let message = kError.message
            let viewModel = AboutCar.Something.ViewModel(errorMessage: message)
            viewController?.displayShowMakeError(viewModel: viewModel)
        }else{
            guard let makeList = response.makeList else { return }
            let values = makeList.map({ $0.desc_BU ?? "" })
            let viewModel = AboutCar.Something.ViewModel(makeList: values)
            viewController?.displayMakeCarDropdown(viewModel: viewModel)
        }
     
    }
    func presentModelCarList(response: AboutCar.Something.Response) {
        if let kError = response.error {
            let message = kError.message
            let viewModel = AboutCar.Something.ViewModel(errorMessage: message)
            viewController?.displayShowModelError(viewModel: viewModel)
        }else{
            guard let modelList = response.modelList else { return }
            let values = modelList.map({ $0.model_BU ?? "" })
            let viewModel = AboutCar.Something.ViewModel(modelList: values)
            viewController?.displayModelCarDropdown(viewModel: viewModel)
        }
    }
    
    func presentColorCarList(response: AboutCar.Something.Response) {
        if let kError = response.error {
            let message = kError.message
            let viewModel = AboutCar.Something.ViewModel(errorMessage: message)
            viewController?.displayShowColorError(viewModel: viewModel)
        }else{
            guard let colorList = response.colorList else { return }
            var values = colorList.map({ ("\($0.colour_BU ?? "") (\($0.colour_LO ?? ""))") })
            
            if !DataController.shared.isThaiLanguage() {
                values = colorList.map({ ("\($0.colour_BU ?? "")") })
            }
            
            values = values.sorted(by: { $0 < $1 })
            let viewModel = AboutCar.Something.ViewModel(colorList: values)
            viewController?.displayColorCarDropdown(viewModel: viewModel)
        }
    }
    
    
    func presentProvinceList(response: AboutCar.Something.Response) {
        if let kError = response.error {
            let message = kError.message
            let viewModel = AboutCar.Something.ViewModel(errorMessage: message)
            viewController?.displayShowProvinceError(viewModel: viewModel)
        }else{
            guard let provinceList = response.provinceList else { return }
            var values = provinceList.map({ $0.desc_LO ?? "" })
            if !DataController.shared.isThaiLanguage() {
                values = provinceList.map({ $0.desc_BU ?? "" })
            }
            let viewModel = AboutCar.Something.ViewModel(provinceList: values)
            viewController?.displayProvinceDropdown(viewModel: viewModel)
        }
    }
    func presentBodyList(response: AboutCar.Something.Response) {
        if let kError = response.error {
            let message = kError.message
            let viewModel = AboutCar.Something.ViewModel(errorMessage: message)
            viewController?.displayShowBodyCarError(viewModel: viewModel)
        }else{
            guard let bodyList = response.bodyList else { return }
//            let values = bodyList.map({ $0.bodyType ?? "" })
            let values = bodyList.map({ $0.desc_BU ?? "" })
            let viewModel = AboutCar.Something.ViewModel(bodyList: values)
            viewController?.displayBodyCarDropdown(viewModel: viewModel)
        }
    }
    
    func presentModelCarSelected(response: AboutCar.Something.Response) {
        guard let model = response.searchCodeModel else { return }

        let discriptionModelSelect = model.description_BU
        let modelCode = model.modelCode
        let make = model.make
        let variants = model.variants
        let modelCar = model.model_BU
        let buildYear = model.buildYear
        let engineCapacity = model.engineCapacity
        let model_BU = model.model_BU
        let model_LO = model.model_LO
        let body = model.body
        let gearbox = model.gearbox
        let gear = model.gears
        let fuelType = model.fuelType
        let fuelDelivery = model.fuelDelivery
        let drive = model.drive
        let chassisNumber = model.chassisPreCode
        let modelCodeId = model.id
        
        
        let viewModel = AboutCar.Something.ViewModel(
             discriptionModelSelect: discriptionModelSelect,
             modelCode: modelCode,
             make: make,
             variants: variants,
             model: modelCar,
             buildYear: buildYear,
             engineCapacity: engineCapacity,
             model_BU: model_BU,
             model_LO: model_LO,
             body: body,
             gearbox: gearbox,
             gear: gear,
             fuelType: fuelType,
             fuelDelivery: fuelDelivery,
             drive: drive,
             chassisNumber: chassisNumber,
             modelCodeId: modelCodeId)
        
        viewController?.displayfillModelSelected(viewModel: viewModel)
    }
    
    
    func presentBodySelect(response: AboutCar.Something.Response) {
        
        let viewModel = AboutCar.Something.ViewModel(body_bu: response.body_bu)
        viewController?.displayfillBodySelected(viewModel: viewModel)
    }
    
    func presentMakeSelect(response: AboutCar.Something.Response) {
        let viewModel = AboutCar.Something.ViewModel(make_bu: response.make_bu)
        viewController?.displayfillMakeSelected(viewModel: viewModel)
    }
    
    
    func presentVariantsList(response: AboutCar.Something.Response) {
        if let error = response.error {
            let viewModel = AboutCar.Something.ViewModel(errorMessage: error.message)
            viewController?.displayShowVaraintError(viewModel: viewModel)
        }else{
            guard let varaintsList = response.varaintsList else { return }
            let modelList = varaintsList.compactMap({ $0.variants })
            let viewModel = AboutCar.Something.ViewModel(varaintsList: modelList)
            viewController?.displayVaraintDropdown(viewModel: viewModel)
        }
    }
    
    func presentValidRegistration(response: AboutCar.Something.Response) {
        
    }
}
