//
//  PlaceViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 2/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PlaceDisplayLogic: AnyObject
{
    func presentUpdatePicker(viewModel: Place.Picker.ViewModel)
    func presentSelectProvincePicker(viewModel: Place.Picker.ViewModel)
    
    func displayReceiverPicker(viewModel: Place.Picker.ViewModel)
    func displayStoragePicker(viewModel: Place.Picker.ViewModel)
    
    var confirmPlace : ((_ receivePlace : PlantResponse , _ storePlace : StorageLocationModel) -> Void)? { get set }
}

class PlaceViewController: ViewController, PlaceDisplayLogic
{
    
    
    var interactor: PlaceBusinessLogic?
    var router: (NSObjectProtocol & PlaceRoutingLogic & PlaceDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = PlaceInteractor()
        let presenter = PlacePresenter()
        let router = PlaceRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUpPicker()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var placeReceivePicker: UIPickerView!
    @IBOutlet weak var placeStorePicker: UIPickerView!
    
    var datasourceReceiver = ProvinceDataSource()
    var datasourceStorage = ProvinceDataSource()
    var confirmPlace: ((PlantResponse, StorageLocationModel) -> Void)?
    
    @IBOutlet weak var searchBarReceiver: UISearchBar!
    @IBOutlet weak var searchBarStorage: UISearchBar!
    
    // local strings
    @IBOutlet weak var receiveLocationTitleLabel: UILabel!
    @IBOutlet weak var storeLocationTitleLabel: UILabel!
    @IBOutlet weak var cancelButton: CustomUIButton!
    @IBOutlet weak var okButton: CustomUIButton!
    
    override func initLocalString() {
        super.initLocalString()
        
        receiveLocationTitleLabel.text = String.localized("receiver_car_plant_location_label")
        storeLocationTitleLabel.text = String.localized("receiver_car_storage_location_label")
        cancelButton.setTitle(String.localized("select_inspection_dialog_no"), for: .normal)
        okButton.setTitle(String.localized("select_inspection_dialog_yes"), for: .normal)
        searchBarReceiver.placeholder = String.localized("inspection_list_search_label")
        searchBarStorage.placeholder = String.localized("inspection_list_search_label")

    }
    
    func setUpPicker()
    {
        placeReceivePicker.delegate = datasourceReceiver
        placeReceivePicker.dataSource = datasourceReceiver
        
        placeStorePicker.delegate  = datasourceStorage
        placeStorePicker.dataSource = datasourceStorage
        
        
        placeStorePicker.setValue(UIColor.appPrimaryColor, forKeyPath: "textColor")
        placeReceivePicker.setValue(UIColor.appPrimaryColor, forKeyPath: "textColor")
        
        let request = Place.Picker.Request()
        interactor?.fetchDataPicker(request: request)
        
        addSearch()
    }
    
    func addSearch(){
        searchBarReceiver.delegate = self
        searchBarStorage.delegate = self
        
    }
    
    func presentUpdatePicker(viewModel: Place.Picker.ViewModel)
    {
        datasourceReceiver.plantLocationList = viewModel.plantLocationList
        datasourceStorage.locationList = viewModel.locationList
        
        placeStorePicker.selectRow(viewModel.selectStoreValue ?? 0, inComponent: 0, animated: true)
        placeReceivePicker.selectRow(viewModel.selectReceiveValue ?? 0, inComponent: 0, animated: true)
        
        placeReceivePicker.reloadAllComponents()
        placeStorePicker.reloadAllComponents()
    }
    
    func presentSelectProvincePicker(viewModel: Place.Picker.ViewModel){
        
        guard let selectReceiveName = viewModel.selectReceiveName ,
              let selectStoreName = viewModel.selectStoreName else { return }
        
        confirmPlace?(selectReceiveName, selectStoreName)
        dismiss(animated: true, completion: nil)
    }
    
    func displayReceiverPicker(viewModel: Place.Picker.ViewModel) {
        datasourceReceiver.plantLocationList = viewModel.plantLocationList
        placeReceivePicker.selectRow(0, inComponent: 0, animated: true)
        placeReceivePicker.reloadAllComponents()
    }
    func displayStoragePicker(viewModel: Place.Picker.ViewModel) {
        datasourceStorage.locationList = viewModel.locationList
        placeStorePicker.selectRow(0, inComponent: 0, animated: true)
        placeStorePicker.reloadAllComponents()
    }
    
    @IBAction func cancelTapped(_ sender: Any) {
        dismiss(animated: true, completion: nil)
    }
    @IBAction func confirmTapped(_ sender: Any) {
        var selectStoreRow :StorageLocationModel?
        var selectReceiveRow : PlantResponse?
        
        for (key , value) in datasourceReceiver.receiverDidSelectRow {
            if key == placeReceivePicker {
                selectReceiveRow = value
            }
        }
        
        for (key , value) in datasourceStorage.didSelectRow {
            if key == placeStorePicker {
                selectStoreRow = value
            }
        }
        
        let request = Place.Picker.Request(selectReceiveRow: selectReceiveRow,
                                           selectStoreRow: selectStoreRow)
        
        interactor?.confirmSelectPlace(request: request)
    }
}
extension PlaceViewController {
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        registTapGesture()
    }
}

extension PlaceViewController : UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        switch  searchBar {
        case searchBarStorage:
            let request = Place.Picker.Request(filterName: searchText)
            interactor?.searchStorageName(request: request)
        case searchBarReceiver:
            let request = Place.Picker.Request(filterName: searchText)
            interactor?.searchReceiverName(request: request)
        default:
            break
        }
        
    }
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
    }
}
