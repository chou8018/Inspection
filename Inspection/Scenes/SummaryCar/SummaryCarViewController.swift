//
//  SummaryCarViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 4/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SummaryCarDisplayLogic: AnyObject
{
  func displayGrade(viewModel: SummaryCar.Something.ViewModel)
    func performPDF(viewModel: SummaryCar.Something.ViewModel)
    func displayResponseService(viewModel: SummaryCar.Something.ViewModel)
    func displayAlertMessage(viewModel: SummaryCar.Something.ViewModel)
    
    func displayErrorMessage(viewModel: SummaryCar.Something.ViewModel)
    
    func displayActionEventSuccess(viewModel: SummaryCar.Something.ViewModel)
    
    func displaySendInsectionIMATSuccess(viewModel: SummaryCar.Something.ViewModel)
    func displaySendInsectionIMATError(viewModel: SummaryCar.Something.ViewModel)
    
    
}

class SummaryCarViewController: UIViewController, SummaryCarDisplayLogic
{
  var interactor: SummaryCarBusinessLogic?
  var router: (NSObjectProtocol & SummaryCarRoutingLogic & SummaryCarDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SummaryCarInteractor()
    let presenter = SummaryCarPresenter()
    let router = SummaryCarRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    
  }
  
  // MARK: Do something
    @IBOutlet weak var sendButton: UIBarButtonItem!
    @IBOutlet weak var saveButton: UIBarButtonItem!
    
  //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var gradeLabel: UILabel!
    @IBOutlet weak var gradeDetailLabel: UILabel!
    
    @IBOutlet weak var chassiNumberLabel: UILabel!
    @IBOutlet weak var bodyNumberLabel: UILabel!
    @IBOutlet weak var carDetailLabel: UILabel!
    @IBOutlet weak var registrationLabel: UILabel!
    @IBOutlet weak var colorLabel: UILabel!
    @IBOutlet weak var companyLabel: UILabel!
    func doSomething()
  {
    let request = SummaryCar.Something.Request()
    interactor?.evaluateGrade(request: request)
  }
  
    //MARK: Prepare data
    func displayGrade(viewModel: SummaryCar.Something.ViewModel) {
        gradeLabel.text = viewModel.grade ?? "-"
        gradeDetailLabel.text = viewModel.gradeDetail

        carDetailLabel.text = viewModel.carName
        chassiNumberLabel.text = viewModel.engine
        bodyNumberLabel.text = viewModel.vinNumber
        companyLabel.text = viewModel.companyName
        colorLabel.text = viewModel.colorCar
        registrationLabel.text = viewModel.regis
    }
    
    @IBAction func toBackView(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    
    //MARK: Request
    func sendToServer(){
        let request = SummaryCar.Something.Request()
        interactor?.confirmSendToServer(request: request)
    }
    
    @IBAction func saveToIMAT(_ sender: Any){
        print("üî∂ save to IMAT")
        alert(message: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á\nInspection to IMAT ‡πÑ‡∏´‡∏°") { [weak self] in
            self?.sendToIMAT()
        }
    }
    
    @IBAction func printTapped(_ sender: Any) {
        alert(message: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏†‡∏≤‡∏û‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏´‡∏°") { [weak self] in
            self?.sendToServer()
        }
    }
    
    func performPDF(viewModel: SummaryCar.Something.ViewModel) {
        performSegue(withIdentifier: "pdfviewer", sender: nil)
    }
    
    func displayResponseService(viewModel: SummaryCar.Something.ViewModel) {
        //response service
       
        let request = SummaryCar.Something.Request()
        interactor?.showPDF(request: request)
    
    }
    
    //MARK: DisplayError
    
    func displayAlertMessage(viewModel: SummaryCar.Something.ViewModel) {
        guard let alertMessage = viewModel.alertMessage else { return }
        alertErrorMessageOKAction(message: alertMessage) {
            //ignored
        }
    }
    
    func displayErrorMessage(viewModel: SummaryCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.sendToServer()
        }
    }
    
    func validateInspectionIMAT(){
        let request = SummaryCar.Something.Request()
        interactor?.validateActionSendToInspectionIMAT(request: request)
    }
    
    
    func displayActionEventSuccess(viewModel: SummaryCar.Something.ViewModel) {
        sendButton.isEnabled = viewModel.isEnableSendToIMAP ?? false
        saveButton.isEnabled = viewModel.isEnableSave ?? false
    }
    
    //MARK: send to IMAT
    func sendToIMAT(){
        let request = SummaryCar.Something.Request()
        interactor?.confirmSendToInspectionIMAT(request: request)
    }
    
    func displaySendInsectionIMATError(viewModel: SummaryCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.sendToIMAT()
        }
    }
    
    func displaySendInsectionIMATSuccess(viewModel: SummaryCar.Something.ViewModel) {
        print("üî∂ displaySendInsectionIMATSuccess")
        alertErrorMessageOKAction(message: "Inspection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à") {
            //ignored
        }
    }
 
    
}



extension SummaryCarViewController {
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        validateInspectionIMAT()
    }
}
