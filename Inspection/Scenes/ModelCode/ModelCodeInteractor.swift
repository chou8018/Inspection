//
//  ModelCodeInteractor.swift
//  Inspection
//
//  Created by Thanawat prathumset on 9/3/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ModelCodeBusinessLogic
{
  func doSomething(request: ModelCode.Something.Request)
    func getModelCode(request: ModelCode.Something.Request)
    func getMakeCar(request: ModelCode.Something.Request)
    func getModelCar(request: ModelCode.Something.Request)
    func setUpYear(request: ModelCode.Something.Request)
    func selectYear(request: ModelCode.Something.Request)
    func selectMake(request: ModelCode.Something.Request)
    func selectModel(request: ModelCode.Something.Request)
    func validateKey(request: ModelCode.Something.Request)
    
    func searchModelCode(request: ModelCode.Something.Request)
    func searchModelCodeByCH(request: ModelCode.Something.Request)
    func searchModelCodeByDP(request: ModelCode.Something.Request)
    func editModelCode(request: ModelCode.Something.Request)
    
    
    func reloadResultSearch(request: ModelCode.Something.Request)
}

protocol ModelCodeDataStore
{
  //var name: String { get set }
    var editModelCodeTemplate : ModelCodeTemplateModel? { get set }
}

class ModelCodeInteractor: ModelCodeBusinessLogic, ModelCodeDataStore
{
    
    
  var presenter: ModelCodePresentationLogic?
  var worker: ModelCodeWorker?
  //var name: String = ""
    var year:String?
    var make:String?
    var model:String?
    
    
    enum ModelCodeType {
        case MOELCODE(_ code: String)
        case MOELCODE_BY_CH(_ code: String)
        case MOELCODE_BY_DP(_ code: String)
    }
    var modelCodeType : ModelCodeType?
  
    var editModelCodeTemplate : ModelCodeTemplateModel?
  // MARK: Do something
  
  func doSomething(request: ModelCode.Something.Request)
  {
//    worker = ModelCodeWorker()
//    worker?.doSomeWork()
    
    let response = ModelCode.Something.Response()
    presenter?.presentSomething(response: response)
  }
    
    func validateKey(request: ModelCode.Something.Request) {
        //search
        guard let _ = self.year,
              let _ = self.make,
              let _ = self.model else { return }
        
        
        let response = ModelCode.Something.Response()
        self.presenter?.presentValidateKey(response: response)
    }
    
    //MARK: getModelCode
    func getModelCode(request: ModelCode.Something.Request) {
        //search
        guard let year = self.year,
              let make = self.make,
              let model = self.model else { return }
        let keywords = (year , make , model)
        
        worker = ModelCodeWorker()
        worker?.searchModelCode(keyword: keywords, completion: {[weak self] (response) in
            self?.presenter?.presentSearchResult(response: response)
        })
    }
    
    //MARK: getMakeCar
    func getMakeCar(request: ModelCode.Something.Request) {
        
        worker = ModelCodeWorker()
        worker?.getMakeCar(completion: {[weak self] (response) in
            self?.presenter?.presentMakeCarResult(response: response)
        })
    }
    //MARK: getModelCar
    func getModelCar(request: ModelCode.Something.Request) {
        guard let make = self.make else { return }        
        worker = ModelCodeWorker()
        worker?.getModelCar(from: make, completion: {[weak self] (response) in
            self?.presenter?.presentModelCarResult(response: response)
        })
    }
    
    
    func selectYear(request: ModelCode.Something.Request){
        self.year = request.year
    }
    func selectMake(request: ModelCode.Something.Request){
        self.make = request.make
        self.model = nil
    }
    func selectModel(request: ModelCode.Something.Request){
        self.model = request.model
    }
    
    //MARK: Reload
    func reloadResultSearch(request: ModelCode.Something.Request) {
        guard let modelCodeType = self.modelCodeType else { return }
        switch modelCodeType {
        
        case .MOELCODE(let code):
            worker = ModelCodeWorker()
            worker?.searchModelCodeTemplate(form: code, completion: { [weak self] response in
                self?.presenter?.presentSearchResult(response: response)
            })
        case .MOELCODE_BY_CH(let code):
            worker = ModelCodeWorker()
            worker?.searchModelCodeTemplateByCH(form: code, completion: { [weak self] response in
                self?.presenter?.presentSearchResult(response: response)
            })
        case .MOELCODE_BY_DP(let code):
            worker = ModelCodeWorker()
            worker?.searchModelCodeTemplateByDisplay(form: code, completion: { [weak self] response in
                self?.presenter?.presentSearchResult(response: response)
            })
        }
    }
    
    //MARK: Search Model Code
    func searchModelCode(request: ModelCode.Something.Request) {
        guard let modelCode = request.modelCode else { return }
        self.modelCodeType = .MOELCODE(modelCode)
        
        worker = ModelCodeWorker()
        worker?.searchModelCodeTemplate(form: modelCode, completion: { [weak self] response in
            self?.presenter?.presentSearchResult(response: response)
        })
        
    }
    //MARK: Search Model Code by CH
    func searchModelCodeByCH(request: ModelCode.Something.Request) {
        guard let modelCode = request.modelCode else { return }
        self.modelCodeType = .MOELCODE_BY_CH(modelCode)
        
        worker = ModelCodeWorker()
        worker?.searchModelCodeTemplateByCH(form: modelCode, completion: { [weak self] response in
            self?.presenter?.presentSearchResult(response: response)
        })
        
    }
    //MARK: Search Model Code by DP
    func searchModelCodeByDP(request: ModelCode.Something.Request) {
        guard let modelCode = request.modelCode else { return }
        self.modelCodeType = .MOELCODE_BY_DP(modelCode)
        
        worker = ModelCodeWorker()
        worker?.searchModelCodeTemplateByDisplay(form: modelCode, completion: { [weak self] response in
            self?.presenter?.presentSearchResult(response: response)
        })
    }
    
    
    //MARK: EditModelCode
    func editModelCode(request: ModelCode.Something.Request) {
        self.editModelCodeTemplate = request.modelCodeTemplate
        
        presenter?.presentEditModelCode(response: ModelCode.Something.Response())
    }
    
    
    
    
    
    //MARK: get year
    func setUpYear(request: ModelCode.Something.Request) {
        let yearsList = getYears(from: request.starterYear ?? 1980)
        let response = ModelCode.Something.Response(yearList: yearsList)
        presenter?.presentYearCarResult(response: response)
    }
    
    fileprivate func getYears(from starterYear: Int) -> [String] {
        let df = DateFormatter()
        let years = df.years(starterYear...Date().year)
            .sorted(by: { $0 > $1 })
            //.map({ $0.toInt() + 543 })
            //.map({ $0.toString() })
            
        return years
    }
    
    
}
