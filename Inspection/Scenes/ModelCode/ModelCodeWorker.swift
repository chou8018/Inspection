//
//  ModelCodeWorker.swift
//  Inspection
//
//  Created by Thanawat prathumset on 9/3/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

typealias modelCodeHandler = ((ModelCode.Something.Response)->())
class ModelCodeWorker
{
    //MARK: Search
    func searchModelCode(keyword: (String,String,String), completion: @escaping modelCodeHandler){
        
        showLoading()
        let year = keyword.0.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!
        let make = keyword.1.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!
        let model = keyword.2.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!
        let request = SearchCodeRequest(year: year,
                                        make: make,
                                        model: model)
        SearchCodeService().callServiceArray(request: request) { (response) in
            
            hideLoading()
            
            switch response {
            case .success(let response):
                let isItem = (response.count ) > 0
                let response = ModelCode.Something.Response(tableType: isItem ? .Found : .NotFound,
                                                            searchItemList: response)
                completion(response)
            case .failure(let error):
                let response = ModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    //MARK: Make
    func getMakeCar(completion: @escaping modelCodeHandler) {
        
        showLoading()
        
        let request = BaseRequest()
        MakeCarService().callServiceArray(request: request) { (response) in
            
            hideLoading()
            
            switch response {
            case .success(let response):
                let response = ModelCode.Something.Response(makeList: response)
                completion(response)
            case .failure(let error):
                let response = ModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    //MARK: Model
    func getModelCar(from make:String , completion: @escaping modelCodeHandler) {
        
        showLoading()
        
        let makeEnc = make.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!
        
        let request = ModelCarRequest(make: makeEnc)
        
        ModelCarService().callServiceArray(request: request) { (response) in
            
            hideLoading()
            
            switch response {
            case .success(let response):
                let response = ModelCode.Something.Response(modelList: response)
                completion(response)
            case .failure(let error):
                let response = ModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    
    
    //MARK: Model Code
    func searchModelCodeTemplate(form modelCode:String?, completion: @escaping modelCodeHandler) {
        guard let modelCode = modelCode, !modelCode.trimWhiteSpace.isEmpty else { return }
        
        showLoading()
        
        let request = SearchModelRequest(strValue1: modelCode)
        ModelCodeTemplateService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            case .success(let itemList):
                let isItem = (itemList.count ) > 0
                let response = ModelCode.Something.Response(tableType: isItem ? .Found : .NotFound,
                                                            modelCodeTemplateList: itemList)
                completion(response)
            case .failure(let error):
                let response = ModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    
    //MARK: Model Code by CH
    func searchModelCodeTemplateByCH(form modelCode:String?, completion: @escaping modelCodeHandler) {
        
        guard let modelCode = modelCode, !modelCode.trimWhiteSpace.isEmpty else { return }
        showLoading()
        
        let request = SearchModelRequest(strValue1: modelCode)
        SearchModelCodeTempleteByCHService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            case .success(let itemList):
                let isItem = (itemList.count ) > 0
                let response = ModelCode.Something.Response(tableType: isItem ? .Found : .NotFound,
                                                            modelCodeTemplateList: itemList)
                completion(response)
            case .failure(let error):
                let response = ModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    //MARK: Model Code by Display
    func searchModelCodeTemplateByDisplay(form modelCode:String?, completion: @escaping modelCodeHandler) {
        
        guard let modelCode = modelCode, !modelCode.trimWhiteSpace.isEmpty else { return }
        showLoading()
        
        let request = SearchModelRequest(strValue1: modelCode)
        SearchModelCodeTemplateByDPService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            case .success(let itemList):
                let isItem = (itemList.count ) > 0
                let response = ModelCode.Something.Response(tableType: isItem ? .Found : .NotFound,
                                                            modelCodeTemplateList: itemList)
                completion(response)
            case .failure(let error):
                let response = ModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
}
