//
//  ReceiverCarWorker.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

typealias responseCompanyHandler = (ReceiverCar.Something.Response)->()
class ReceiverCarWorker
{
    func fetchCompany(completion: @escaping responseCompanyHandler)
      {
        
        showLoading()
        
        let request = BaseRequest()
        SellerService().callServiceArray(request: request) { (result) in
           
            hideLoading()
            
            switch result {
            
            case .success(let response):
                completion(ReceiverCar.Something.Response(sellerList: response))
            case .failure(let kError):
                let kErrorMessage = kError.getMessage
                completion(ReceiverCar.Something.Response(error : kErrorMessage))
            }
        }
      }
    
    
    func getPlantLocation(completion: @escaping responseCompanyHandler){
        showLoading()
        
        let request = BaseRequest()
        PlantService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            
            case .success(let response):
                let response = ReceiverCar.Something.Response(plantLocations : response)
                completion(response)
            case .failure(let error):
                let response = ReceiverCar.Something.Response(error : error.getMessage)
                completion(response)
            }
        }
    }
    
    //MARK: Sell cate
    func fetchSellCate(completion: @escaping responseCompanyHandler){
        showLoading()
        
        let request = BaseRequest()
        SellCateService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            
            case .success(let response):
                let response = ReceiverCar.Something.Response(sellCategory : response)
                completion(response)
            case .failure(let error):
                let response = ReceiverCar.Something.Response(error : error.getMessage)
                completion(response)
            }
        }
    }
}
