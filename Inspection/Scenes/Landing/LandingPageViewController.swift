//
//  LandingPageViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 1/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LandingPageDisplayLogic: AnyObject
{
    func displaySomething(viewModel: LandingPage.Something.ViewModel)
    func displayErrorMessage(viewModel: LandingPage.Something.ViewModel)
}

class LandingPageViewController: ViewController, LandingPageDisplayLogic
{
  var interactor: LandingPageBusinessLogic?
  var router: (NSObjectProtocol & LandingPageRoutingLogic & LandingPageDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LandingPageInteractor()
    let presenter = LandingPagePresenter()
    let router = LandingPageRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    setUp()
    fetchStandardMake()
  }
  
  // MARK: Do something
  
    @IBOutlet weak var helloNameLabel: UILabel!
    @IBOutlet weak var startInspectionView: CustomUIView!
    @IBOutlet weak var listInspectionView: CustomUIView!
    @IBOutlet weak var versionLabel: UILabel!
    
    // translate
    @IBOutlet weak var inspectionLabel: UILabel!
    @IBOutlet weak var listInspectionLabel: UILabel!
    @IBOutlet weak var logOutButton: CustomUIButton!
    @IBOutlet weak var switchLanguageButton: CustomUIButton!

    override func initLocalString() {
        super.initLocalString()
        inspectionLabel.text = String.localized("select_inspection_label")
        listInspectionLabel.text = String.localized("select_inspection_list_label")
        logOutButton.setTitle(String.localized("select_inspection_log_out"), for: .normal)
        updateUI()
        
        if let language = UserDefaults.getCurrentLanguage() {
            switchLanguageButton.setTitle(language, for: .normal)
        } else {
            if DataController.shared.isThaiLanguage() {
                switchLanguageButton.setTitle("TH", for: .normal)
            } else {
                switchLanguageButton.setTitle("EN", for: .normal)
            }
        }
    }
    
    func fetchStandardMake(){
        
        let request = LandingPage.Something.Request()
        interactor?.fetchStandardMake(request: request)
    }
    
    func displayErrorMessage(viewModel: LandingPage.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.fetchStandardMake()
        }
    }
  
    
  func displaySomething(viewModel: LandingPage.Something.ViewModel)
  {
    print("get standard list success")
  }
    @IBAction func logoutTapped(_ sender: Any) {
        let message = String.localized("select_inspection_log_out_dialog_message")
        let alertController = UIAlertController(title: String.localized("select_inspection_log_out_dialog_title"), message: message, preferredStyle: .alert)
        let confirmAction = UIAlertAction(title: String.localized("select_inspection_dialog_yes"), style: .destructive, handler: {[weak self]  _ in
            DataController.shared.clearLogin()
            self?.performLogin()
        })
        let cancelAction = UIAlertAction(title: String.localized("select_inspection_dialog_no"), style: .default, handler: {  _ in

        })
        
        alertController.addAction(cancelAction)
        alertController.addAction(confirmAction)
        
        self.present(alertController, animated: true, completion: nil)
        
    }
    
    func updateUI(){
        helloNameLabel.text = "\(String.localized("select_inspection_hello_label")) \(DataController.shared.getFullName())"
    }
    func setUp(){
        versionLabel.text = DataController.shared.getVersion()
        
        startInspectionView.isUserInteractionEnabled = true
        startInspectionView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(startInspection)))
        listInspectionView.isUserInteractionEnabled = true
        listInspectionView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showListInspection)))
        
    }
    @objc func startInspection(){
        performSegue(withIdentifier: "selectInspectionSegue", sender: nil)
    }
    
    @objc func showListInspection(){
        performSegue(withIdentifier: "inspectionListSegue", sender: nil)
    }

    func performLogin(){
        performSegue(withIdentifier: "performLogin", sender: nil)
    }
    
    @IBAction func switchLanguage(_ sender: CustomUIButton) {
        
        var showText = ""
        if let language = UserDefaults.getCurrentLanguage() {
            if language == "EN" {
                UserDefaults.saveCurrentLanguage(value: "TH")
                showText = "TH"
            } else {
                UserDefaults.saveCurrentLanguage(value: "EN")
                showText = "EN"
            }
        } else {
            if DataController.shared.isThaiLanguage() {
                UserDefaults.saveCurrentLanguage(value: "EN")
                showText = "EN"
            } else {
                UserDefaults.saveCurrentLanguage(value: "TH")
                showText = "TH"
            }
        }
        sender.setTitle(showText, for: .normal)
        initLocalString()
        
        DataController.shared.showTipView(sender: sender, superView: self.view, message: "Change to \(showText) language successed!")
    }
}

extension LandingPageViewController {
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        updateUI()
    }
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        if !DataController.shared.isLogin() {
            performLogin()
        }
    }
}
