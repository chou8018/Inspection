//
//  BookInMotorcycle2Interactor.swift
//  Inspection
//
//  Created by Thanawat Pratumsat on 23/8/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BookInMotorcycle2BusinessLogic
{
  func doSomething(request: BookInMotorcycle2.Something.Request)
    func validateMileNumber(request: BookInMotorcycle2.Something.Request)
    func keyCheck(request: BookInMotorcycle2.Something.Request)
    func remoteCheck(request: BookInMotorcycle2.Something.Request)
    func remoteKeyCheck(request: BookInMotorcycle2.Something.Request)
    func immobilizerKeyCheck(request: BookInMotorcycle2.Something.Request)
    
    
    func fetchGearBox(request: BookInMotorcycle2.Something.Request)
    func selectGearBox(request: BookInMotorcycle2.Something.Request)
    func prepareGearBox(request: BookInMotorcycle2.Something.Request)
}

protocol BookInMotorcycle2DataStore
{
  //var name: String { get set }
}

class BookInMotorcycle2Interactor: BookInMotorcycle2BusinessLogic, BookInMotorcycle2DataStore
{
  var presenter: BookInMotorcycle2PresentationLogic?
  var worker: BookInMotorcycle2Worker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: BookInMotorcycle2.Something.Request)
  {
    worker = BookInMotorcycle2Worker()
    worker?.doSomeWork()
    
    let response = BookInMotorcycle2.Something.Response()
    presenter?.presentSomething(response: response)
  }
    
    var oldValue = ""
    func validateMileNumber(request: BookInMotorcycle2.Something.Request) {
        guard let miles = request.miles  else { return }
        let newValue = miles.replacingOccurrences(of: ",", with: "")
        let isValid = newValue.isValidNumber()
        var validateResult = isValid ? newValue.decimal : oldValue
        validateResult  = validateResult == "0" ? "" : validateResult
        
        oldValue = validateResult
        
        let response = BookInMotorcycle2.Something.Response(validateMilesNumber: validateResult)
        presenter?.presentValidateMilesNumber(response: response)
    }
    
    func keyCheck(request: BookInMotorcycle2.Something.Request) {
        let value = request.keyCheck
        let isValue = value?.trimWhiteSpace.isEmpty ?? false
        let response = BookInMotorcycle2.Something.Response(isKeyCheck : !isValue)
        presenter?.presentKeyChecked(response: response)
        
    }
    
    func remoteCheck(request: BookInMotorcycle2.Something.Request) {
        let value = request.remoteCheck
        let isValue = value?.trimWhiteSpace.isEmpty ?? false
        let response = BookInMotorcycle2.Something.Response(isRemoteCheck : !isValue)
        presenter?.presentRemoteChecked(response: response)
    }
    
    func remoteKeyCheck(request: BookInMotorcycle2.Something.Request) {
        let value = request.remoteKeyCheck
        let isValue = value?.trimWhiteSpace.isEmpty ?? false
        let response = BookInMotorcycle2.Something.Response(isRemoteKeyCheck : !isValue)
        presenter?.presentRemoteKeyChecked(response: response)
    }
    
    func immobilizerKeyCheck(request: BookInMotorcycle2.Something.Request) {
        let value = request.immobilizerKeyCheck
        let isValue = value?.trimWhiteSpace.isEmpty ?? false
        let response = BookInMotorcycle2.Something.Response(isImmobilizerKeyCheck : !isValue)
        presenter?.presentImmobilizerKeyChecked(response: response)
    }
    
    

    //MARK: GearBox
    var workerModelCode:CreateModelCodeWorker?
    var gearBoxList: [GearBoxModel]?
    
    
    func fetchGearBox(request: BookInMotorcycle2.Something.Request) {
        workerModelCode = CreateModelCodeWorker()
        workerModelCode?.getGearBox(completion: { [weak self] response in
            if let modelList = response.gearBoxList {
                self?.gearBoxList = modelList
            }
            
            let responseCabin = BookInMotorcycle2.Something.Response(gearBoxList: response.gearBoxList, error: response.error)
            
            self?.presenter?.presentGearBoxList(response: responseCabin)
            
              
        })
    }
    
    func prepareGearBox(request: BookInMotorcycle2.Something.Request) {
        ///prepare gearbox value
        guard let gearbox = request.codeGearBox else { return }

        let editGearBox = self.gearBoxList?.first(where: { $0.gearBox1?.trimWhiteSpace == gearbox.trimWhiteSpace })?.desc_BU
        
        let response = BookInMotorcycle2.Something.Response(gearBox_BU: editGearBox)
        self.presenter?.presentGearBoxText(response: response)
    }
    
    func selectGearBox(request: BookInMotorcycle2.Something.Request) {
        guard let value = request.selectGearbox else { return }
        if let selectModel = self.gearBoxList?.first(where: { $0.desc_BU == value}) {
            print("ðŸ§€ gearbox = \(selectModel)")
 
            DataController.shared.receiverCarModel.gearbox = selectModel.gearBox1
        }
    }
    
    
}
