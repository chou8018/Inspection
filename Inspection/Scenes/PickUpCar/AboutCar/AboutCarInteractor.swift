//
//  AboutCarInteractor.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AboutCarBusinessLogic
{
  func doSomething(request: AboutCar.Something.Request)
    func setUpYear(request: AboutCar.Something.Request)
    func checkGasNUmber(request: AboutCar.Something.Request)
    func validateCapacityNumber(request: AboutCar.Something.Request)
    
    func receiverModelCode(request: AboutCar.Something.Request)
    func getMakeCar(request: AboutCar.Something.Request)
    func getModelCar(request: AboutCar.Something.Request)
    func getColorCar(request: AboutCar.Something.Request)
    func getProvince(request: AboutCar.Something.Request)
    func getCarType(request: AboutCar.Something.Request)
    
    func selectMake(request: AboutCar.Something.Request)
    func setColour1(request: AboutCar.Something.Request)
    func setProvince1(request: AboutCar.Something.Request)
    func setCarType(request: AboutCar.Something.Request)
    
    
    func selectModelCar(request: AboutCar.Something.Request)
    
    func setCarTypeCode(request: AboutCar.Something.Request)
    func setMakeCode(request: AboutCar.Something.Request)
    
    func getVaraintCar(request: AboutCar.Something.Request)
    func selectVaraintCar(request: AboutCar.Something.Request)
    
    func validateRegistration(request: AboutCar.Something.Request)
}

protocol AboutCarDataStore
{
  //var name: String { get set }
}

class AboutCarInteractor: AboutCarBusinessLogic, AboutCarDataStore
{
  var presenter: AboutCarPresentationLogic?
  var worker: AboutCarWorker?
    var workerModelCode: ModelCodeWorker?
  //var name: String = ""
    var make: String?
    var standardColorList: [StandardColorModel]?
    var provinceList: [ProvinceModel]?
    
//    var bodyCarList: [BodyTypeModel]?
    var bodyCarList: [BodyCarModel]?
    
    
    var modelList: [JatoCarModelsModel]?
    var makeList:[StandradMakeModel]?
    
    var model_bu: String?
    
    // MARK: Do something
  func doSomething(request: AboutCar.Something.Request)
  {
    worker = AboutCarWorker()
    worker?.doSomeWork()
    
    let response = AboutCar.Something.Response()
    presenter?.presentSomething(response: response)

  }
    
    func setUpYear(request: AboutCar.Something.Request) {
        let yearsList = getYears(from: request.starterYear ?? 1980)
        let response = AboutCar.Something.Response(yearLists: yearsList)
        presenter?.presentDropdownYear(response: response)
    }
    

    func checkGasNUmber(request: AboutCar.Something.Request) {
        let gasNumber = request.gasNumber
        
        let isGasNUmber = gasNumber?.trimWhiteSpace.isEmpty ?? false

        let response = AboutCar.Something.Response(isGasNumber : !isGasNUmber )
        presenter?.presentIsGasNumber(response: response)
    }
    
    var oldValue = ""
    func validateCapacityNumber(request: AboutCar.Something.Request) {
        guard let capacityNumber = request.capacityNumber  else { return }
        let newValue = capacityNumber.replacingOccurrences(of: ",", with: "")
        
//        if newValue == "" {
//            let response = AboutCar.Something.Response(validateResult : "")
//            presenter?.presentValidateCapacityNumber(response: response)
//            return
//        }
        let isValid = newValue.isValidNumber()
        var validateResult = isValid ? newValue : oldValue
        validateResult  = validateResult == "0" ? "" : validateResult
        
        oldValue = validateResult
        
        let response = AboutCar.Something.Response(validateResult : validateResult)
        presenter?.presentValidateCapacityNumber(response: response)
        
    }
    
    func selectModelCar(request: AboutCar.Something.Request) {
        guard let modelCar = request.modelCar else { return }
        self.model_bu = modelCar
        DataController.shared.receiverCarModel.modelCar = modelCar
        DataController.shared.receiverCarModel.model_BU = getModelCarEng(from: modelCar)
        DataController.shared.receiverCarModel.model_LO = getModelCarTh(from: modelCar)
    }
    
    func receiverModelCode(request: AboutCar.Something.Request) {
        guard let searchCodeModel = request.searchCodeModel else { return }
        
        DataController.shared.receiverCarModel.model_BU = searchCodeModel.model_BU
        DataController.shared.receiverCarModel.model_LO = searchCodeModel.model_LO
        
        let response = AboutCar.Something.Response(searchCodeModel: searchCodeModel)
        presenter?.presentModelCarSelected(response: response)
    }
//MARK: Get Make
    var workerMake: LandingPageWorker?
    
    func getMakeCar(request: AboutCar.Something.Request) {
        workerMake = LandingPageWorker()
        workerMake?.fetchStandardMakeList(completion: { [weak self] results in
            if let error = results.error {
                
                let response = AboutCar.Something.Response(error: error)
                self?.presenter?.presentMakeCarList(response: response)
            }else{
                guard let itemList = results.standardMakeList else { return }
                self?.makeList =  itemList
                
                let response = AboutCar.Something.Response(makeList: itemList)
                self?.presenter?.presentMakeCarList(response: response)
                
            }
        })
    }
    func selectMake(request: AboutCar.Something.Request) {
        guard let make = request.make else { return }
        self.make = make
        
//        let standardMake1 = getStandardMake1ID(from: make)
        
        
        if let makeModel = makeList?.filter({ $0.desc_BU == make }).first {
            DataController.shared.receiverCarModel.make1 = makeModel.make1
            DataController.shared.receiverCarModel.make_BU = makeModel.desc_BU
            DataController.shared.receiverCarModel.make_LO = makeModel.desc_LO
            
            print("❤️ make1 = \(makeModel)")
        }
        
        
    }
    
    
    func setMakeCode(request: AboutCar.Something.Request) {
        guard let makeCode = request.makeCode else { return }
        if let makeList = self.makeList {
            if let model = makeList.first(where: { $0.make1 == makeCode }) {
                print("❤️ select make =  \(model) ")
                DataController.shared.receiverCarModel.make1 = model.make1
                DataController.shared.receiverCarModel.make_BU = model.desc_BU
                DataController.shared.receiverCarModel.make_LO = model.desc_LO
                
                let response = AboutCar.Something.Response(make_bu: model.desc_BU)
                presenter?.presentMakeSelect(response: response)
            }
        }
    }
    
    func setColour1(request: AboutCar.Something.Request) {
        guard let colorCar = request.colorCar else { return }
        let modelColor = getStandardColor1ID(from: colorCar)
        DataController.shared.receiverCarModel.cid = modelColor?.cid
        DataController.shared.receiverCarModel.colour_BU = modelColor?.colour_BU
        DataController.shared.receiverCarModel.colour_LO = modelColor?.colour_LO
        print("❤️ cid = \(modelColor?.toJSON() ?? [:])")
    }
    func setProvince1(request: AboutCar.Something.Request){
        guard let province = request.province else { return }
        let state1 = getState1ID(from: province)
        DataController.shared.receiverCarModel.state1 = state1
        print("❤️ state1 = \(state1 ?? "nil")")
    }
    func setCarType(request: AboutCar.Something.Request) {
        guard let typeCar = request.typeCar else { return }
        
        if let bodyCarList = bodyCarList {
            let body = bodyCarList.first(where: { $0.desc_BU == typeCar })?.body1
            DataController.shared.receiverCarModel.body = body
            
            print("❤️ select typeCar =  \(typeCar) bodyTypeCode=\(body ?? "")")
        }
        
        
    }
    func setCarTypeCode(request: AboutCar.Something.Request) {
        guard let typeCarCode = request.typeCarCode else { return }
        
        
        if let bodyCarList = bodyCarList {
            if let model = bodyCarList.first(where: { $0.body1 == typeCarCode }) {
                print("❤️ select typeCar =  \(model) ")
                DataController.shared.receiverCarModel.body = model.body1
                DataController.shared.receiverCarModel.bodyDesc_BU = model.desc_BU
                DataController.shared.receiverCarModel.bodyDesc_LO = model.desc_LO
                
                let response = AboutCar.Something.Response(body_bu: model.desc_BU)
                presenter?.presentBodySelect(response: response)
            }
        }
        
        
    }
    var workModelCode: CreateModelCodeWorker?
    
    //MARK: Get Model
    func getModelCar(request: AboutCar.Something.Request) {
        guard let _ = self.make else { return }
        workModelCode = CreateModelCodeWorker()
        workModelCode?.getJatoModels(completion: {[weak self] result in
            if let modelList = result.jatoCarModelList {
                self?.modelList = modelList
            }
            let response = AboutCar.Something.Response(modelList : self?.modelList,
                                                       error: result.error)
            self?.presenter?.presentModelCarList(response: response)
        })
        
    }
    
    var jatoVaraintsList:[JatoVaraintsModel]?
    func getVaraintCar(request: AboutCar.Something.Request) {
        guard let model_bu = self.model_bu else { return }
        workModelCode = CreateModelCodeWorker()
        workModelCode?.getJatoVaraints(form: model_bu, completion: {[weak self] results in
            if let modelList = results.jatoVaraintsList {
                self?.jatoVaraintsList = modelList
            }
            
            let response = AboutCar.Something.Response(varaintsList : self?.jatoVaraintsList,
                                                       error: results.error)
            self?.presenter?.presentVariantsList(response: response)
        })
    }
    
    func selectVaraintCar(request: AboutCar.Something.Request) {
        guard let variants = request.varaints_bu else { return }
        if let modelList = self.jatoVaraintsList {
            if let model = modelList.first(where: { $0.variants == variants}) {
                DataController.shared.receiverCarModel.variants = model.variants
                print("🔸 variants \(model)")
            }
        }
        
    }
    
    
    
    //MARK: Get Color
    func getColorCar(request: AboutCar.Something.Request) {
        worker = AboutCarWorker()
        worker?.fetchColor(completion: { [weak self] (response) in
            self?.presenter?.presentColorCarList(response: response)
            
            if let colorList = response.colorList {
                self?.standardColorList = colorList
            }
            
        })
    }
    //MARK: Get Province
    func getProvince(request: AboutCar.Something.Request) {
        worker = AboutCarWorker()
        worker?.fetchProvince(completion: { [weak self] (response) in
            self?.presenter?.presentProvinceList(response: response)
            
            if let provinceList = response.provinceList {
                self?.provinceList = provinceList
            }
        })
    }
    //MARK: Get Body
    func getCarType(request: AboutCar.Something.Request) {
        worker = AboutCarWorker()
        worker?.fetchBodyCar(completion: { [weak self] (response) in
            self?.presenter?.presentBodyList(response: response)
            
            if let bodyList = response.bodyList {
                self?.bodyCarList = bodyList
            }
        })
    }
    
    
    func validateRegistration(request: AboutCar.Something.Request) {
        guard var text = request.registration else { return }
        
        print("👾  input: \(text)")
       
        let newvar = text as NSString
        var arrayString:[String] = []
        for i in 0..<newvar.length {
            let character = Character(UnicodeScalar(newvar.character(at: i))!)
            print("👾 character: \(character)")
            arrayString.append(String(character))
        }

        text = arrayString
            .filter({ $0.isValidCharactor() })
            .reduce("", { $0 + $1 })
        
        print("🧀 filter input: \(text)")
        var startPath = text.first?.description ?? ""
        var trailPath = ""
        text.enumerated().forEach { (i, str) in
            if i > 0 {
                if Int(str.description) == nil {
                    startPath += str.description
                }else{
                    trailPath += str.description
                }
            }
        }
        //print("🔸 startPath: \(startPath) trailPath: \(trailPath)")
        
        var resultText = startPath
        if !trailPath.isEmpty {
            resultText += "-"
            resultText += trailPath
        }

        print("🧀 result: \(resultText)")
        
        let response = AboutCar.Something.Response(resultRegistration: resultText)
        presenter?.presentValidRegistration(response: response)
    }
    
    //MARK: Get year
    fileprivate func getYears(from starterYear: Int) -> [String] {
        let df = DateFormatter()
        let years = df.years(starterYear...Date().year)
            .sorted(by: { $0 > $1 })
            //.map({ $0.toInt() + 543 })
            //.map({ $0.toString() })
            
        return years
    }

    
    fileprivate func getStandardColor1ID(from colorValue:String) -> StandardColorModel? {
        guard let standardColorList = standardColorList else { return nil }
        
        return standardColorList.filter { colorValue == ("\($0.colour_BU ?? "") (\($0.colour_LO ?? ""))") }.first
        if !DataController.shared.isThaiLanguage() {
            return standardColorList.filter { colorValue == ("\($0.colour_BU ?? "")") }.first
        } else {
            return standardColorList.filter { colorValue == ("\($0.colour_BU ?? "") (\($0.colour_LO ?? ""))") }.first
        }
 
    }
    fileprivate func getState1ID(from province:String) -> String? {
        guard let provinceList = provinceList else { return nil }
        return provinceList.filter { province == $0.desc_LO ?? "" }.first?.state1

//        if !DataController.shared.isThaiLanguage() {
//            return provinceList.filter { province == $0.desc_BU ?? "" }.first?.state1
//        } else {
//            return provinceList.filter { province == $0.desc_LO ?? "" }.first?.state1
//        }
        
    }
    fileprivate func getModelCarEng(from desc:String) -> String? {
        guard let modelList = modelList else { return nil }
        let model = modelList.filter { desc == $0.model_BU ?? "" }.first
        return model?.model_BU
    }
    fileprivate func getModelCarTh(from desc:String) -> String? {
        guard let modelList = modelList else { return nil }
        let model = modelList.filter { desc == $0.model_BU ?? "" }.first
        return model?.model_LO
    }
}
