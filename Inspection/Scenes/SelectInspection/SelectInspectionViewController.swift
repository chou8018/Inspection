//
//  SelectInspectionViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 2/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol SelectInspectionDisplayLogic: AnyObject
{
  func displayResultTextPlace(viewModel: SelectInspection.Default.ViewModel)
    func displayResultTextPlacePlant(viewModel: SelectInspection.Default.ViewModel)
    func displayErrorMessage(viewModel: SelectInspection.Default.ViewModel)
    func displayPlantErrorMessage(viewModel: SelectInspection.Default.ViewModel)
}

class SelectInspectionViewController: UIViewController, SelectInspectionDisplayLogic
{
  var interactor: SelectInspectionBusinessLogic?
  var router: (NSObjectProtocol & SelectInspectionRoutingLogic & SelectInspectionDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SelectInspectionInteractor()
    let presenter = SelectInspectionPresenter()
    let router = SelectInspectionRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
        
        if let destination = segue.destination as? PlaceViewController {
            destination.confirmPlace =  { [weak self] (receive , store ) in
                let request = SelectInspection.Default.Request(selectReceiveName: receive,
                                                               selectStoreName: store)
                self?.interactor?.comfirmPlace(request: request)
            }
        }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setUp()
    fetchAllLocations()
    getLocationName()
  }
  
  // MARK: Do something
  
  

    @IBOutlet weak var fullName: UILabel!
    
    @IBOutlet weak var plantLabel: UILabel!
    @IBOutlet weak var placeLabel: UILabel!
    @IBOutlet weak var placeImageView: UIImageView!
    @IBOutlet weak var carSelectView: CustomUIView!
    
    @IBOutlet weak var motorbikeSelectView: CustomUIView!
    @IBOutlet weak var destroyCarSelectView: CustomUIView!
    @IBOutlet weak var destroyMBSelectView: CustomUIView!
    
    @IBOutlet weak var loadingStackView:UIStackView!
    
    func fetchLocation()
  {
        
        let request = SelectInspection.Default.Request()
        interactor?.fetchLocation(request: request)
  }

    func fetchPlantLocation(){
        let request = SelectInspection.Default.Request()
        interactor?.fetchPlantLocation(request: request)
    }
    
    var isFetchLocation = false
    var isFetchPlantLocation = false
    
    func fetchAllLocations(){
        
        if !isFetchLocation {
            fetchLocation()
        }
        
        if !isFetchPlantLocation {
            fetchPlantLocation()
        }
    }
  
  
    func displayResultTextPlace(viewModel: SelectInspection.Default.ViewModel) {
    
        guard let resultText = viewModel.resultTextPlace else { return }
        isFetchLocation = true
        placeLabel.attributedText = resultText
        
    }
    func displayResultTextPlacePlant(viewModel: SelectInspection.Default.ViewModel) {
        guard let resultText = viewModel.resultTextPlace else { return }
        isFetchPlantLocation = true
        plantLabel.attributedText = resultText
        placeImageView.isHidden = !viewModel.isCanSelect
        placeLabel.isUserInteractionEnabled = viewModel.isCanSelect
        plantLabel.isUserInteractionEnabled = viewModel.isCanSelect
    }
    
    func displayErrorMessage(viewModel: SelectInspection.Default.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.fetchAllLocations()
        }
    }
    func displayPlantErrorMessage(viewModel: SelectInspection.Default.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.fetchAllLocations()
        }
    }
    
    
    @IBAction func backtoHomeTapped(_ sender: Any) {
        navigationController?.popToRootViewController(animated: true)
    }
    //MARK: SetUo
    func setUp(){
        fullName.text = "ผู้ตรวจสภาพ \(DataController.shared.getFullName())"
        
        placeLabel.isUserInteractionEnabled = true
        placeLabel.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showPlace)))
        
        plantLabel.isUserInteractionEnabled = true
        plantLabel.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showPlace)))
        
        placeImageView.isUserInteractionEnabled = true
        placeImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showPlace)))
        
        
        //MARK: SELECT BOOKIN TYPE
        carSelectView.isUserInteractionEnabled = true
        carSelectView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showPickupCar)))
        
        motorbikeSelectView.isUserInteractionEnabled = true
        motorbikeSelectView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showPickupMotorbike)))
        
        destroyCarSelectView.isUserInteractionEnabled = true
        destroyCarSelectView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showPickupCarWreck)))
        
        destroyMBSelectView.isUserInteractionEnabled = true
        destroyMBSelectView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(showPickupMotorBikeWreck)))
    }
    
    @objc func showPlace(){
        performSegue(withIdentifier: "showPlaceSegue", sender: nil)
    }
    
    @objc func showPickupCar(){
        DataController.shared.bookInType = .CAR
        performSegue(withIdentifier: "inspectionCarSegua", sender: nil)
    }
    @objc func showPickupMotorbike(){
        DataController.shared.bookInType = .MBIKE
        performSegue(withIdentifier: "inspectionCarSegua", sender: nil)
    }
    @objc func showPickupCarWreck(){
        DataController.shared.bookInType = .CARWRECK
        performSegue(withIdentifier: "inspectionCarSegua", sender: nil)
    }
    @objc func showPickupMotorBikeWreck(){
        DataController.shared.bookInType = .MBIKEWRECK
        performSegue(withIdentifier: "inspectionCarSegua", sender: nil)
    }
    
    @IBAction func toBackView(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    @IBAction func toRootView(_ sender: Any) {
        popToRootViewController(confirm: false)
    }
    
    
    func getLocationName(){
        LocationManager.shared.getLocationName {[weak self] locationName,location  in
            self?.setLocationName(locationName, location: location)
            
//            let loc1 = CLLocation(latitude: userLocation.coordinate.latitude, longitude: userLocation.coordinate.longitude)
//                var distance = loc1.distance(from: loc2)
//                print((distance/1000).rounded(), " km")
        }
    }
    func setLocationName(_ locationName:String?, location: CLLocation?){
        loadingStackView.fadeOut(0.5, onCompletion: { [weak self] in
            let request = SelectInspection.Default.Request(locationName: locationName)
            self?.interactor?.setLocationName(request: request, location: location)
        })
        
    }

}
