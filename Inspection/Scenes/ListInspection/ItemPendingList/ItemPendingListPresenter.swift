//
//  ItemPendingListPresenter.swift
//  Inspection
//
//  Created by Thanawat prathumset on 3/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemPendingListPresentationLogic
{
  func presentFetchResult(response: ItemPendingList.Fetch.Response)
    func presentItemSelected(response: ItemPendingList.Fetch.Response)
    
    func presentDetail(response: ItemPendingList.Fetch.Response)
    func presentPDFViewer(response: ItemPendingList.Fetch.Response)
    
    
    func presentBookInDetail(response: ItemPendingList.Fetch.Response)
}

class ItemPendingListPresenter: ItemPendingListPresentationLogic
{
  weak var viewController: ItemPendingListDisplayLogic?
  
  // MARK: Do something
  
  func presentFetchResult(response: ItemPendingList.Fetch.Response)
  {
    if let error = response.error {
        let viewModel = ItemPendingList.Fetch.ViewModel(errorMessage: error.message)
        viewController?.displayErrorFetchItem(viewModel: viewModel)
    }else{
        let viewModel = ItemPendingList.Fetch.ViewModel(itemList : response.itemList ,
                                                        tableType:  response.tableType)
        viewController?.displayResultTableView(viewModel: viewModel)
    }
    
    
  }
    
    func presentItemSelected(response: ItemPendingList.Fetch.Response) {
        let viewModel = ItemPendingList.Fetch.ViewModel()
        viewController?.didSelectItemTableView(viewModel: viewModel)
    }
    
    func presentDetail(response: ItemPendingList.Fetch.Response) {
        let viewModel = ItemPendingList.Fetch.ViewModel()
        viewController?.displayShowDetail(viewModel: viewModel)
    }
    
    func presentPDFViewer(response: ItemPendingList.Fetch.Response) {
        let viewModel = ItemPendingList.Fetch.ViewModel()
        viewController?.displayShowPdfViewer(viewModel: viewModel)
    }
    
    func presentBookInDetail(response: ItemPendingList.Fetch.Response) {
        
        
        if let error = response.error {
            let errorMessage = error.message
            let viewModel = ItemPendingList.Fetch.ViewModel(errorMessage: errorMessage)
            viewController?.displayErrorGetBookInDetail(viewModel: viewModel)
        }else{
            let viewModel = ItemPendingList.Fetch.ViewModel()
            viewController?.displayBookInDetail(viewModel: viewModel)
        }
    }
}
