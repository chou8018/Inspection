//
//  CreateModelCodeWorker.swift
//  Inspection
//
//  Created by Thanawat Pratumsat on 23/6/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

typealias createModelCodeHandler = (CreateModelCode.Something.Response) -> ()
class CreateModelCodeWorker
{
  
    //MARK: Drive
    func getDrive(completion: @escaping createModelCodeHandler){
        
        showLoading()
        
        let request = BaseRequest()
        DriveService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            
            case .success(let modelList):
                let response = CreateModelCode.Something.Response(driveList: modelList)
                completion(response)
            case .failure(let error):
                let response = CreateModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    //MARK: GearBox
    func getGearBox(completion: @escaping createModelCodeHandler){
        showLoading()
        
        let request = BaseRequest()
        GearBoxService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            
            case .success(let modelList):
                let response = CreateModelCode.Something.Response(gearBoxList: modelList)
                completion(response)
            case .failure(let error):
                let response = CreateModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    //MARK: FuelDelivery
    func getFuelDelivery(completion: @escaping createModelCodeHandler){
        showLoading()
        
        let request = BaseRequest()
        FuelDeliveryService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            
            case .success(let modelList):
                let response = CreateModelCode.Something.Response(fuelDeliveryList: modelList)
                completion(response)
            case .failure(let error):
                let response = CreateModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    //MARK: FuelType
    func getFuelType(completion: @escaping createModelCodeHandler){
        showLoading()
        
        let request = BaseRequest()
        FuelTypeService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            
            case .success(let modelList):
                let response = CreateModelCode.Something.Response(fuelTypeList: modelList)
                completion(response)
            case .failure(let error):
                let response = CreateModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    //MARK: Jato Model
    func getJatoModels(completion: @escaping createModelCodeHandler){
        showLoading()
        
        let request = BaseRequest()
        JatoCarModelService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            
            case .success(let modelList):
                let response = CreateModelCode.Something.Response(jatoCarModelList: modelList)
                completion(response)
            case .failure(let error):
                let response = CreateModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    //MARK: Jato Varaints
    func getJatoVaraints(form model_BU:String, completion: @escaping createModelCodeHandler){
        showLoading()
        let kmodel_BU = model_BU.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!
        let request = JatoVaraintsModelRequest(model_BU: kmodel_BU)
        JatoVaraintsService().callServiceArray(request: request) { results in
            
            hideLoading()
            
            switch results {
            
            case .success(let modelList):
                let response = CreateModelCode.Something.Response(jatoVaraintsList: modelList)
                completion(response)
            case .failure(let error):
                let response = CreateModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //MARK: Create Model
    func createModel(modelCode: String?,
                     modelDisplay: String?,
                     buildYear: String?,
                     model_BU: String?,
                     model_LO: String?,
                     variants: String?,
                     engineCapacity: Int?,
                     fuelDelivery: String?,
                     fuelType: String?,
                     gearbox: String?,
                     gears: String?,
                     drive: String?,
                     make: String?,
                     body: String?,
                     chassisPreCode: String?,
                     completion: @escaping createModelCodeHandler) {
        

        
        let createUser = DataController.shared.getUser()
        let request = CreateModelCodeRequest(modelCode: modelCode,
                                             modelDisplay: modelDisplay,
                                             buildYear: buildYear,
                                             model_BU: model_BU,
                                             model_LO: model_LO,
                                             variants: variants,
                                             description_BU: "",
                                             description_LO: "",
                                             engineCapacity: engineCapacity,
                                             engineCapacityUnit: "CC",
                                             fuelDelivery: fuelDelivery,
                                             fuelType: fuelType,
                                             gearbox: gearbox,
                                             gears: gears,
                                             drive: drive,
                                             make: make,
                                             body: body,
                                             createUser: createUser,
                                             chassisPreCode: chassisPreCode,
                                             id: nil)
        print("ðŸ”¸ \(request.toJSON())")
        
        showLoading()

        CreateModelCodeService().callServiceObject(request: request) { results in

            hideLoading()

            switch results {

            case .success(_):
                let response = CreateModelCode.Something.Response()
                completion(response)
            case .failure(let error):

                let response = CreateModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }

    //MARK: Update Model Code
    func updateModel(modelCode: String?,
                     modelDisplay: String?,
                     buildYear: String?,
                     model_BU: String?,
                     model_LO: String?,
                     variants: String?,
                     engineCapacity: Int?,
                     fuelDelivery: String?,
                     fuelType: String?,
                     gearbox: String?,
                     gears: String?,
                     drive: String?,
                     make: String?,
                     body: String?,
                     chassisPreCode: String?,
                     id: Int?,
                     completion: @escaping createModelCodeHandler) {
        

//
        let createUser = DataController.shared.getUser()
        let request = CreateModelCodeRequest(modelCode: modelCode,
                                             modelDisplay: modelDisplay,
                                             buildYear: buildYear,
                                             model_BU: model_BU,
                                             model_LO: model_LO,
                                             variants: variants,
                                             description_BU: "",
                                             description_LO: "",
                                             engineCapacity: engineCapacity,
                                             engineCapacityUnit: "CC",
                                             fuelDelivery: fuelDelivery,
                                             fuelType: fuelType,
                                             gearbox: gearbox,
                                             gears: gears,
                                             drive: drive,
                                             make: make,
                                             body: body,
                                             createUser: createUser,
                                             chassisPreCode: chassisPreCode,
                                             id: id)
        print("ðŸ”¸ \(request.toJSON())")
        
        
        showLoading()

        UpdateModelCodeService().callServiceObject(request: request) { results in

            hideLoading()

            switch results {

            case .success(_):
                let response = CreateModelCode.Something.Response()
                completion(response)
            case .failure(let error):

                let response = CreateModelCode.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
}

