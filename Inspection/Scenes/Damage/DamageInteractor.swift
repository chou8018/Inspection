//
//  DamageInteractor.swift
//  Inspection
//
//  Created by Thanawat Pratumsat on 7/6/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DamageBusinessLogic
{
  func doSomething(request: Damage.Something.Request)
    func addPhoto(request: Damage.Something.Request)
    func getDamageModel(request: Damage.Something.Request)
    
    func getDemageDetail(request: Damage.Something.Request)
    func getTypeDemage(request: Damage.Something.Request)
    func getDemagePosition(request: Damage.Something.Request)
    func getDemageSize(request: Damage.Something.Request)
    
    func selectDemageDetail(request: Damage.Something.Request)
    func selectTypeDemage(request: Damage.Something.Request)
    func selectDemagePosition(request: Damage.Something.Request)
    func selectDemageSize(request: Damage.Something.Request)
    
    func requiredField(request: Damage.Something.Request)
}

protocol DamageDataStore
{
  //var name: String { get set }
}

class DamageInteractor: DamageBusinessLogic, DamageDataStore
{
  var presenter: DamagePresentationLogic?
  var worker: DamageWorker?
  //var name: String = ""
    var image:UIImage?
    var damageDetail:String?
    var typeOfDamage:String?
    var damagePosition:String?
    var damageSize:String?
    
    fileprivate var  damageDetailList = ["กันชน", "ประตู", "ไฟเลี้ยว", "ภายใน", "ภายนอก"]
    fileprivate var  damagePosList = ["หน้า", "หน้าซ้าย", "หน้าขวา", "หลัง", "หลังซ้าย", "หลังขวา", "กระโปรง", "กระจกหน้า", "หลังคา", "กระจกหลัง", "กลางซ้าย", "กลางขวา"]
    fileprivate var  damageTypeList = ["ตามรูป"]
    fileprivate var  damageSizeList = ["แตก", "หาย", "ขีดข่วน", "บุบ"]
    
  // MARK: Do something
  
  func doSomething(request: Damage.Something.Request)
  {
    worker = DamageWorker()
    worker?.doSomeWork()
    
    let response = Damage.Something.Response()
    presenter?.presentSomething(response: response)
  }
    
    func addPhoto(request: Damage.Something.Request) {
        DispatchQueue.global().async { [weak self] in
            guard let weakself = self else { return }
            guard  let image = request.image else { return }
            var imageResized = image
            if var size = imageResized.getFileSize() {
                print("🔸 filesize \(size), \(type(of: size))")
                let maxSize = 2 * (1000 * 1000)
                while size > maxSize {

                    imageResized = imageResized.resized(withPercentage: 0.5)!
                    size = imageResized.getFileSize()!

                    print("🔻 resize \(size), \(type(of: size))")
                }
                weakself.image = imageResized
                
                let response = Damage.Something.Response(imageResized: imageResized)
                weakself.presenter?.presentImage(response: response)
            }
        }
      
    }
    func selectTypeDemage(request: Damage.Something.Request) {
        self.typeOfDamage = request.typeOfDamage
    }
    func selectDemageSize(request: Damage.Something.Request) {
        self.damageSize = request.damageSize
    }
    func selectDemageDetail(request: Damage.Something.Request) {
        self.damageDetail = request.damageDetail
    }
    func selectDemagePosition(request: Damage.Something.Request) {
        self.damagePosition = request.damagePosition
    }
    func getDamageModel(request: Damage.Something.Request) {
        guard let image = image ,
              let damageDetail = damageDetail,
              let typeOfDamage = typeOfDamage,
              let damagePosition = damagePosition,
              let damageSize = damageSize else { return }
        
        let damageModel = Damage.DamageImage(image: image,
                                             damageDetail: damageDetail,
                                             typeOfDamage: typeOfDamage,
                                             damagePosition: damagePosition,
                                             damageSize: damageSize)
        
        let response = Damage.Something.Response(damageModel: damageModel)
        presenter?.presentDamageImageModel(response: response)
    }
    func requiredField(request: Damage.Something.Request) {
        let requiredFieldTuple = (damageDetail: (damageDetail != nil),
                                  typeOfDamage: (typeOfDamage != nil),
                                  damagePosition: (damagePosition != nil),
                                  damageSize: (damageSize != nil))
        
        let response = Damage.Something.Response(requiredFieldTuple: requiredFieldTuple)
        presenter?.presentRequiredField(response: response)
    }
    
    func getDemageSize(request: Damage.Something.Request) {
        let response = Damage.Something.Response(damageSizeList: damageSizeList)
        presenter?.presentDemageSize(response: response)
    }
    func getTypeDemage(request: Damage.Something.Request) {
        let response = Damage.Something.Response(damageTypeList: damageTypeList)
        presenter?.presentTypeDemage(response: response)
    }
    func getDemageDetail(request: Damage.Something.Request) {
        let response = Damage.Something.Response(damageDetailList: damageDetailList)
        presenter?.presentDemageDetail(response: response)
    }
    func getDemagePosition(request: Damage.Something.Request) {
        let response = Damage.Something.Response(damagePosList: damagePosList)
        presenter?.presentDemagePosition(response: response)
    }
}
