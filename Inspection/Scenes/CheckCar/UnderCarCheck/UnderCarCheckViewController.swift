//
//  UnderCarCheckViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 15/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RadioGroup

protocol UnderCarCheckDisplayLogic: AnyObject
{
    func displaySomething(viewModel: UnderCarCheck.Something.ViewModel)
}

class UnderCarCheckViewController: ViewController, UnderCarCheckDisplayLogic
{
    var interactor: UnderCarCheckBusinessLogic?
    var router: (NSObjectProtocol & UnderCarCheckRoutingLogic & UnderCarCheckDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = UnderCarCheckInteractor()
        let presenter = UnderCarCheckPresenter()
        let router = UnderCarCheckRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUIView()
        setRadio()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var summaryUnderCarriageTextField: MultilineTextField!
    @IBOutlet weak var underCarriageTextField: CustomTextField!
    @IBOutlet weak var driveShaftTextField: CustomTextField!
    @IBOutlet weak var underCarriageRadio: RadioGroup!
    @IBOutlet weak var driveShaftRadio: RadioGroup!
    
    // local strings
    
    @IBOutlet weak var driveLabel: UILabel!
    @IBOutlet weak var suspensionLabel: UILabel!
    @IBOutlet weak var summaryLabel: UILabel!
    
    let option_used_strings: [String] = [string_inspection_engine_working,
                               string_inspection_engine_not_working,
                                         String.localized("inspection_suspension_leakage_label"),
                                         String.localized("car_interior_others_label")]

    override func initLocalString() {
        super.initLocalString()
        
        driveLabel.text = String.localized("inspection_suspension_drive_shaft_label")
        driveShaftTextField.placeholder = String.localized("car_interior_others_label")
        suspensionLabel.text = String.localized("inspection_suspension_label")
        underCarriageTextField.placeholder = String.localized("car_interior_others_label")
        summaryLabel.text = String.localized("inspection_suspension_summary_label")
        summaryUnderCarriageTextField.placeholder = summaryLabel.text

    }
    
    func doSomething()
    {
        let request = UnderCarCheck.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    //MARK: Presenter
    func displaySomething(viewModel: UnderCarCheck.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    //MARK: UIView
    func setUIView(){
        underCarriageTextField.disableTextField()
        driveShaftTextField.disableTextField()
        
        underCarriageTextField.autocorrectionType = .no
        driveShaftTextField.autocorrectionType = .no
        summaryUnderCarriageTextField.autocorrectionType = .no
        
        underCarriageTextField.delegate = self
        driveShaftTextField.delegate = self
        summaryUnderCarriageTextField.delegate = self
        
        addTarget(from: underCarriageTextField)
        addTarget(from: driveShaftTextField)
        
    }
    
    fileprivate func addTarget(from textfield: UITextField ){
        textfield.addTarget(self, action: #selector(textFieldDidChange(_:)),for: .editingChanged)
    }
    
    //MARK: Radio
    func setRadio(){
        let attributedString = [NSAttributedString.Key.foregroundColor : UIColor.appPrimaryColor]
        
        underCarriageRadio.attributedTitles = [
            NSAttributedString(
                string: option_used_strings[0], attributes: attributedString),
            NSAttributedString(
                string: option_used_strings[1], attributes: attributedString),
            NSAttributedString(
                string: option_used_strings[2], attributes: attributedString),
            NSAttributedString(
                string: option_used_strings[3], attributes: attributedString)
        ]
        
        driveShaftRadio.attributedTitles = [
            NSAttributedString(
                string: option_used_strings[0], attributes: attributedString),
            NSAttributedString(
                string: option_used_strings[1], attributes: attributedString),
            NSAttributedString(
                string: option_used_strings[2], attributes: attributedString),
            NSAttributedString(
                string: option_used_strings[3], attributes: attributedString)
        ]
    }
    
    @IBAction func driveShaftValueChanged(_ sender: Any) {
        if driveShaftRadio.selectedIndex == 3 {
            driveShaftTextField.enableTextField()
        }else{
            DataController.shared.inspectionCarModel.driveShaftNoteOther = nil
            driveShaftTextField.disableTextField()
            driveShaftTextField.text = ""
        }
        DataController.shared.inspectionCarModel.driveShaft = getRadioValue(from: option_used_strings, selectIndex: driveShaftRadio.selectedIndex)
        
        let driveShaftConditionId = driveShaftRadio.selectedIndex + 1
        DataController.shared.inspectionCarModel.driveShaftConditionId = driveShaftConditionId
    }
    
    @IBAction func underCarriageValueChanged(_ sender: Any) {
        if underCarriageRadio.selectedIndex == 3 {
            underCarriageTextField.enableTextField()
        }else{
            DataController.shared.inspectionCarModel.underCarriageNoteOther = nil
            underCarriageTextField.disableTextField()
            underCarriageTextField.text = ""
        }
        DataController.shared.inspectionCarModel.underCarriage = getRadioValue(from: option_used_strings, selectIndex: underCarriageRadio.selectedIndex)
        
        let suspensionConditionId = underCarriageRadio.selectedIndex + 1
        DataController.shared.inspectionCarModel.suspensionConditionId = suspensionConditionId
    }
    
    func prepareData(){
        let model = DataController.shared.inspectionCarModel
        summaryUnderCarriageTextField.text = model.summaryUnderCarriage
        underCarriageTextField.text = model.underCarriageNoteOther
        driveShaftTextField.text = model.driveShaftNoteOther
        
        let indexDriveShaft = getRadioIndexByValue(from: option_used_strings,
                                                   value: model.driveShaft)
        
        driveShaftRadio.selectedIndex = indexDriveShaft
        (indexDriveShaft == 3) ? driveShaftTextField.enableTextField() : driveShaftTextField.disableTextField()
        
        
        let indexUnderCarriage = getRadioIndexByValue(from: option_used_strings,
                                                      value: model.underCarriage)
        
        underCarriageRadio.selectedIndex = indexUnderCarriage
        (indexUnderCarriage == 3) ? underCarriageTextField.enableTextField() : underCarriageTextField.disableTextField()
        
        
    }
    
    
}

//MARK: TextView Delegate
extension UnderCarCheckViewController : UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        //print(textView.text)
        
        DataController.shared.inspectionCarModel.summaryUnderCarriage = textView.text
    }
}

extension UnderCarCheckViewController : UITextFieldDelegate {
    @objc func textFieldDidChange(_ textField: UITextField) {
        //print(textField.text)
        switch textField {
        case underCarriageTextField:
            DataController.shared.inspectionCarModel.underCarriageNoteOther = textField.text
            
        case driveShaftTextField:
            DataController.shared.inspectionCarModel.driveShaftNoteOther = textField.text
            
        default:
            return
        }
    }
    
    
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        
        return true
    }
}

extension UnderCarCheckViewController {
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        scrollView.registKeyboardNotification()
        
        prepareData()
        
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        scrollView.resignKeyboardNotification()
    }
}
