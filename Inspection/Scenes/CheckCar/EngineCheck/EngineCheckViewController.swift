//
//  EngineCheckViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 15/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RadioGroup

protocol EngineCheckDisplayLogic: AnyObject
{
    func displaySomething(viewModel: EngineCheck.Something.ViewModel)
    
    // add on 12/22/2023
    func displayCatalyticOption(viewModel: EngineCheck.Something.ViewModel)
    func displayCatalyticOptionError(viewModel: EngineCheck.Something.ViewModel)
}

class EngineCheckViewController: ViewController, EngineCheckDisplayLogic
{
    var interactor: EngineCheckBusinessLogic?
    var router: (NSObjectProtocol & EngineCheckRoutingLogic & EngineCheckDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = EngineCheckInteractor()
        let presenter = EngineCheckPresenter()
        let router = EngineCheckRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    func loadRetryApi() {
         if !isGetCatalyticOption {
            getCatalyticOptions()
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUIView()
        setRadio()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var summaryEngineTextField: MultilineTextField!
    @IBOutlet weak var summaryEngineRadio: RadioGroup!
    @IBOutlet weak var typeEngineRadio: RadioGroup!
    @IBOutlet weak var haveOilRadio: RadioGroup!
    @IBOutlet weak var fuelSystemRadio: RadioGroup!
    @IBOutlet weak var gasSystemRadio: RadioGroup!
    @IBOutlet weak var useableGeneralCheckBox: CheckBoxUIButton!
    @IBOutlet weak var soundAbnormalGeneralCheckBox: CheckBoxUIButton!
    @IBOutlet weak var leakFuelGeneralCheckBox: CheckBoxUIButton!
    @IBOutlet weak var stainWaterGeneralCheckBox: CheckBoxUIButton!
    @IBOutlet weak var machineLightShowGeneralCheckBox: CheckBoxUIButton!
    @IBOutlet weak var engineAbnormalGeneralCheckBox: CheckBoxUIButton!
    @IBOutlet weak var needRepairGeneralCheckBox: CheckBoxUIButton!
    
    // local strings
    @IBOutlet weak var bodyEngineLabel: UILabel!
    @IBOutlet weak var engineTypeLabel: UILabel!
    @IBOutlet weak var engineOilLabel: UILabel!
    @IBOutlet weak var fuleLabel: UILabel!
    @IBOutlet weak var generalConditionLabel: UILabel!
    @IBOutlet weak var functionLabel: UILabel!
    @IBOutlet weak var loudNoiceLabel: UILabel!
    @IBOutlet weak var oilLeakLabel: UILabel!
    @IBOutlet weak var waterStainLabel: UILabel!
    @IBOutlet weak var oilLightLabel: UILabel!
    @IBOutlet weak var engineNotSmoothlyLabel: UILabel!
    @IBOutlet weak var needRepairLabel: UILabel!
    @IBOutlet weak var summaryLabel: UILabel!
    @IBOutlet weak var gasLabel: UILabel!
    @IBOutlet weak var catalyticLabel: UILabel!
    @IBOutlet weak var catalyticRadio: RadioGroup!

    let string_inspection_oil_lacking = String.localized("inspection_engine_oil_lacking_label")
    let string_inspection_oil_not_lacking = String.localized("inspection_engine_oil_notlacking_label")
    
    var isGetCatalyticOption = false
    var catalyticOptions: [String]?
    var localCatalyticOptions: [String] = [String.localized("inspection_engine_with_label"), String.localized("inspection_engine_without_label"),
                                           String.localized("car_detail_unable_to_verified_label")]

    override func initLocalString() {
        super.initLocalString()
        
        bodyEngineLabel.text = String.localized("inspection_engine_label")
        engineTypeLabel.text = String.localized("inspection_engine_type_label")
        engineOilLabel.text = String.localized("inspection_engine_oil_label")
        fuleLabel.text = String.localized("car_engine_fuel_system_label")
        generalConditionLabel.text = String.localized("inspection_engine_general_label")
        functionLabel.text = String.localized("inspection_engine_function_label")
        loudNoiceLabel.text = String.localized("inspection_engine_loud_label")
        oilLeakLabel.text = String.localized("inspection_engine_oil_leak_label")
        waterStainLabel.text = String.localized("inspection_engine_water_stain_label")
        oilLightLabel.text = String.localized("inspection_engine_oil_light_label")
        engineNotSmoothlyLabel.text = String.localized("inspection_engine_not_smoothly_label")
        needRepairLabel.text = String.localized("inspection_engine_nedd_repair_label")
        summaryLabel.text = String.localized("inspection_engine_summary_label")
        summaryEngineTextField.placeholder = summaryLabel.text
        gasLabel.text = String.localized("inspection_engine_gas_label")
        catalyticLabel.text = String.localized("inspection_engine_catalytic_label")

    }
    
    //MARK: catalyticOption
    func getCatalyticOptions(){
        let request = EngineCheck.Something.Request()
        interactor?.getCatalyticOptions(request: request)
    }
    func displayCatalyticOptionError(viewModel: EngineCheck.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.loadRetryApi()
        }
    }
    func displayCatalyticOption(viewModel: EngineCheck.Something.ViewModel) {
        
        guard let values = viewModel.catalyticOptions else { return }
        catalyticOptions = values
        catalyticRadio.titles = values
        isGetCatalyticOption = true
    }
    
    func doSomething()
    {
        let request = EngineCheck.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    //MARK: Presenter
    func displaySomething(viewModel: EngineCheck.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    //MARK: UIView
    func setUIView(){
        summaryEngineTextField.autocorrectionType = .no
        summaryEngineTextField.delegate = self
    }
    
    //MARK: Radio
    func setRadio(){
        let attributedString = [NSAttributedString.Key.foregroundColor : UIColor.appPrimaryColor]
        
        summaryEngineRadio.attributedTitles = [
            NSAttributedString(string: string_inspection_engine_working, attributes: attributedString),
            NSAttributedString(string: string_inspection_engine_not_working, attributes: attributedString)
        ]
        typeEngineRadio.attributedTitles = [
            NSAttributedString(string: string_benzine, attributes: attributedString),
            NSAttributedString(string: string_diesel, attributes: attributedString),
            NSAttributedString(string: string_hybrid_benzine, attributes: attributedString),
            NSAttributedString(string: string_hybrid_diesel, attributes: attributedString),
            NSAttributedString(string: string_bev_diesel, attributes: attributedString),
            NSAttributedString(string: string_phev_diesel, attributes: attributedString)
        ]
        haveOilRadio.attributedTitles = [
            NSAttributedString(string: string_inspection_oil_lacking, attributes: attributedString),
            NSAttributedString(string: string_inspection_oil_not_lacking, attributes: attributedString)
        ]
//        fuelSystemRadio.attributedTitles = [
//            NSAttributedString(string: string_injector, attributes: attributedString),
//            NSAttributedString(string: string_carburetor, attributes: attributedString),
//            NSAttributedString(string: "Direct Injection", attributes: attributedString)
//            
//        ]
        
        fuelSystemRadio.titles = DataController.shared.getFuelSystemTitles()
        
        gasSystemRadio.attributedTitles = [
            NSAttributedString(string: string_lpg_sequential_injection, attributes: attributedString),
            NSAttributedString(string: string_lpg_fumigation_system, attributes: attributedString),
            NSAttributedString(string: string_cng_sequential_injection, attributes: attributedString),
            NSAttributedString(string: string_cng_fumigation_system, attributes: attributedString)
        ]
        
//        catalyticRadio.attributedTitles = [
//            NSAttributedString(string: String.localized("inspection_engine_with_label"), attributes: attributedString),
//            NSAttributedString(string: String.localized("inspection_engine_without_label"), attributes: attributedString),
//            NSAttributedString(string: String.localized("car_detail_unable_to_verified_label"), attributes: attributedString),
//        ]
        
    }
    //MARK: Radio ValueChange
    @IBAction func summaryEngineValueChanged(_ sender: Any) {
        let value = getRadioValue(from: [string_inspection_engine_working, string_inspection_engine_not_working],
                                  selectIndex: summaryEngineRadio.selectedIndex)
        DataController.shared.inspectionCarModel.engineOverall = value
        
        let isEngineWorks = summaryEngineRadio.selectedIndex == 0 ? true : false
        DataController.shared.inspectionCarModel.isEngineWorks = isEngineWorks
    }
    
    @IBAction func typeEngineValueChanged(_ sender: Any) {
        let value = getRadioValue(from: [string_benzine, string_diesel, string_hybrid_benzine, string_hybrid_diesel, string_bev_diesel, string_phev_diesel],
                                  selectIndex: typeEngineRadio.selectedIndex)
        DataController.shared.inspectionCarModel.typeEngine = value
        
        let engineSystemId = typeEngineRadio.selectedIndex + 1
        DataController.shared.inspectionCarModel.engineSystemId = engineSystemId
    }
    
    @IBAction func haveOilValueChanged(_ sender: Any) {
        let value = getRadioValue(from: [string_inspection_oil_lacking, string_inspection_oil_not_lacking],
                                  selectIndex: haveOilRadio.selectedIndex)
        DataController.shared.inspectionCarModel.oilEngine = value
        
        let isLubricatorLow = haveOilRadio.selectedIndex == 0 ? true : false
        DataController.shared.inspectionCarModel.isLubricatorLow = isLubricatorLow
    }
    
    @IBAction func fuelSystemValueChanged(_ sender: Any) {
//        let value = getRadioValue(from: [string_injector, string_carburetor, "Direct Injection"],
//                                  selectIndex: fuelSystemRadio.selectedIndex)
        
        let value = getRadioValue(from: DataController.shared.getFuelSystemTitles(),
                                  selectIndex: fuelSystemRadio.selectedIndex)
        
        DataController.shared.inspectionCarModel.fuelSystem = value
        
        let fuelSystemId = fuelSystemRadio.selectedIndex + 1
        DataController.shared.inspectionCarModel.fuelSystemId = fuelSystemId
    }
    
    fileprivate var defautValue = -1
    fileprivate var oldValue = -1
    @IBAction func gasSystemValueChanged(_ sender: Any) {
        let value =  getRadioValue(from : [string_lpg_sequential_injection, string_lpg_fumigation_system,
                                           string_cng_sequential_injection, string_cng_fumigation_system],
                                   selectIndex: gasSystemRadio.selectedIndex)
        
        let select = gasSystemRadio.selectedIndex
        gasSystemRadio.selectedIndex = oldValue == select ? defautValue : select
        DataController.shared.inspectionCarModel.gasSystem = oldValue == select ? nil : value
        
        let gasTypeId =  oldValue == select ? nil : (select + 1)
        DataController.shared.inspectionCarModel.gasTypeId = gasTypeId
        
        oldValue = defautValue != gasSystemRadio.selectedIndex ? select : defautValue
    }
    
    @IBAction func catalyticValueChanged(_ sender: Any) {
        
//        var value = ""
//        if let catalyticOptions = catalyticOptions {
//            value =  getRadioValue(from : catalyticOptions,
//                                       selectIndex: catalyticRadio.selectedIndex)
//        } else {
//            value =  getRadioValue(from : localCatalyticOptions,
//                                       selectIndex: catalyticRadio.selectedIndex)
//        }
        DataController.shared.inspectionCarModel.catalyticOptionId = catalyticRadio.selectedIndex + 1

    }
    
    //MARK: CheckBox
    @IBAction func useableTapped(_ sender: Any) {
        useableGeneralCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.useableGeneral = check
        }
    }
    @IBAction func soundAbnormalTapped(_ sender: Any) {
        soundAbnormalGeneralCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.soundAbnormalGeneral = check
        }
    }
    @IBAction func leakFuelTapped(_ sender: Any) {
        leakFuelGeneralCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.leakFuelGeneral = check
        }
    }
    @IBAction func stainWaterTapped(_ sender: Any) {
        stainWaterGeneralCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.stainWaterGeneral = check
        }
    }
    @IBAction func machineLightShowTapped(_ sender: Any) {
        machineLightShowGeneralCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.machineLightShowGeneral = check
        }
    }
    @IBAction func engineAbnormalTapped(_ sender: Any) {
        engineAbnormalGeneralCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.engineAbnormalGeneral = check
        }
    }
    @IBAction func needRepairTapped(_ sender: Any) {
        needRepairGeneralCheckBox.toggle { check in
            DataController.shared.inspectionCarModel.needRepairGeneral = check
        }
    }
    
    func prepareData() {
        let model = DataController.shared.inspectionCarModel
        summaryEngineTextField.text = model.summaryEngine
        needRepairGeneralCheckBox.check = model.needRepairGeneral
        engineAbnormalGeneralCheckBox.check = model.engineAbnormalGeneral
        machineLightShowGeneralCheckBox.check = model.machineLightShowGeneral
        stainWaterGeneralCheckBox.check = model.stainWaterGeneral
        leakFuelGeneralCheckBox.check = model.leakFuelGeneral
        soundAbnormalGeneralCheckBox.check = model.soundAbnormalGeneral
        useableGeneralCheckBox.check = model.useableGeneral
        
        gasSystemRadio.selectedIndex = getRadioIndexByValue(from : [string_lpg_sequential_injection, string_lpg_fumigation_system,
                                                                    string_cng_sequential_injection, string_cng_fumigation_system], value: model.gasSystem)
        
//        fuelSystemRadio.selectedIndex = getRadioIndexByValue(from : [string_injector, string_carburetor, "Direct Injection"], value: model.fuelSystem)
        
        fuelSystemRadio.selectedIndex = getRadioIndexByValue(from : DataController.shared.getFuelSystemTitles(), value: model.fuelSystem)
        
        haveOilRadio.selectedIndex = getRadioIndexByValue(from : [string_inspection_oil_lacking, string_inspection_oil_not_lacking], value: model.oilEngine)
        
        typeEngineRadio.selectedIndex = getRadioIndexByValue(from : [string_benzine, string_diesel, string_hybrid_benzine, string_hybrid_diesel, string_bev_diesel, string_phev_diesel], value: model.typeEngine)
        
        summaryEngineRadio.selectedIndex = getRadioIndexByValue(from: [string_inspection_engine_working, string_inspection_engine_not_working], value: model.engineOverall)
        
        if let catalyticOptionId = model.catalyticOptionId {
            catalyticRadio.selectedIndex = catalyticOptionId - 1
        }
 
        if let engineTypeIndex = DataController.shared.receiverCarModel.fuelSystemId , engineTypeIndex > 0 {
            typeEngineRadio.selectedIndex = engineTypeIndex - 1
        }
        
        let fuelSystemIndex = DataController.shared.getFuelSystemIndex()
        if fuelSystemIndex > -1 {
            fuelSystemRadio.selectedIndex = fuelSystemIndex
        }
    }
    
}
//MARK: TextView Delegate
extension EngineCheckViewController : UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        //print(textView.text)
        DataController.shared.inspectionCarModel.summaryEngine = textView.text
    }
}


extension EngineCheckViewController {
    
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        scrollView.registKeyboardNotification()
        loadRetryApi()
        prepareData()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        scrollView.resignKeyboardNotification()
    }
}
