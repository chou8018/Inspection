//
//  ItemAllListWorker.swift
//  Inspection
//
//  Created by Thanawat prathumset on 3/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
typealias itemListHandler = (ItemAllList.SearchType.Response) -> ()
class ItemAllListWorker
{
  
    func fetchAllItemList(completion: @escaping itemListHandler){
        
        showLoading()
        
        let request = BaseRequest()
        BookInListService().callServiceArray(request: request) { (results) in
            
            hideLoading()
            
            switch results {
            
            case .success(let bookInList):
                var type : ItemAllList.TableType = .Default
                type = (bookInList.count > 0) ? .Found : .NotFound
                
                let response = ItemAllList.SearchType.Response(itemList: bookInList.reversed(),
                                                               tableType: type)
                completion(response)
                
            case .failure(let error):
                let response = ItemAllList.SearchType.Response(error : error.getMessage)
                completion(response)
            }
        }
    }
    func searchItemList(from keyword:String, searchType:SearchBy.TYPE , completion: @escaping itemListHandler){
        
        showLoading()
        
        let request = BookInSearchRequest(keyword: keyword, searchType: searchType)
        print("query params: \(request.toJSON())")
        BookInListSearchService().callServiceArray(request: request) { (results) in
            
            hideLoading()
            
            switch results {
            
            case .success(let bookInList):
                var type : ItemAllList.TableType = .Default
                type = (bookInList.count > 0) ? .Found : .NotFound
                
                let response = ItemAllList.SearchType.Response(itemList: bookInList.reversed(),
                                                               tableType: type)
                completion(response)
            case .failure(let error):
                let response = ItemAllList.SearchType.Response(error: error.getMessage)
                completion(response)
            }
        }
        
    }
    
    
    
    
    //MARK: GetBookIN
    func getBookIN(from bookInNumber:String? , completion: @escaping itemListHandler){
        print("❤️🐶 getBookIN from : \(bookInNumber ?? "") ❤️🐶")
        
        showLoading()
        
        let request = BookInDetailRequest(bookInNumber: bookInNumber)
        BookInDetailService().callServiceObject(request: request) { [weak self] (result) in
            
            hideLoading()
            
            switch result {
            //MARK: Success
            case .success(let response):
                //init data
                let model = DataController.shared.receiverCarModel
                
                let bookInType = response.bookInType
                let vehicleType = response.vehicleType
                let externalType = response.externalType
                let spareType = response.spareType
                let cabinType = response.cabinType
                let engineType = response.engineType
                let keyOptionType = response.keyOptionType
                let motorbikeBookInType = response.motorbikeBookInType
                
                print("🛵 motorbikeBookInType: \(motorbikeBookInType?.toJSON())")
                //MARK: MAPPING MOTORBIKE MODEL
                if let motorbike = motorbikeBookInType {
                    model.frontWheelType = motorbike.frontWheelType
                    model.frontBrakeType = motorbike.frontBrakeType
                    model.rearWheelType = motorbike.rearWheelType
                    model.rearBrakeType = motorbike.rearBrakeType
                    model.rearTurnSignalR = motorbike.rearTurnSignalR
                    model.bodyCladdingR = motorbike.bodyCladdingR
                    model.exhaustPipe = motorbike.exhaustPipe
                    model.rearFootRest = motorbike.rearFootRest
                    model.starterLever = motorbike.starterLever
                    model.frontFootRest = motorbike.frontFootRest
                    model.sideStand = motorbike.sideStand
                    model.doubleStand = motorbike.doubleStand
                    model.windScreenR = motorbike.windScreenR
                    model.multiPurposeR = motorbike.multiPurposeR
                    model.mirrorR = motorbike.mirrorR
                    model.handBreakR = motorbike.handBreakR
                    model.milesDisplay = motorbike.milesDisplay
                    model.mask = motorbike.mask
                    model.frontLight = motorbike.frontLight
                    model.frontTurnSignalR = motorbike.frontTurnSignalR
                    model.frontFender = motorbike.frontFender
                    model.frontTire = motorbike.frontTire
                    model.frontPumpDiscBrakes = motorbike.frontPumpDiscBrake
                    model.frontOilTankDiscBrakes = motorbike.frontOilTankDiscBrake
                    model.frontShockup = motorbike.frontShockup
                    model.chainCover = motorbike.chainCover
                    model.handBreakL = motorbike.handBreakL
                    model.handClutch = motorbike.handClutch
                    model.frontTurnSignalL = motorbike.frontTurnSignalL
                    model.mirrorL = motorbike.mirrorL
                    model.windScreenL = motorbike.windScreenL
                    model.bodyCladdingL = motorbike.bodyCladdingL
                    model.seat = motorbike.seat
                    model.rearSeatRack = motorbike.rearSeatRack
                    model.rearTurnSignalL = motorbike.rearTurnSignalL
                    model.rearLight = motorbike.rearLight
                    model.rearFender = motorbike.rearFender
                    model.multiPurposeL = motorbike.multiPurposeL
                    model.rearTire = motorbike.rearTire
                    model.rearPumpDiscBrakes = motorbike.rearPumpDiscBrake
                    model.rearOilTankDiscBrakes = motorbike.rearOilTankDiscBrake
                    model.rearShockup = motorbike.rearShockup
                    model.ubox = motorbike.ubox
                    model.oilTank = motorbike.oilTank
                    model.battery = motorbike.battery
                    model.cdiBox = motorbike.cdiBox
                    model.toolSpare = motorbike.toolSpare
                    model.frontWheel = motorbike.frontWheel
                    model.rearWheel = motorbike.rearWheel
                    model.frontBrake = motorbike.frontBrake
                    model.rearBrake = motorbike.rearBrake
                    model.otherNote = motorbike.otherNote
                    model.engineCondition = motorbike.engineCondition
                    model.gearCondition = motorbike.gearCondition
                    model.brakeCondition = motorbike.brakeCondition
                    model.isHandStart = motorbike.isHandStart
                    model.isKickStart = motorbike.isKickStart
                    model.isRegistrationPlate = motorbike.isRegistrationPlate
                    model.annotation = motorbike.annotation
                }
                
                
                //MARK: Type
                DataController.shared.bookInType =  getDataBookInType(type: bookInType?.bookinType)
                
                //MARK: KeyOptionType
                
                let numberOfKey = keyOptionType?.numberOfKey ?? 0
                let numberOfRemote = keyOptionType?.numberOfRemote ?? 0
                let numberOfKeyRemote = keyOptionType?.numberOfKeyRemote ?? 0
                let numberOfImmobilizer = keyOptionType?.numberOfImmobilizer ?? 0
                let numberOfKeyless = keyOptionType?.numberOfKeyless ?? 0
                
//MARK: motorbike auto check key
                DataController.shared.inspectionCarModel.isKey = (numberOfKey > 0)
                DataController.shared.inspectionCarModel.isRemote = (numberOfRemote > 0)
                DataController.shared.inspectionCarModel.isRemoteKey = (numberOfKeyRemote > 0)
                DataController.shared.inspectionCarModel.isImmobilizarKey = (numberOfImmobilizer > 0)
                
                model.isKeys = (numberOfKey > 0) || (numberOfRemote > 0) || (numberOfKeyRemote > 0) || (numberOfImmobilizer > 0) || (numberOfKeyless > 0)
                
                model.addKeys(type: String.localized("car_interior_key_label"), amount: numberOfKey.toString())
                model.addKeys(type: String.localized("car_interior_remote_key_label"), amount: numberOfKeyRemote.toString())
                model.addKeys(type: String.localized("car_interior_remote_control_label"), amount: numberOfRemote.toString())
                model.addKeys(type: String.localized("car_interior_key_immobilizer_label"), amount: numberOfImmobilizer.toString())
                model.addKeys(type: String.localized("car_interior_keyless_label"), amount: numberOfKeyless.toString())
                
                //MARK: receiver car
                let dateString = vehicleType?.bookedDate ?? ""
                let date = DateFormatter().toDate(from: dateString) ?? Date()
                model.date = date
                model.dayString = DateFormatter().dateFormat(from: date, dateFormat: "dd-MM-yyyy")
                model.timeString = DateFormatter().dateFormat(from: date, dateFormat: "HH:mm")
                model.nameSender = bookInType?.senderName
                model.nameReceiver = bookInType?.receiverName
                model.bookinNo = bookInType?.bookInNumber
                model.contractNumber = bookInType?.contractNumber
                model.phoneNumber = bookInType?.mobileNumber
                model.senderSignatureImage = bookInType?.senderSignature?.base64StringToImage()
                model.receiverSignatureImage = bookInType?.receiverSignature?.base64StringToImage()
                model.receiverPlace = vehicleType?.receiverLocation
                model.storePlace = vehicleType?.storageLocation
                model.plant = vehicleType?.plant.trimWhiteSpace
                
                print("sellingCategory \(vehicleType?.sellingCategory)")
                model.sellingCategory = vehicleType?.sellingCategory
                model.redBookCondition = vehicleType?.redBookCondition
                
                //MARK: External
                let gradeOverallValue = [nil,string_excellent, string_good, string_average, string_fair, string_poor, string_as_is ,string_salvage]
                let gradeOverallId = externalType?.gradeOverallId ?? 0
                model.gradeOverallId = externalType?.gradeOverallId
                model.externalOverall = gradeOverallValue[gradeOverallId] /// value grade id
                
                let colorOverallValue = [nil, string_good_first, string_average, string_fair ,string_poor]
                let colorOverallId = externalType?.colorOverallId ?? 0
                model.colorOverallId  = externalType?.colorOverallId
                model.colorOverall = colorOverallValue[colorOverallId] /// value color id
                
                model.isSpoiler  = externalType?.isSpoiler
                
                let checkMag = ((externalType?.magWheel ?? 0) > 0)
                let checkNormal = ((externalType?.normalWheel ?? 0) > 0)
                
                model.isMagWheel = checkMag
                model.magWheelAmount = checkMag ? externalType?.magWheel.toString() : ""
                model.isNormalWheel = checkNormal
                model.normalWheelAmount = checkNormal ? externalType?.normalWheel.toString() : ""
                model.isTire = externalType?.isTyre
                model.tireQuality = externalType?.tyreQuality.toString()
                model.brandTire = externalType?.tyreBrand
                model.damageDetail = externalType?.damageDesc
                model.roofType = externalType?.roofType
                model.roofTypeId = externalType?.roofTypeId
//                DataController.shared.inspectionCarModel.roofType = model.roofType

                DataController.shared.receiverCarModel.roofTypeId = model.roofTypeId

                //MARK: SparePart
                let spareOverAllValue = [nil, string_good_first, String.localized("inspection_list_not_good_label")]
                let spareOverAllId = spareType?.spareOverAllId ?? 0
                model.spareOverAllId = spareType?.spareOverAllId
                model.spareOverAll = spareOverAllValue[spareOverAllId] /// value spare id
                model.spareOverAllNote = spareType?.spareNote
                model.isSpareTire = spareType?.isSpareType
                model.isHandTool = spareType?.isHandTool
                model.isMaxliner = spareType?.isMaxliner
                model.isRoofrack = spareType?.isRoofRack
                model.isJackCar  = spareType?.isJackCar
                model.isCableChargeEV = spareType?.isCableChargeEV
                model.accessoriesNote = spareType?.accessoriesNote
                
                //MARK: engineType
                let engineRoomOverAllValue = [nil, string_good_first, string_average, string_fair, String.localized("inspection_list_not_good_label")]
                let engineRoomOverAllId = engineType?.engineRoomOverAllId ?? 0
                model.engineOverAllId = engineType?.engineRoomOverAllId
                model.engineOverAll = engineRoomOverAllValue[engineRoomOverAllId]
                
            
                let driverSystemValue = [nil, "FWD", "RWD", "4WD", "AWD"]
                let driverSystemId = engineType?.driverSystemId ?? 0
                model.driverSystemId = engineType?.driverSystemId
                model.driverSystem = driverSystemValue[driverSystemId]
                
//                let fuelSystemValue = [nil, string_benzine, string_diesel, "EV", string_hybrid_benzine, string_hybrid_diesel]
                let fuelSystemValue = [nil, string_benzine, string_diesel, string_hybrid_benzine, string_hybrid_diesel, string_bev_diesel, string_phev_diesel]
                
                let fuelSystemId = engineType?.fuelSystemId ?? 0
                model.fuelSystemId = engineType?.fuelSystemId
                model.oilSystem = fuelSystemValue[fuelSystemId]
                

//                let fuelDeliverySystemValue = [nil, "หัวฉีด", "คาร์บูเรเตอร์", "Direct Injection"]
                if let fuelDelivery = vehicleType?.fuelDelivery {
                    var fuelDeliveryName = ""
                    switch  fuelDelivery {
                    case "D":
                        fuelDeliveryName = "Direct Injection" // direct injection
                    case "I":
                        fuelDeliveryName = string_injector // injection
                    case "N":
                        fuelDeliveryName = string_carburetor // naturally aspirated
                    case "T":
                        fuelDeliveryName = String.localized("car_engine_turbocharger_label") // turbo
                    default:
                        fuelDeliveryName = "N/A"
                    }
                    model.fuelDeliveryName = fuelDeliveryName
                    model.fuelDelivery = fuelDelivery
                    
                    DataController.shared.inspectionCarModel.fuelSystem = fuelDeliveryName
                    DataController.shared.inspectionCarModel.typeEngine = model.oilSystem
                }
                
                
//                let gasTypeValue = [nil, "LPG", "CNG / NGV"]
                let gasTypeValue = [nil, string_lpg_sequential_injection, string_lpg_fumigation_system,
                                    string_cng_sequential_injection, string_cng_fumigation_system]
                let gasTypeId = engineType?.gasTypeId ?? 0
                model.gasTypeId = engineType?.gasTypeId
                model.gasSystem = gasTypeValue[gasTypeId]
                
                model.betteryBrand = engineType?.batteryBrand
                model.betteryColor = engineType?.batteryIndicatorColor
                model.isEcu = engineType?.isEcu
                model.isCompressor = engineType?.isCompressorAir
                model.isGas = engineType?.isFuelGas
                model.assetInCar = engineType?.insideAssetNote
                
                DataController.shared.inspectionCarModel.gasSystem = model.gasSystem
                
                //MARK: cabinType
                let cabinOverallValue = [nil, string_good_first, string_average, string_fair, String.localized("inspection_list_not_good_label")]
                let cabinOverAllId = cabinType?.cabinOverAllId ?? 0
                model.cabinOverAllId = cabinType?.cabinOverAllId
                model.cabinOverall = cabinOverallValue[cabinOverAllId]
                
                let typeMilesValue = [nil, String.localized("motorbike_inspection_engine_kilometer_label"), String.localized("motorbike_inspection_engine_mile_label")]
                let mileageTypeId = cabinType?.mileageTypeId ?? 0
                model.mileageTypeId = cabinType?.mileageTypeId
                model.typeMiles = typeMilesValue[mileageTypeId]
                

                let oilAmountValue = ["E", "1/4", "2/4", "3/4", "4/4"]
                let fuelVolumnValue:Int? = cabinType?.fuelVolumn
                model.fuelVolumn = cabinType?.fuelVolumn
                model.oilAmount = (fuelVolumnValue != nil) ? oilAmountValue[fuelVolumnValue!] : nil
                
            
//                let gearSystemValue = [nil, "AT", "MT"]
//                let gearSystemId = cabinType?.gearSystemId ?? 0
//                model.gearSystemId = cabinType?.gearSystemId
//                model.typeGear = gearSystemValue[gearSystemId]
                
                model.isInvalidMileage = cabinType?.isInvalidMileage ?? false
                model.invalidMileageReason = cabinType?.invalidMileageReason
                
                
                model.miles = cabinType?.mileage?.toString()
            
                let isPlayerCD = cabinType?.isPlayerCD ?? false
                let isPlayerUSB = cabinType?.isPlayerUSB ?? false
                let isPlayerTape = cabinType?.isPlayerTape ?? false
                let isPlayerRadio = cabinType?.isPlayerRadio ?? false

                model.isPlayer = (isPlayerCD || isPlayerUSB || isPlayerTape || isPlayerRadio)
                model.isPlayerRadio = isPlayerRadio
                model.isPlayerTape = isPlayerTape
                model.isPlayerCD = isPlayerCD
                model.isPlayerUSB = isPlayerUSB

                model.brandPlayer = cabinType?.playerBrand
                model.isNavigator = cabinType?.isNavigator
                model.isNavigatorOnCar = cabinType?.isNavigatorBuiltin
                model.isCd = cabinType?.isNavigatorCD
                model.isSDCard = cabinType?.isNavigatorSDCard
                model.isNoSdCard = cabinType?.isNavigatorNoSDCard
                model.isNoCd = cabinType?.isNavigatorNoCD

                model.isHeadGear = cabinType?.isHeadGear
                model.isLockGear = cabinType?.isLockGear
                model.isAirback = cabinType?.isAirback
                model.isPowerAmp = cabinType?.isPowerAmp
                model.isPreAmp = cabinType?.isPreAmp
                model.isBookService = cabinType?.isBookService
                model.isSpeaker = cabinType?.isSpeaker
                model.isManual = cabinType?.isManual
                model.isCigaretteLighter = cabinType?.isCigaretteLiter
                model.isTaxPlate = cabinType?.isTaxPlate
                model.dateExpiredTaxPlate = cabinType?.isPlateExpireDate
                model.noteCabin = cabinType?.cabinNote
                
                
                
                print("bookin vehicleId \(bookInType?.vehicleId ?? "")")
                print("bookin edit by \(bookInType?.inspector ?? "")")
                print("bookin bookin date \(vehicleType?.bookedDate ?? "")")
                print("bookin inspection date  \(vehicleType?.inspectionDate ?? "")")
                print("bookin latestUpdatedDate by \(bookInType?.latestUpdatedDate ?? "")")
                
                model.latestUpdatedDate = DateFormatter().toDate(from: bookInType?.latestUpdatedDate ?? "") ?? nil
                
                model.vehicleId = bookInType?.vehicleId ?? ""
                model.drive = vehicleType?.drive
                model.make1 = vehicleType?.make
                model.cid  = vehicleType?.colour.toInt()
                
                model.model_BU = vehicleType?.model_BU
                model.model_LO  = vehicleType?.model_LO
                model.isGasTank = vehicleType?.isGasTank
                
                model.codeModelCar = vehicleType?.modelCode
                model.modelCodeId =  vehicleType?.modelCodeId
                
                var detailModel = "\(vehicleType?.buildYear ?? "")"
                detailModel += " \(vehicleType?.make_BU ?? "")"
                detailModel += " \(vehicleType?.model_BU ?? "")"
                
                model.body = vehicleType?.body
                model.gearbox = vehicleType?.gearbox
                model.gear = vehicleType?.gears
                model.fuelType = vehicleType?.fuelType
                model.fuelDelivery = vehicleType?.fuelDelivery
                model.engineCapacityUnit = vehicleType?.engineCapacityUnit
                
                model.detailModel = detailModel
                model.make_BU = vehicleType?.make_BU
                model.make_LO = vehicleType?.make_LO
                model.bodyDesc_BU = vehicleType?.bodyDesc_BU
                model.bodyDesc_LO = vehicleType?.bodyDesc_LO
                model.modelCar = vehicleType?.model_BU
                model.variants = vehicleType?.variants
                model.engineCapacity = vehicleType?.engineCapacity.toString()
                model.year  = vehicleType?.buildYear
                model.registrationYear = vehicleType?.registrationYear
                model.registration = vehicleType?.regisration
                model.province = vehicleType?.registrationProvince

                model.engineNumber = vehicleType?.engineNumber
                model.vinNumber = vehicleType?.vin
                model.gasNumber = vehicleType?.gasTankNumber
                
                /// add-on model
                model.isInValidEngineNumber = vehicleType?.isInValidEngineNumber
                model.isInValidVinNumber = vehicleType?.isInValidVinNumber
                model.isInValidGasNumber = vehicleType?.isInValidGasNumber
                
                model.reasonInValidEngineNumber = vehicleType?.reasonInValidEngineNumber
                model.reasonInValidVinNumber = vehicleType?.reasonInValidVinNumber
                model.reasonInValidGasNumber =  vehicleType?.reasonInValidGasNumber
                
                DataController.shared.receiverCarModel.gasOption = vehicleType?.gasOption

                model.registrationPlate = vehicleType?.registrationPlate
                model.registrationNote = vehicleType?.registrationNote
                model.isRegistrationMismatch = vehicleType?.isRegistrationMismatch
                
                model.isRegistrationAuction = vehicleType?.isRegistrationAuction
                
                //print("🔸🐶 Registration Plate \(model.registrationPlate)")
                //print("🔸🐶 Mismatch: \(model.isRegistrationMismatch), noteRegistration: \(model.registrationNote))")
                
            //MARK: vehicleType
            /// getcolor
               self?.setVehicle(model: response , completion : completion)
                
                
            case .failure(let error):
                let response = ItemAllList.SearchType.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    
    //MARK: Make Vehicle
    fileprivate func setVehicle(model : BookInMotorBikeModelRequest, completion: @escaping itemListHandler){
        
        
        let bookInType = model.bookInType
        let vehicleType = model.vehicleType
        
        guard let color = vehicleType?.colour , color.toInt() > 0 else {
            let sellerCode = bookInType?.sellerCode?.trimWhiteSpace
            self.setSellerByCode(from: sellerCode, completion: completion)
            return
            
        }
        
        print("❤️🐶 getStardardColorBy from \(color) ❤️🐶")
        
        showLoading()
        
        let request = StandardColorRequest(cid: color)
        StardardColorByCodeService().callServiceObject(request: request) {[weak self] (result) in
            
            hideLoading()
            
            switch result {
            
            case .success(let colorModel):
                let model = DataController.shared.receiverCarModel
                
                var colorCar = "\(colorModel.colour_BU ?? "") \(colorModel.colour_LO ?? "")"
                if !DataController.shared.isThaiLanguage() {
                    colorCar = "\(colorModel.colour_BU ?? "")"
                }
                model.colorCar = colorCar
                model.colour_BU = colorModel.colour_BU
                model.colour_LO = colorModel.colour_LO
                
                let sellerCode = bookInType?.sellerCode?.trimWhiteSpace
                self?.setSellerByCode(from: sellerCode, completion: completion)
                
            case .failure(let error):
                if let errorCode = error.getMessage.errorCode , errorCode == 404 {
                    /// handler  error  pass case 404
                    let sellerCode = bookInType?.sellerCode?.trimWhiteSpace
                    self?.setSellerByCode(from: sellerCode, completion: completion)
                }else{
                    let response = ItemAllList.SearchType.Response(error: error.getMessage)
                    completion(response)
                }
                
            }
        }
    }
    
    //MARK: Make SellerBy
    fileprivate func setSellerByCode(from sellerCode:String? , completion: @escaping itemListHandler){
        guard let sellerCode = sellerCode else { return }
        print("❤️🐶 setSellerByCode from \(sellerCode) ❤️🐶")
        
        showLoading()
        
        let request = SellerByCodeRequest(sellerCode: sellerCode) ///  0000100000
        SellerByCodeService().callServiceArray(request: request) {[weak self] (result) in
            
            hideLoading()
            
            switch result {
            case .success(let response):

                if let sellerModel = response.first {
                    let model = DataController.shared.receiverCarModel
                    model.sellerCode = sellerModel.sellerCode
                    model.companyName = sellerModel.sellerNameTh
                    if !DataController.shared.isThaiLanguage() {
                        model.companyName = sellerModel.sellerNameEn
                    }
                    model.companyNameEn = sellerModel.sellerNameEn

                    switch DataController.shared.bookInType {
                   
                    case .CAR, .CARWRECK:
                        self?.getInspection(from: model.bookinNo?.trimWhiteSpace, completion: completion)
                    case .MBIKE, .MBIKEWRECK:
                        self?.getMBInspection(from: model.bookinNo?.trimWhiteSpace, completion: completion)
                    }
                    
                }else{
                    let kError = KError.commonError(message: "seller code not found!").getMessage
                    let response = ItemAllList.SearchType.Response(error: kError)
                    completion(response)
                }
                
            
            case .failure(let error ):
                let response = ItemAllList.SearchType.Response(error: error.getMessage)
                completion(response)
            }
        }
    }
    
    func getMBInspection(from bookInNumber:String? , completion: @escaping itemListHandler){
        print("🛵 MOTOBIKE INSPECTION:  \(bookInNumber ?? "")")
    
        showLoading()
        
        let request = BookInDetailRequest(bookInNumber: bookInNumber)
        InspectionMotorBikeDetailService().callServiceObject(request: request) { results in
            
            hideLoading()
            
            switch results {
            case .success(let response):
                print("🛵 MOTOBIKE INSPECTION RESPONSE:  \(response.toJSON())")
                
                let model = DataController.shared.inspectionCarModel
                //MARK: Body Inspection
                print("🛵 inspec vehicleId \(response.vehicleId)")
                print("🛵 inspec edit by \(response.inspector)")
                print("🛵 inspec latestUpdatedDate by \(response.latestUpdatedDate)")
                
                //model.vehicleId = response.vehicleId
                model.registrationProvince = response.registrationProvince
                model.registration = response.registration
                model.latestUpdatedDate = DateFormatter().toDate(from: response.latestUpdatedDate) ?? nil
                
                
                
                let dateString = response.inspectionDate
                let date = DateFormatter().toDate(from: dateString) ?? Date()
                model.date = date
                model.dayString = DateFormatter().dateFormat(from: date, dateFormat: "dd-MM-yyyy")
                model.timeString = DateFormatter().dateFormat(from: date, dateFormat: "HH:mm")
                model.nameInspection = response.inspectorName
                model.inspector = response.inspector
                
                /*
                 *
                 *
                 *
                 *   MAPPING IMSPECTION MOTORBIKE
                 *
                 *
                 *
                 *
                 */
                model.exteriorDamage = response.exteriorDamage
                model.isBattery = response.isBattery
                model.batteryDamage = response.batteryDamage
                model.isCDI = response.isCDI
                model.cdiDamage = response.cdiDamage
                model.isElectricStart = response.isElectricStart
                model.electricStartDamage = response.electricStartDamage
                model.isOdometer = response.isOdometer
                model.odometerDamage = response.odometerDamage
                model.fuelDeliveryType = response.fuelDeliveryType
                model.fuelDeliveryDamage = response.fuelDeliveryDamage
                model.isPedelStart = response.isPedelStart
                model.pedelStartDamage = response.pedelStartDamage
                model.isPlate = response.isPlate
                model.plateDamage = response.plateDamage
                model.frontTreadDepth = response.frontTreadDepth
                model.rearTreadDepth = response.rearTreadDepth
                model.isKey = response.isKey
                model.isRemoteKey = response.isRemoteKey
                model.isRemote = response.isRemote
                model.isImmobilizarKey = response.isImmobilizarKey
                model.isServiceable = response.isServiceable
                model.isWillNotStart = response.isWillNotStart
                model.isRequireAttention = response.isRequireAttention
                model.isMissing = response.isMissing
                
                
                model.isCreate = true
                
                
                let receiverModel = DataController.shared.receiverCarModel
                let vehicle = Vehicle(registration: receiverModel.registration,
                                      vin: receiverModel.vinNumber,
                                      engineNumber: receiverModel.engineNumber,
                                      buildYear: receiverModel.year,
                                      make_BU: receiverModel.make_BU,
                                      model_BU: receiverModel.model_BU,
                                      variants: receiverModel.variants)
                let detailModel = BookInListResponse(bookInNumber: bookInNumber, vehicle: vehicle)
                let response = ItemAllList.SearchType.Response(detailModel: detailModel)
                completion(response)
                
            case .failure(let error):
                if let errorCode = error.getMessage.errorCode , errorCode == 404 {
                    /// handler  error  pass case 404
                    let receiverModel = DataController.shared.receiverCarModel
                    let vehicle = Vehicle(registration: receiverModel.registration,
                                          vin: receiverModel.vinNumber,
                                          engineNumber: receiverModel.engineNumber,
                                          buildYear: receiverModel.year,
                                          make_BU: receiverModel.make_BU,
                                          model_BU: receiverModel.model_BU,
                                          variants: receiverModel.variants)
                    let detailModel = BookInListResponse(bookInNumber: bookInNumber, vehicle: vehicle)
                    let response = ItemAllList.SearchType.Response(detailModel: detailModel)
                    completion(response)
                }else{
                    let response = ItemAllList.SearchType.Response(error: error.getMessage)
                    completion(response)
                }
            }
        }
        
        
        
        
    }
    
    //MARK: GetInspection
    func getInspection(from bookInNumber:String? , completion: @escaping itemListHandler){
        print("❤️🐶 getInspection from : \(bookInNumber ?? "") ❤️🐶")
        
        showLoading()
        
        let request = BookInDetailRequest(bookInNumber: bookInNumber)
        InspectionDetailService().callServiceObject(request: request) {[weak self] (results) in
            
            hideLoading()
            
            switch results {
            
            case .success(let response):
                let carInspectionType = response.carInspectionType
                let model = DataController.shared.inspectionCarModel
                
                //MARK: Body Inspection
                print("inspec vehicleId \(carInspectionType?.vehicleId ?? "")")
                print("inspec edit by \(carInspectionType?.inspector ?? "")")
                print("inspec latestUpdatedDate by \(carInspectionType?.latestUpdatedDate ?? "")")
                

                model.registrationProvince = carInspectionType?.registrationProvince
                model.registration = carInspectionType?.regisration
                
                
                model.latestUpdatedDate = DateFormatter().toDate(from: carInspectionType?.latestUpdatedDate ?? "") ?? nil
                
                //model.vehicleId = carInspectionType?.vehicleId ?? ""
                
                let dateString = carInspectionType?.inspectionDate ?? ""
                let date = DateFormatter().toDate(from: dateString) ?? Date()
                model.date = date
                model.dayString = DateFormatter().dateFormat(from: date, dateFormat: "dd-MM-yyyy")
                model.timeString = DateFormatter().dateFormat(from: date, dateFormat: "HH:mm")
                model.nameInspection = carInspectionType?.inspectorName
                model.chessis = carInspectionType?.chassis
                model.frontSide = carInspectionType?.front
                model.backSide = carInspectionType?.back
                model.rightSideDriver = carInspectionType?.rightSide
                model.leftSide = carInspectionType?.leftSide
                model.roof = carInspectionType?.roof
                model.isDrowned = carInspectionType?.isFlood ?? false
                model.bodySummary = carInspectionType?.bodySummary
                
                model.inspector = carInspectionType?.inspector
                
                //MARK: Engine Inspection
                let isEngineWorks = carInspectionType?.isEngineWorks ?? false
                model.engineOverall = isEngineWorks ? string_inspection_engine_working : string_inspection_engine_not_working
                model.isEngineWorks = isEngineWorks
                

                let typeEngineVelue = [nil, string_benzine, string_diesel, "EV", string_hybrid_benzine, string_hybrid_diesel]
                let engineSystemId = carInspectionType?.engineSystemId ?? 0
                model.typeEngine = typeEngineVelue[engineSystemId]
                model.engineSystemId = engineSystemId

                let isLubricatorLow = carInspectionType?.isLubricatorLow ?? false
                model.oilEngine = isLubricatorLow ? String.localized("inspection_engine_oil_lacking_label") : String.localized("inspection_engine_oil_notlacking_label")
                model.isLubricatorLow = isLubricatorLow

                let fuelSystemValue = [nil, string_injector, string_carburetor, "Direct Injection"]
                let fuelSystemId = carInspectionType?.fuelSystemId ?? 0
                model.fuelSystem =  (fuelSystemId <= 3) ? fuelSystemValue[fuelSystemId] : ""
                model.fuelSystemId = fuelSystemId

//                let gasSystemValue = [nil, "LPG", "CNG / NGV"]
                let gasSystemValue = [nil, string_lpg_sequential_injection, string_lpg_fumigation_system,
                                      string_cng_sequential_injection, string_cng_fumigation_system]
                let gasTypeId = carInspectionType?.gearTypeId ?? 0
                model.gasSystem = gasSystemValue[gasTypeId]
                model.gasTypeId = gasTypeId

                model.useableGeneral = carInspectionType?.isUseableGeneral ?? false
                model.soundAbnormalGeneral = carInspectionType?.isSoundAbnormal ?? false
                model.leakFuelGeneral = carInspectionType?.isLeakFuel ?? false
                model.stainWaterGeneral = carInspectionType?.isStainWater ?? false
                model.machineLightShowGeneral = carInspectionType?.isMachineLightShow ?? false
                model.engineAbnormalGeneral = carInspectionType?.isEngineAbnomal ?? false
                model.needRepairGeneral = carInspectionType?.isNeedRepair ?? false
                model.summaryEngine = carInspectionType?.engineSummary
                
                //MARK: Under Inspection
                model.summaryUnderCarriage = carInspectionType?.suspensionSummary
                
                let underCarriageValue = [nil, string_inspection_engine_working, string_inspection_engine_not_working, String.localized("inspection_suspension_leakage_label"), String.localized("car_interior_others_label")]
                let suspensionConditionId = carInspectionType?.suspensionConditionId ?? 0
                model.underCarriage = underCarriageValue[suspensionConditionId]
                model.suspensionConditionId = suspensionConditionId
                model.underCarriageNoteOther = carInspectionType?.suspensionConditionNote
                
                let driveShaftValue = [nil, string_inspection_engine_working, string_inspection_engine_not_working, String.localized("inspection_suspension_leakage_label"), String.localized("car_interior_others_label")]
                let driveShaftConditionId = carInspectionType?.driveShaftConditionId ?? 0
                model.driveShaft = driveShaftValue[driveShaftConditionId]
                model.driveShaftConditionId = driveShaftConditionId
                model.driveShaftNoteOther = carInspectionType?.driveShaftConditionNote
                
                
                //MARK: GearSystem Inspection
                let gearSystemValue = [nil, "AT", "MT"]
                let gearSystemId = carInspectionType?.gearSystemId ?? 0
                model.gearSystem =  gearSystemValue[gearSystemId]
                model.gearSystemId = gearSystemId

                let statisGearValue = [nil, String.localized("inspection_gear_working_label"), String.localized("inspection_gear_not_working_label")]
                let gearConditionId = carInspectionType?.gearConditionId ?? 0
                model.statusGear = statisGearValue[gearConditionId]
                model.gearConditionId = gearConditionId

                let driveShaftGearValue = [nil, String.localized("inspection_gear_complete_label"), String.localized("inspection_gear_incomplete_label"), String.localized("inspection_gear_no_drive_shaft_label")]
                let driveShaftId = carInspectionType?.driveShaftId ?? 0
                model.driveShaftGear = driveShaftGearValue[driveShaftId]
                model.driveShaftId = driveShaftId

                model.isGear4WD = carInspectionType?.is4WD ?? false
                model.summaryGearSystem = carInspectionType?.gearSystemSummary
                
                //MARK: SteerWheel
                model.isSteerWheelPower = carInspectionType?.isPowerSteering ?? false

                let isUseableSteerWheel = carInspectionType?.isUseableSteerWheel ?? false
                model.steerWheelSystem = isUseableSteerWheel ? string_inspection_engine_working : string_inspection_engine_not_working
                model.isUseableSteerWheel = isUseableSteerWheel
                
                model.summarySteerWheelSystem = carInspectionType?.steeringSummary
                
                //MARK: BrakeCheck
                model.summarysBrakeSystem = carInspectionType?.breakSystemSumary
                
                let isUseableBrake = carInspectionType?.isUseableBrake ?? false
                model.brakeSystem = isUseableBrake ? string_inspection_engine_working : string_inspection_engine_not_working
                model.isUseableBrake = isUseableBrake
                
                //MARK: AirCheck
                model.summaryAirSystem = carInspectionType?.airSystemSummary
                model.isCompresser = carInspectionType?.isCompressorAir ?? false
                
                let isAirCool = carInspectionType?.isAirCool ?? false
                model.airSystem = isAirCool ? String.localized("inspection_air_cool_label") : String.localized("inspection_air_not_cool_label")
                model.isAirCool = isAirCool
                
                //MARK: GaugeCheck
                let isUseableGuage = carInspectionType?.isUseableGuage ?? false
                model.gaugeSystem = isUseableGuage ? string_inspection_engine_working : string_inspection_engine_not_working
                model.isUseableGuage = isUseableGuage
                
                model.summaryGaugeSystem = carInspectionType?.gaugeSummary
                model.machineLightShow = carInspectionType?.warningLightNote
                
                //MARK: ElectronicDevice
                model.summaryElectronicDevice = carInspectionType?.electronicSummary
                model.note = carInspectionType?.electronicNote
                model.isFrontLight = carInspectionType?.isFrontLightWorking ?? false
                model.isTurnLight = carInspectionType?.isTurnLightWorking ?? false
                model.isBackLight = carInspectionType?.isBackLightWorking ?? false
                model.isBrakeLight = carInspectionType?.isBrakeLightWoring ?? false
                model.isBettery = carInspectionType?.isBetteryWorking ?? false
                model.isHooter = carInspectionType?.isHooterWorking ?? false
                model.isRoundGauge = carInspectionType?.isRoundGaugeWorking ?? false
                model.isNavigator = carInspectionType?.isNavigator ?? false
                model.isNavigatorOnCar = carInspectionType?.isNavigatorBuiltIn ?? false
                model.isCd = carInspectionType?.isNavigatorCD ?? false
                model.isSDCard = carInspectionType?.isNavigatorSdcard ?? false
                model.isNoSdCard = carInspectionType?.isNavigatorNoSdcard ?? false
                model.isNoCd = carInspectionType?.isNavigatorNoCD ?? false
                
                //add 26/10/23
                model.isSideMirror1 = carInspectionType?.isSideMirror1Working ?? false
                model.isSideMirror2 = carInspectionType?.isSideMirror2Working ?? false
                model.isSideMirror3 = carInspectionType?.isSideMirror3Working ?? false
                model.isSideMirror4 = carInspectionType?.isSideMirror4Working ?? false
                model.catalytic = carInspectionType?.catalytic
                
                //found book-in number
                model.isCreate = true
                self?.getGrade(from: bookInNumber, completion: completion)
            case .failure(let error):
                
                if let errorCode = error.getMessage.errorCode , errorCode == 404 {
                    /// handler  error  pass case 404
                    self?.getGrade(from: bookInNumber, completion: completion)
                }else{
                    let response = ItemAllList.SearchType.Response(error: error.getMessage)
                    completion(response)
                }
            }
        }
        
    }
    //MARK: GetGrade
    func getGrade(from bookInNumber:String?,  completion: @escaping itemListHandler){
        print("❤️🐶 getGrade from : \(bookInNumber ?? "") ❤️🐶")
        
        showLoading()
        
        let request = BookInDetailRequest(bookInNumber: bookInNumber)
        GradeDetailService().callServiceObject(request: request) { (results) in
            
            hideLoading()
            
            switch results {
            
            case .success(let response):
                let model = DataController.shared.inspectionCarModel
                
                model.grade = response.gradeSummary
                model.e1Chehck = response.isExcellence1 ?? false
                model.e2Chehck = response.isExcellence2 ?? false
                model.e3Chehck = response.isExcellence3 ?? false
                model.e4Chehck = response.isExcellence4 ?? false
                model.e5Chehck = response.isExcellence5 ?? false
                model.g1Chehck = response.isGood1 ?? false
                model.g2Chehck = response.isGood2 ?? false
                model.g3Chehck = response.isGood3 ?? false
                model.g4Chehck = response.isGood4 ?? false
                model.a1Chehck = response.isAverage1 ?? false
                model.a2Chehck = response.isAverage2 ?? false
                model.a3Chehck = response.isAverage3 ?? false
                model.a4Chehck = response.isAverage4 ?? false
                model.f1Chehck = response.isFair1 ?? false
                model.f2Chehck = response.isFair2 ?? false
                model.f3Chehck = response.isFair3 ?? false
                model.f4Chehck = response.isFair4 ?? false
                model.f5Chehck = response.isFair5 ?? false
                model.f6Chehck = response.isFair6 ?? false
                model.f7Chehck = response.isFair7 ?? false
                model.f8Chehck = response.isFair8 ?? false
                model.f9Chehck = response.isFair9 ?? false
                model.f10Chehck = response.isFair10 ?? false
                model.f11Chehck = response.isFair11 ?? false
                model.p1Chehck = response.isPoor1 ?? false
                model.p2Chehck = response.isPoor2 ?? false
                model.p3Chehck = response.isPoor3 ?? false
                model.p4Chehck = response.isPoor4 ?? false
                model.p5Chehck = response.isPoor5 ?? false
                model.p6Chehck = response.isPoor6 ?? false
                model.p7Chehck = response.isPoor7 ?? false
                model.p8Chehck = response.isPoor8 ?? false
                model.p9Chehck = response.isPoor9 ?? false
                model.x1Chehck = response.isX ?? false
                model.y1Chehck = response.isY ?? false
                
                
                let receiverModel = DataController.shared.receiverCarModel
                let vehicle = Vehicle(registration: receiverModel.registration,
                                      vin: receiverModel.vinNumber,
                                      engineNumber: receiverModel.engineNumber,
                                      buildYear: receiverModel.year,
                                      make_BU: receiverModel.make_BU,
                                      model_BU: receiverModel.model_BU,
                                      variants: receiverModel.variants)
                let detailModel = BookInListResponse(bookInNumber: bookInNumber, vehicle: vehicle)
                let response = ItemAllList.SearchType.Response(detailModel: detailModel)
                completion(response)

            case .failure(let error):
                if let errorCode = error.getMessage.errorCode , errorCode == 404 {
                    /// handler  error  pass case 404
                    let receiverModel = DataController.shared.receiverCarModel
                    let vehicle = Vehicle(registration: receiverModel.registration,
                                          vin: receiverModel.vinNumber,
                                          engineNumber: receiverModel.engineNumber,
                                          buildYear: receiverModel.year,
                                          make_BU: receiverModel.make_BU,
                                          model_BU: receiverModel.model_BU,
                                          variants: receiverModel.variants)
                    let detailModel = BookInListResponse(bookInNumber: bookInNumber, vehicle: vehicle)
                    let response = ItemAllList.SearchType.Response(detailModel: detailModel)
                    completion(response)
                }else{
                    let response = ItemAllList.SearchType.Response(error: error.getMessage)
                    completion(response)
                }
            }
        }
         
    }
}

