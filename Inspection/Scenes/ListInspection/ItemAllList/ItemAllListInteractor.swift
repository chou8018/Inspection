//
//  ItemAllListInteractor.swift
//  Inspection
//
//  Created by Thanawat prathumset on 3/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemAllListBusinessLogic
{
  func fetchSearchTypePicker(request: ItemAllList.SearchType.Request)
    func selectSearchType(request: ItemAllList.SearchType.Request)
    func defaultItemList(request: ItemAllList.SearchType.Request)
    func searchItemList(request: ItemAllList.SearchType.Request)
    func didSelectAtTableView(request: ItemAllList.SearchType.Request)
    
    func fetchBookinDetail(request: ItemAllList.SearchType.Request, type: Selection)
    func itemSelection(request: ItemAllList.SearchType.Request)
}

protocol ItemAllListDataStore
{
  //var name: String { get set }
    var searchBy : SearchBy.TYPE? { get set }
    var modelBookinList : BookInListResponse? { get set }
    var documentData : Data? { get set }
    var pdfName : String? { get set }
}

class ItemAllListInteractor: ItemAllListBusinessLogic, ItemAllListDataStore
{
    var modelBookinList: BookInListResponse?
    var selectionType: Selection?
    
    var searchBy: SearchBy.TYPE? = .REGISTRATION_CAR
    
  var presenter: ItemAllListPresentationLogic?
  var worker: ItemAllListWorker?
    
    var workerPickup : PickUpCarPDFWorker?
    var workerSummary : SummaryCarPDFWorker?
    var workerqrcode : IMatQRCodePDFWorker?
    
    var documentData : Data?
    var pdfName: String?
     
    var photoWorker : PhotoCarWorker?
    
  // MARK: Do something
    
    func fetchSearchTypePicker(request: ItemAllList.SearchType.Request){
        let response = ItemAllList.SearchType.Response(selectSearchBy: searchBy)
        presenter?.presentSearchByText(response: response)
    }
    
    func selectSearchType(request: ItemAllList.SearchType.Request) {
        searchBy = request.selectSearchBy
        
        
        let response = ItemAllList.SearchType.Response(selectSearchBy: request.selectSearchBy)
        presenter?.presentSearchByText(response: response)
    }
    
    
    var isSearchReload : Bool?
    
    
    func defaultItemList(request: ItemAllList.SearchType.Request) {
        // displayDefault
        if let isSearchReload = self.isSearchReload , (isSearchReload == true) {
            presenter?.presentReloadSearch(response: ItemAllList.SearchType.Response())
            return
        }
        
        worker = ItemAllListWorker()
        worker?.fetchAllItemList(completion: { [weak self] (response) in
            self?.presenter?.presentTableView(response: response)
        })
        
    }
    
    func searchItemList(request: ItemAllList.SearchType.Request) {

        guard let keyword = request.keyword?.trimWhiteSpace,
              let searchBy = self.searchBy else { return }
        
        
        if keyword.isEmpty {
            isSearchReload = false
            defaultItemList(request: ItemAllList.SearchType.Request())
            return
        }
        

        worker = ItemAllListWorker()
        worker?.searchItemList(from: keyword, searchType: searchBy, completion: { [weak self] (response) in
            self?.isSearchReload = true
            
            self?.presenter?.presentTableView(response: response)
        })
    }
    
    func didSelectAtTableView(request: ItemAllList.SearchType.Request) {
        modelBookinList = request.didSelectItem
        
        let response = ItemAllList.SearchType.Response()
        presenter?.presentDidSelectItem(response: response)
        
    }
    func fetchBookinDetail(request: ItemAllList.SearchType.Request, type: Selection) {
        selectionType = type
        
        var bookInNumber = self.modelBookinList?.bookInNumber?.trimWhiteSpace
        
        if let qrcode = request.qrCodeBookInValue {
            bookInNumber = qrcode
        }

        worker = ItemAllListWorker()
        worker?.getBookIN(from: bookInNumber,  completion: { [weak self] (response) in
            if let _ = request.qrCodeBookInValue {
                //show detail
                self?.modelBookinList = response.detailModel
                
                let response = ItemAllList.SearchType.Response()
                self?.presenter?.presentDidSelectItem(response: response)
            }else{
                self?.presenter?.presentBookInDetail(response: response)
            }
            
        })
      
    }
    var  motorbikeWorker : MotorBikePDFWorker?
    
    //MARK: Generate PDF
    func itemSelection(request: ItemAllList.SearchType.Request) {
        // request bookindetail
        switch selectionType {
        case .BOOKIN:
            
            let model = DataController.shared.receiverCarModel
            switch DataController.shared.bookInType {
                   
            case .CAR, .CARWRECK:
                workerPickup = PickUpCarPDFWorker()
                workerPickup?.generatePDFForReceiver(receiverCarModel: model, completion: { [weak self] (response) in
                    self?.documentData = response.documentData
                    self?.pdfName = createPDFName("BookIn")
                    let response = ItemAllList.SearchType.Response()
                    self?.presenter?.presentPDFViewer(response: response)
                })
            case .MBIKE, .MBIKEWRECK:
                print("ðŸ›µPDF MOTORBIKE BOOKIN")
                motorbikeWorker = MotorBikePDFWorker()
                motorbikeWorker?.generateMotorBikePDFForBookIn(model: model, completion: { [weak self] response in
                    
                    self?.documentData = response.documentData
                    self?.pdfName = createPDFName("MotorBikeBookIn")
                    let response = ItemAllList.SearchType.Response()
                    self?.presenter?.presentPDFViewer(response: response)
                })
            }
           
            break
            
        case .INSPECTION:
            let bookinNo = DataController.shared.receiverCarModel.bookinNo?.trimWhiteSpace
            photoWorker = PhotoCarWorker()
            photoWorker?.fetchInspectionImageList(from: bookinNo, completion: {[weak self] photoResponse in
            
                self?.createPDF({[weak self] pdfResponse in
                    self?.documentData = pdfResponse.documentData
                    self?.pdfName = createPDFName("Inspection")
                    let response = ItemAllList.SearchType.Response()
                    self?.presenter?.presentPDFViewer(response: response)
                })
            })
      
            break
        
        case .IMAT_QRCODE:
            workerqrcode = IMatQRCodePDFWorker()
            let model = DataController.shared.receiverCarModel
            workerqrcode?.generateIMATQRCodePDF(receiverCarModel: model, completion: { [weak self] (response) in
                self?.documentData = response.documentData
                self?.pdfName = createPDFName("IMATQR")
                let response = ItemAllList.SearchType.Response()
                self?.presenter?.presentPDFViewer(response: response)
            })
            break
            
        case .DETAIL:
            
            DataController.shared.isFromEditView = true
            
            let response = ItemAllList.SearchType.Response()
            presenter?.presentDetail(response: response)
            break
            
        case .none:
            break
        }
    }
    
    var mbInspecWorkerPDF : MotorbikeInspecPDFWorker?
    
    func createPDF(_ pdfResponse:@escaping (SummaryCar.Something.Response)->()){
        let model = DataController.shared.inspectionCarModel
        let inspector = model.inspector
        
        switch DataController.shared.bookInType {
       
        case .CAR, .CARWRECK:
            workerSummary = SummaryCarPDFWorker()
            workerSummary?.generatePDFForInspection(model: model, inspector: inspector,  completion: {(response) in
                
                pdfResponse(response)
            })
        case .MBIKE, .MBIKEWRECK:
            print("ðŸ›µ CREATE PDF MOTORBIKE INSPECTION")
            mbInspecWorkerPDF = MotorbikeInspecPDFWorker()
            mbInspecWorkerPDF?.generateMBPDFForInspection(model: model, inspector: inspector,  completion: {(response) in
                
                pdfResponse(response)
            })
        
        }
    }
}
