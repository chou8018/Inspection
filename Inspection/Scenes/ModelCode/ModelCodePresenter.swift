//
//  ModelCodePresenter.swift
//  Inspection
//
//  Created by Thanawat prathumset on 9/3/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ModelCodePresentationLogic
{
  func presentSomething(response: ModelCode.Something.Response)
    func presentSearchResult(response: ModelCode.Something.Response)
    func presentMakeCarResult(response: ModelCode.Something.Response)
    func presentModelCarResult(response: ModelCode.Something.Response)
    func presentYearCarResult(response: ModelCode.Something.Response)
    func presentValidateKey(response: ModelCode.Something.Response)
    
    func presentEditModelCode(response: ModelCode.Something.Response)
}

class ModelCodePresenter: ModelCodePresentationLogic
{
  weak var viewController: ModelCodeDisplayLogic?
  
  // MARK: Do something
  
  func presentSomething(response: ModelCode.Something.Response)
  {
    let viewModel = ModelCode.Something.ViewModel()
    viewController?.displaySomething(viewModel: viewModel)
  }
    
    //MARK: presentSearchResult
    func presentSearchResult(response: ModelCode.Something.Response) {
        
        if let error = response.error {
            let errorMessage = error.message
            let viewModel = ModelCode.Something.ViewModel(errorMessage: errorMessage)
            viewController?.displayErrorSearchMessage(viewModel: viewModel)
        }else{
            let viewModel = ModelCode.Something.ViewModel(modelCodeTemplateList: response.modelCodeTemplateList, tableType: response.tableType)
            
            viewController?.displayReloadTableView(viewModel: viewModel)
        }
    }
    //MARK: presentMakeCarResult
    func presentMakeCarResult(response: ModelCode.Something.Response) {
        if let error = response.error {
            let errorMessage = error.message
            let viewModel = ModelCode.Something.ViewModel(errorMessage: errorMessage)
            viewController?.displayErrorMakeMessage(viewModel: viewModel)
        }else{
            guard let makeList = response.makeList else { return }
            let values = makeList.map({ $0.makeEn ?? "" })
            let viewModel = ModelCode.Something.ViewModel(makeList: values)
            viewController?.displayMakeCarDropDown(viewModel: viewModel)
        }
    }
    //MARK: presentModelCarResult
    func presentModelCarResult(response: ModelCode.Something.Response) {
        if let error = response.error {
            let errorMessage = error.message
            let viewModel = ModelCode.Something.ViewModel(errorMessage: errorMessage)
            viewController?.displayErrorModelMessage(viewModel: viewModel)
        }else{
            guard let modelList = response.modelList else { return }
            let values = modelList.map({ $0.modelEn ?? "" })
            let viewModel = ModelCode.Something.ViewModel(modelList: values)
            viewController?.displayModelCarDropDown(viewModel: viewModel)
        }
    }
    
    func presentYearCarResult(response: ModelCode.Something.Response) {
        let viewModel = ModelCode.Something.ViewModel(yearList: response.yearList)
        viewController?.displayYearCarDropDown(viewModel: viewModel)
    }
    
    func presentValidateKey(response: ModelCode.Something.Response) {
        let viewModel = ModelCode.Something.ViewModel()
        viewController?.validateSearchModelCode(viewModel: viewModel)
    }
    
    func presentEditModelCode(response: ModelCode.Something.Response) {
        let viewModel = ModelCode.Something.ViewModel()
        viewController?.displayToEditModelCode(viewModel: viewModel)
    }
}
