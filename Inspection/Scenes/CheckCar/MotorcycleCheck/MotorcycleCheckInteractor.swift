//
//  MotorcycleCheckInteractor.swift
//  Inspection
//
//  Created by Thanawat Pratumsat on 20/9/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MotorcycleCheckBusinessLogic
{
  func doSomething(request: MotorcycleCheck.Something.Request)
    func getProvince(request: MotorcycleCheck.Something.Request)
    
    func validationFrontTreadDepthDecimal(request: MotorcycleCheck.Something.Request)
    func validationRearTreadDepthDecimal(request: MotorcycleCheck.Something.Request)
}

protocol MotorcycleCheckDataStore
{
  //var name: String { get set }
}

class MotorcycleCheckInteractor: MotorcycleCheckBusinessLogic, MotorcycleCheckDataStore
{
  var presenter: MotorcycleCheckPresentationLogic?
  var worker: MotorcycleCheckWorker?
  //var name: String = ""
  
  // MARK: Do something
    var aboutWorker : AboutCarWorker?
    var provinceList : [ProvinceModel]?
    
  func doSomething(request: MotorcycleCheck.Something.Request)
  {
    worker = MotorcycleCheckWorker()
    worker?.doSomeWork()
    
    let response = MotorcycleCheck.Something.Response()
    presenter?.presentSomething(response: response)
  }
    
    func getProvince(request: MotorcycleCheck.Something.Request) {
        aboutWorker = AboutCarWorker()
        aboutWorker?.fetchProvince(completion: { [weak self] (response) in
            
            if let provinceList = response.provinceList {
                self?.provinceList = provinceList
            }
            let response = MotorcycleCheck.Something.Response(provinceList: response.provinceList,
                                                        error: response.error)
            self?.presenter?.presentProvinceList(response: response)
        })

    }
    
    func validationFrontTreadDepthDecimal(request: MotorcycleCheck.Something.Request) {
        
        let response = MotorcycleCheck.Something.Response(decimalNumber: validateNumber(request.decimalNumber))
        presenter?.presentFrontTreadDepthDecimal(response: response)
    }
    func validationRearTreadDepthDecimal(request: MotorcycleCheck.Something.Request) {

        let response = MotorcycleCheck.Something.Response(decimalNumber: validateNumber(request.decimalNumber))
        presenter?.presentRearTreadDepthDecimal(response: response)
    }
    
    fileprivate func validateNumber(_ decimalNumber: String?) -> String {
        guard let decimalNumber = decimalNumber?.trimWhiteSpace,
              !decimalNumber.isEmpty else {
            
            return ""
        }
        if Double(decimalNumber) != nil {
            return decimalNumber
        }else{
            let newIndex = decimalNumber.index(decimalNumber.endIndex, offsetBy: -1)
            let newString = String(decimalNumber[..<newIndex])
            return newString
        }
    }
}
