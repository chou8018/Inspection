//
//  AboutCarViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 8/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



protocol AboutCarDisplayLogic: AnyObject
{
    func displaySomething(viewModel: AboutCar.Something.ViewModel)
    func displayDropdownYear(viewModel: AboutCar.Something.ViewModel)
    func displayGasCheckBox(viewModel: AboutCar.Something.ViewModel)
    func displayCapacityNumberResult(viewModel: AboutCar.Something.ViewModel)
    
    func displayMakeCarDropdown(viewModel: AboutCar.Something.ViewModel)
    func displayModelCarDropdown(viewModel: AboutCar.Something.ViewModel)
    func displayColorCarDropdown(viewModel: AboutCar.Something.ViewModel)
    func displayProvinceDropdown(viewModel: AboutCar.Something.ViewModel)
    func displayfillModelSelected(viewModel: AboutCar.Something.ViewModel)
    func  displayBodyCarDropdown(viewModel: AboutCar.Something.ViewModel)
    
    func displayShowMakeError(viewModel: AboutCar.Something.ViewModel)
    func displayShowModelError(viewModel: AboutCar.Something.ViewModel)
    func displayShowColorError(viewModel: AboutCar.Something.ViewModel)
    func displayShowProvinceError(viewModel: AboutCar.Something.ViewModel)
    
    func displayShowBodyCarError(viewModel: AboutCar.Something.ViewModel)
    
    func displayfillBodySelected(viewModel: AboutCar.Something.ViewModel)
    func displayfillMakeSelected(viewModel: AboutCar.Something.ViewModel)
    
    func displayShowVaraintError(viewModel: AboutCar.Something.ViewModel)
    func displayVaraintDropdown(viewModel: AboutCar.Something.ViewModel)
    
    // add on 12/22/2023
    func displayGasOptionDropdown(viewModel: AboutCar.Something.ViewModel)
    func displayGasOptionError(viewModel: AboutCar.Something.ViewModel)

}

class AboutCarViewController: ViewController, AboutCarDisplayLogic
{
    var interactor: AboutCarBusinessLogic?
    var router: (NSObjectProtocol & AboutCarRoutingLogic & AboutCarDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AboutCarInteractor()
        let presenter = AboutCarPresenter()
        let router = AboutCarRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
            
            
            if let destination = segue.destination as? ModelCodeNavViewController {
                destination.callbackModelCode = { [weak self] model in
                    print("ðŸ”¸ ModelCodeNavViewController Callback \(model)")
                    
                    let request = AboutCar.Something.Request(searchCodeModel: model)
                    self?.interactor?.receiverModelCode(request: request)
                }
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUpTextField()
        doSomething()
        
        setUpYearCar()
        
    }
    
    // MARK: Do something
    @IBOutlet weak var scrollView : UIScrollView!
    
    @IBOutlet weak var engineNumberCheckButton : CheckBoxUIButton!
    @IBOutlet weak var vinNumberCheckButton : CheckBoxUIButton!
    @IBOutlet weak var validationGasCheckButton: CheckBoxUIButton!
    @IBOutlet weak var gasCheckButton: CheckBoxUIButton!
    
    
    @IBOutlet weak var brandTextfield: DropDown!
    @IBOutlet weak var typeCarTextField: DropDown!
    @IBOutlet weak var modelCarTextField: DropDown!
    @IBOutlet weak var yearTextField: DropDown!
    @IBOutlet weak var provinceTextField: DropDown!
    @IBOutlet weak var colorTextField: DropDown!
    @IBOutlet weak var codeModelTextField: DropDown!
    @IBOutlet weak var yearRegisterTextField: DropDown!
    
    @IBOutlet weak var detailModelCarLabel: UILabel!
    
    @IBOutlet weak var subModelCarTextField: DropDown!
    @IBOutlet weak var capacityTextField: CustomTextField!
    @IBOutlet weak var registrationTextField: CustomTextField!
    @IBOutlet weak var engineNumberTextField: CustomTextField!
    @IBOutlet weak var vinNumberTextField: CustomTextField!
    @IBOutlet weak var gasNumberTextField: CustomTextField!
    
    @IBOutlet weak var searchModelCar : UIButton!
    
    @IBOutlet weak var brandLineView : UIView!
    @IBOutlet weak var typeCarLineView : UIView!
    @IBOutlet weak var modelCarLineView : UIView!
    @IBOutlet weak var subModelCarLineView : UIView!
    @IBOutlet weak var capacityLineView : UIView!
    @IBOutlet weak var yearLineView : UIView!
    @IBOutlet weak var yearRegisterLineView : UIView!
    @IBOutlet weak var registrationLineView : UIView!
    @IBOutlet weak var provinceLineView : UIView!
    @IBOutlet weak var colorLineView : UIView!
    
    @IBOutlet weak var noteRegistrationLineView : UIView!
    
    @IBOutlet weak var modelCodeLineView : UIView!
    @IBOutlet weak var modelCodeTitleLabel : UILabel!
    
    @IBOutlet weak var brandTitleLabel: UILabel!
    @IBOutlet weak var typeCarTitleLabel: UILabel!
    @IBOutlet weak var modelCarTitleLabel: UILabel!
    @IBOutlet weak var subModelCarTitleLabel: UILabel!
    @IBOutlet weak var capacityTitleLabel: UILabel!
    @IBOutlet weak var yearTitleLabel: UILabel!
    @IBOutlet weak var yearRegisterTitleLabel: UILabel!
    @IBOutlet weak var registrationTitleLabel: UILabel!
    @IBOutlet weak var colorTitleLabel: UILabel!
    
    @IBOutlet weak var reasonEngineStackView: UIStackView!
    @IBOutlet weak var reasonVINStackView: UIStackView!
    @IBOutlet weak var reasonGasTankStackView: UIStackView!
    @IBOutlet weak var noteRegistrationStackView: UIStackView!
    
    @IBOutlet weak var reasonEngineTextField: CustomTextField!
    @IBOutlet weak var reasonVINTextField: CustomTextField!
    @IBOutlet weak var reasonGasTankTextField: CustomTextField!
    @IBOutlet weak var noteRegistrationTextField: CustomTextField!
    
    @IBOutlet weak var noPlateCheckButton: CheckBoxUIButton!
    @IBOutlet weak var redPlateCheckButton: CheckBoxUIButton!
    @IBOutlet weak var mismatchPlateCheckButton: CheckBoxUIButton!
    
    // local strings
    @IBOutlet weak var noPlateLabel: UILabel!
    @IBOutlet weak var redPlateLabel: UILabel!
    @IBOutlet weak var incorrectPlateLabel: UILabel!
    @IBOutlet weak var engineNumberLabel: UILabel!
    @IBOutlet weak var engineUnableToVerifiedLabel: UILabel!
    @IBOutlet weak var vinNumberLabel: UILabel!
    @IBOutlet weak var vinUnableToVerifiedLabel: UILabel!
    @IBOutlet weak var gasNumberLabel: UILabel!
    @IBOutlet weak var gasUnableToVerifiedLabel: UILabel!
    
    @IBOutlet weak var gasKeyLabel: UILabel!
    @IBOutlet weak var gasTextField: DropDown!
    @IBOutlet weak var gasNumberLineView: UIView!
    
    @IBOutlet weak var auctionPlateLabel: UILabel!
    @IBOutlet weak var auctionPlateCheckButton: CheckBoxUIButton!

    var isMakeCarLunch = false
    var isGetColorLunch = false
    var isGetProvinceLunch = false
    var isGetTypeCar = false
    var isGetGasOptionLunch = false

    override func initLocalString() {
        super.initLocalString()
        modelCodeTitleLabel.text = String.localized("car_detail_model_code_label")
        codeModelTextField.placeholder = modelCodeTitleLabel.text
        searchModelCar.setTitle(String.localized("car_detail_search_vehicle_model_button_title"), for: .normal)
        brandTitleLabel.text = String.localized("car_detail_make_label")
        brandTextfield.placeholder = brandTitleLabel.text
        typeCarTitleLabel.text = String.localized("car_detail_bodies_label")
        typeCarTextField.placeholder = typeCarTitleLabel.text
        modelCarTitleLabel.text = String.localized("car_detail_model_label")
        modelCarTextField.placeholder = modelCarTitleLabel.text
        subModelCarTitleLabel.text = String.localized("car_detail_variant_label")
        subModelCarTextField.placeholder = subModelCarTitleLabel.text
        capacityTitleLabel.text = String.localized("car_detail_engine_size_label")
        capacityTextField.placeholder = capacityTitleLabel.text
        yearTitleLabel.text = String.localized("car_detail_year_manu_label")
        yearTextField.placeholder = String.localized("car_detail_year_placeholder_label")
        yearRegisterTitleLabel.text = String.localized("car_detail_year_regis_label")
        yearRegisterTextField.placeholder = String.localized("car_detail_year_placeholder_label")
        registrationTitleLabel.text = String.localized("car_detail_registration_label")
        noPlateLabel.text = String.localized("car_detail_no_plate_label")
        redPlateLabel.text = String.localized("car_detail_red_plate_label")
        incorrectPlateLabel.text = String.localized("car_detail_incorrect_plate_label")
        noteRegistrationTextField.placeholder = String.localized("car_trunk_remarks_placeholder")
        colorTitleLabel.text = String.localized("car_detail_color_label")
        colorTextField.placeholder = colorTitleLabel.text
        provinceTextField.placeholder = String.localized("car_detail_province_label")
        engineNumberLabel.text = String.localized("car_detail_engine_number_label")
        engineNumberTextField.placeholder = engineNumberLabel.text
        engineUnableToVerifiedLabel.text = String.localized("car_detail_unable_to_verified_label")
        vinNumberLabel.text = String.localized("car_detail_vin_number_label")
        vinNumberTextField.placeholder = vinNumberLabel.text
        vinUnableToVerifiedLabel.text = String.localized("car_detail_unable_to_verified_label")
        gasNumberLabel.text = String.localized("car_detail_gas_label")
        gasNumberTextField.placeholder = gasNumberLabel.text
        gasUnableToVerifiedLabel.text = String.localized("car_detail_unable_to_verified_label")

        reasonEngineTextField.placeholder = String.localized("car_detail_reason_placeholder")
        reasonVINTextField.placeholder = String.localized("car_detail_reason_placeholder")
        reasonGasTankTextField.placeholder = String.localized("car_detail_reason_placeholder")
        
        gasKeyLabel.text = String.localized("car_detail_gas_label")
        gasTextField.placeholder = gasKeyLabel.text
        gasNumberTextField.placeholder = String.localized("car_detail_gas_number_placeholder")
        
        auctionPlateLabel.text = String.localized("car_detail_auction_plate_label")
    }
    
    func doSomething()
    {
        let request = AboutCar.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    
    //MARK: Presenter
    func displaySomething(viewModel: AboutCar.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    //MARK: CHECKBOX
    
    @IBAction func noPlateCheckTapped(_ sender: Any) {
        noPlateCheckButton.toggle { [weak self] (check) in
            self?.noteRegistrationStackView.isHidden = !check
            ///registration
            //self?.registrationTextField.setEnableView(isEnable: !check)
            self?.registrationTextField.text = check ? "NOPLATE" : ""
            DataController.shared.receiverCarModel.registration = check ? "NOPLATE" : ""
            DataController.shared.inspectionCarModel.registration = check ? "NOPLATE" : ""
            
            self?.provinceTextField.text = check ? "-" : ""
            DataController.shared.receiverCarModel.province = check ? "-" : ""
            DataController.shared.inspectionCarModel.registrationProvince = check ? "-" : ""
            
            ///registration plate
            DataController.shared.receiverCarModel.registrationPlate = check ? String.localized("car_detail_no_plate_label") : ""
            
            if check {
                self?.redPlateCheckButton.check = false
                self?.mismatchPlateCheckButton.check = false
                self?.auctionPlateCheckButton.check = false
                DataController.shared.receiverCarModel.isRegistrationMismatch = false
                DataController.shared.receiverCarModel.isRegistrationAuction = false
            }else{
                DataController.shared.receiverCarModel.registrationNote = ""
                self?.noteRegistrationTextField.text = ""
            }
        }
    }
    
    @IBAction func redPlateCheckTapped(_ sender: Any) {
        redPlateCheckButton.toggle { [weak self] (check) in
            self?.noteRegistrationStackView.isHidden = !check
            ///registration
            //self?.registrationTextField.setEnableView(isEnable: !check)
            self?.registrationTextField.text = check ? "REDPLATE" : ""
            DataController.shared.receiverCarModel.registration = check ? "REDPLATE" : ""
            DataController.shared.inspectionCarModel.registration = check ? "REDPLATE" : ""
            
            self?.provinceTextField.text = check ? "-" : ""
            DataController.shared.receiverCarModel.province = check ? "-" : ""
            DataController.shared.inspectionCarModel.registrationProvince = check ? "-" : ""
            
            ///registration plate
            DataController.shared.receiverCarModel.registrationPlate = check ? String.localized("car_detail_red_plate_label") : ""
            
            if check {
                self?.noPlateCheckButton.check = false
                self?.mismatchPlateCheckButton.check = false
                self?.auctionPlateCheckButton.check = false
                DataController.shared.receiverCarModel.isRegistrationMismatch = false
                DataController.shared.receiverCarModel.isRegistrationAuction = false

            }else{
                DataController.shared.receiverCarModel.registrationNote = ""
                self?.noteRegistrationTextField.text = ""
            }
        }
    }
    
    @IBAction func mismatchPlateCheckTapped(_ sender: Any) {
        mismatchPlateCheckButton.toggle { [weak self] (check) in
            self?.noteRegistrationStackView.isHidden = !check
            ///registration
            //self?.registrationTextField.setEnableView(isEnable: !check)
            self?.registrationTextField.text = check ? "" : ""
            DataController.shared.receiverCarModel.registration = check ? "" : ""
            DataController.shared.inspectionCarModel.registration = check ? "" : ""
            DataController.shared.receiverCarModel.isRegistrationMismatch = check
            
            self?.provinceTextField.text = check ? "-" : ""
            DataController.shared.receiverCarModel.province = check ? "-" : ""
            DataController.shared.inspectionCarModel.registrationProvince = check ? "-" : ""
            
            ///registration plate
            DataController.shared.receiverCarModel.registrationPlate = check ? String.localized("car_detail_incorrect_plate_label") : ""
            
            if check {
                self?.noPlateCheckButton.check = false
                self?.redPlateCheckButton.check = false
                self?.auctionPlateCheckButton.check = false
                DataController.shared.receiverCarModel.isRegistrationAuction = false

            }else{
                DataController.shared.receiverCarModel.registrationNote = ""
                self?.noteRegistrationTextField.text = ""
            }
        }
    }
    
    @IBAction func auctionPlateCheckTapped(_ sender: Any) {
        auctionPlateCheckButton.toggle { [weak self] (check) in
            self?.noteRegistrationStackView.isHidden = !check
            ///registration
            //self?.registrationTextField.setEnableView(isEnable: !check)
            self?.registrationTextField.text = check ? "" : ""
            DataController.shared.receiverCarModel.registration = check ? "" : ""
            DataController.shared.inspectionCarModel.registration = check ? "" : ""
            DataController.shared.receiverCarModel.isRegistrationAuction = check

            self?.provinceTextField.text = check ? "-" : ""
            DataController.shared.receiverCarModel.province = check ? "-" : ""
            DataController.shared.inspectionCarModel.registrationProvince = check ? "-" : ""
            
            ///registration plate
            DataController.shared.receiverCarModel.registrationPlate = check ? String.localized("car_detail_auction_plate_label") : ""
            
            if check {
                self?.noPlateCheckButton.check = false
                self?.redPlateCheckButton.check = false
                self?.mismatchPlateCheckButton.check = false
                DataController.shared.receiverCarModel.isRegistrationMismatch = false

            }else{
                DataController.shared.receiverCarModel.registrationNote = ""
                self?.noteRegistrationTextField.text = ""
            }
        }
    }
    
    @IBAction func engineCheckTapped(_ sender: Any) {
        engineNumberCheckButton.toggle { [weak self] check in
            DataController.shared.receiverCarModel.isInValidEngineNumber = check
            self?.reasonEngineStackView.isHidden = !check
            
            self?.engineNumberTextField.setEnableView(isEnable: !check)
            
            if !check {
                self?.reasonEngineTextField.text = ""
                DataController.shared.receiverCarModel.reasonInValidEngineNumber  = ""
                print("ðŸ”¸ remove reaseon invalid engine")
            }else{
                self?.engineNumberTextField.text = ""
                DataController.shared.receiverCarModel.engineNumber = ""
            }
        }
    }
    
    
    @IBAction func vinCheckTapped(_ sender: Any) {
        vinNumberCheckButton.toggle { [weak self] check in
            DataController.shared.receiverCarModel.isInValidVinNumber = check
            self?.reasonVINStackView.isHidden = !check
            
            self?.vinNumberTextField.setEnableView(isEnable: !check)
            
            if !check {
                self?.reasonVINTextField.text = ""
                
                
                DataController.shared.receiverCarModel.reasonInValidVinNumber  = ""
                print("ðŸ”¸ remove reaseon invalid vin ")
            }else{
                self?.vinNumberTextField.text = ""
                DataController.shared.receiverCarModel.vinNumber = ""
            }
        }
    }
    
    @IBAction func validationGasTapped(_ sender: Any) {
        validationGasCheckButton.toggle { [weak self] check in
            DataController.shared.receiverCarModel.isInValidGasNumber = check
            self?.reasonGasTankStackView.isHidden = !check
            
            self?.gasNumberTextField.setEnableView(isEnable: !check)
            
            if !check {
                self?.reasonGasTankTextField.text = ""
                
                DataController.shared.receiverCarModel.reasonInValidGasNumber  = ""
                print("ðŸ”¸ remove reaseon invalid gas tank ")
            }else{
                self?.gasNumberTextField.text = ""
                DataController.shared.receiverCarModel.gasNumber = ""
            }
        }
    }
    
    @IBAction func gasCheckTapped(_ sender: Any) {
        gasCheckButton.toggle { [weak self] (check) in
            if !check {
                DataController.shared.receiverCarModel.gasNumber = nil
                self?.gasNumberTextField.text = ""
            }
            DataController.shared.receiverCarModel.isGasTank = check
        }
    }
    
    func displayGasCheckBox(viewModel: AboutCar.Something.ViewModel) {
        gasCheckButton.check = viewModel.isGasNumber ?? false
        DataController.shared.receiverCarModel.isGasTank = viewModel.isGasNumber ?? false
    }
    
    func displayGasOptions() {
        let gasValues = [String.localized("car_detail_gas_installed_label"), String.localized("car_detail_gas_removed_label"), String.localized("car_detail_unable_to_verified_label")]
        setValue(to: gasTextField, values: gasValues) { selectedText, index, id in
            self.gasTextField.text = selectedText
            
            // gas installed
            if index == 0 {
                self.gasNumberTextField.isHidden = false
                self.gasNumberLineView.isHidden = false
                DataController.shared.receiverCarModel.isGasTank = true
            } else {
                self.gasNumberTextField.isHidden = true
                self.gasNumberLineView.isHidden = true
                DataController.shared.receiverCarModel.isGasTank = false
            }
            
            DataController.shared.receiverCarModel.gasOption = selectedText
        }
    }
    
    //MARK: Call CodeModelPopup
    @IBAction func searchTapped(_ sender: Any) {
        performSegue(withIdentifier: "ModelCodePopup", sender: nil)
    }
    
    
    //MARK: Selected Car Model
    func displayfillModelSelected(viewModel: AboutCar.Something.ViewModel) {
        //model code
        DataController.shared.receiverCarModel.codeModelCar = viewModel.modelCode
        DataController.shared.receiverCarModel.modelCodeId = viewModel.modelCodeId
        codeModelTextField.text = viewModel.modelCode
        
        /// note
        detailModelCarLabel.isHidden = false
        detailModelCarLabel.text = viewModel.discriptionModelSelect
        DataController.shared.receiverCarModel.detailModel = viewModel.discriptionModelSelect
        
        /// make car
        interactor?.setMakeCode(request: AboutCar.Something.Request(makeCode: viewModel.make))
        //brandTextfield.text = viewModel.make
        
        /// model car
        modelCarTextField.text = viewModel.model
        DataController.shared.receiverCarModel.modelCar = viewModel.model
        DataController.shared.receiverCarModel.model_BU = viewModel.model_BU
        DataController.shared.receiverCarModel.model_LO = viewModel.model_LO
        
        /// varaints
        DataController.shared.receiverCarModel.variants = viewModel.variants
        subModelCarTextField.text = viewModel.variants
        
        /// CC
        DataController.shared.receiverCarModel.engineCapacity = viewModel.engineCapacity?.toString()
        capacityTextField.text = viewModel.engineCapacity?.toString()
        
        /// buildYear
        yearTextField.selectedByOption = viewModel.buildYear
        
        /// car type
        interactor?.setCarTypeCode(request: AboutCar.Something.Request(typeCarCode: viewModel.body))
        
        DataController.shared.receiverCarModel.drive = viewModel.drive
        DataController.shared.receiverCarModel.body = viewModel.body
        DataController.shared.receiverCarModel.gear = viewModel.gear
        DataController.shared.receiverCarModel.fuelDelivery = viewModel.fuelDelivery
        DataController.shared.receiverCarModel.fuelType = viewModel.fuelType
        
        DataController.shared.receiverCarModel.gearbox = viewModel.gearbox
        
        
        if let fuelDelivery = viewModel.fuelDelivery {
            var fuelDeliveryName = ""
            switch  fuelDelivery {
            case "D":
                fuelDeliveryName = "Direct Injection" // direct injection
            case "I":
                fuelDeliveryName = String.localized("car_engine_injector_label") // injection
            case "N":
                fuelDeliveryName = String.localized("car_engine_carburetor_label") // naturally aspirated
            case "T":
                fuelDeliveryName = String.localized("car_engine_turbocharger_label") // turbo
            default:
                fuelDeliveryName = "N/A"
            }
            DataController.shared.receiverCarModel.fuelDeliveryName = fuelDeliveryName
            
            DataController.shared.inspectionCarModel.fuelDeliveryType = fuelDeliveryName
        }
        
        //vinNumberTextField.text = viewModel.chassisNumber
        //DataController.shared.receiverCarModel.vinNumber = viewModel.chassisNumber
    }
    
    func displayfillMakeSelected(viewModel: AboutCar.Something.ViewModel) {
        brandTextfield.text = viewModel.make_bu
    }
    
    func displayfillBodySelected(viewModel: AboutCar.Something.ViewModel) {
        typeCarTextField.text = viewModel.body_bu
    }
    
    
    //MARK: Make
    func getMakeCar(){
        
        let request  = AboutCar.Something.Request()
        interactor?.getMakeCar(request: request)
    }
    func displayShowMakeError(viewModel: AboutCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.loadRetryApi()
        }
    }
    
    func displayMakeCarDropdown(viewModel: AboutCar.Something.ViewModel) {
        
        guard let values = viewModel.makeList else { return }
        isMakeCarLunch = true
        
        setValue(to: brandTextfield, values: values) { [weak self] (selectValue, _, _) in
            self?.brandTextfield.text = selectValue
            /// clear data model car
            DataController.shared.receiverCarModel.modelCar = nil
            DataController.shared.receiverCarModel.model_BU = nil
            DataController.shared.receiverCarModel.model_LO = nil
            self?.modelCarTextField.text = ""
            
            // clear data sub model
            DataController.shared.receiverCarModel.variants = nil
            self?.subModelCarTextField.text = ""
            
            self?.interactor?.selectMake(request: AboutCar.Something.Request(make: selectValue))
            self?.getModelCar()
            
        }
    }
    //MARK: Model
    func getModelCar(){
        
        let request = AboutCar.Something.Request()
        self.interactor?.getModelCar(request: request)
    }
    func displayShowModelError(viewModel: AboutCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.getModelCar()
        }
    }
    func displayModelCarDropdown(viewModel: AboutCar.Something.ViewModel) {
        
        guard let values = viewModel.modelList else { return }
        
        setValue(to: modelCarTextField, values: values) { [weak self] (selectValue, _, _) in
            self?.modelCarTextField.text = selectValue
            /// clear data sub model
            DataController.shared.receiverCarModel.variants = nil
            self?.subModelCarTextField.text = ""
            
            
            let request = AboutCar.Something.Request(modelCar : selectValue)
            self?.interactor?.selectModelCar(request : request)
            self?.getVaraint()
        }
    }
    
    //MARK: Varaint
    func getVaraint(){
        let request = AboutCar.Something.Request()
        self.interactor?.getVaraintCar(request: request)
    }
    
    func displayShowVaraintError(viewModel: AboutCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.getVaraint()
        }
    }
    func displayVaraintDropdown(viewModel: AboutCar.Something.ViewModel) {
        
        guard let values = viewModel.varaintsList else { return }
        
        setValue(to: subModelCarTextField, values: values) { [weak self] (selectValue, _, _) in
            self?.subModelCarTextField.text = selectValue
            
            let request = AboutCar.Something.Request(varaints_bu : selectValue)
            self?.interactor?.selectVaraintCar(request : request)
        }
    }
    
    //MARK: gasOption
    func getGasOption(){
        
        let request = AboutCar.Something.Request()
        interactor?.getGasOption(request: request)
    }
    func displayGasOptionError(viewModel: AboutCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.loadRetryApi()
        }
    }
    func displayGasOptionDropdown(viewModel: AboutCar.Something.ViewModel) {
        
        guard let values = viewModel.gasOption else { return }
        isGetGasOptionLunch = true
        
        setValue(to: gasTextField, values: values) { selectedText, index, id in
            self.gasTextField.text = selectedText
            
            // gas installed
            if index == 0 {
                self.gasNumberTextField.isHidden = false
                self.gasNumberLineView.isHidden = false
                DataController.shared.receiverCarModel.isGasTank = true
            } else {
                self.gasNumberTextField.isHidden = true
                self.gasNumberLineView.isHidden = true
                DataController.shared.receiverCarModel.isGasTank = false
            }
            
            DataController.shared.receiverCarModel.gasOption = selectedText
            DataController.shared.receiverCarModel.gasOptionId = id
        }
    }
    
    //MARK: Color
    func getColorCar(){
        
        let request = AboutCar.Something.Request()
        interactor?.getColorCar(request: request)
    }
    func displayShowColorError(viewModel: AboutCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.loadRetryApi()
        }
    }
    func displayColorCarDropdown(viewModel: AboutCar.Something.ViewModel) {
        
        guard let values = viewModel.colorList else { return }
        isGetColorLunch = true
        
        setValue(to: colorTextField, values: values) { [weak self] (selectValue, _, _) in
            DataController.shared.receiverCarModel.colorCar = selectValue
            self?.colorTextField.text = selectValue
            
            let request = AboutCar.Something.Request(colorCar: selectValue)
            self?.interactor?.setColour1(request: request)
        }
    }
    
    //MARK: Province
    func getProvince(){
        
        let request = AboutCar.Something.Request()
        interactor?.getProvince(request: request)
    }
    func displayShowProvinceError(viewModel: AboutCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.loadRetryApi()
        }
    }
    func displayProvinceDropdown(viewModel: AboutCar.Something.ViewModel) {
        
        guard let values = viewModel.provinceList else { return }
        isGetProvinceLunch = true
        
        setValue(to: provinceTextField, values: values) { [weak self] (selectValue, _, _) in
            DataController.shared.receiverCarModel.province = selectValue
            DataController.shared.inspectionCarModel.registrationProvince = selectValue
            self?.provinceTextField.text = selectValue
            
            let request = AboutCar.Something.Request(province: selectValue)
            self?.interactor?.setProvince1(request: request)
        }
    }
    
    //MARK: BodyCar
    func getBodyCar(){
        
        let request = AboutCar.Something.Request()
        interactor?.getCarType(request: request)
    }
    func displayShowBodyCarError(viewModel: AboutCar.Something.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.loadRetryApi()
        }
    }
    func displayBodyCarDropdown(viewModel: AboutCar.Something.ViewModel) {
        
        guard let values = viewModel.bodyList else { return }
        isGetTypeCar = true
        
        setValue(to: typeCarTextField, values: values) { [weak self] (selectValue, _, _) in
            DataController.shared.receiverCarModel.bodyDesc_BU = selectValue
            DataController.shared.receiverCarModel.bodyDesc_LO = selectValue
            self?.typeCarTextField.text = selectValue
            
            let request = AboutCar.Something.Request(typeCar: selectValue)
            self?.interactor?.setCarType(request: request)
        }
    }
    
    //MARK: Year
    func setUpYearCar(){
        let request = AboutCar.Something.Request(starterYear: 1980)
        interactor?.setUpYear(request: request)
    }
    
    func displayDropdownYear(viewModel: AboutCar.Something.ViewModel) {
        setValue(to: yearTextField, values: viewModel.yearLists ?? []) {
            [weak self] (selectValue, _, _) in
            DataController.shared.receiverCarModel.year = selectValue
            self?.yearTextField.text = selectValue
        }
        setValue(to: yearRegisterTextField, values: viewModel.yearLists ?? []) {
            [weak self] (selectValue, _, _) in
            DataController.shared.receiverCarModel.registrationYear = selectValue
            self?.yearRegisterTextField.text =  selectValue
        }
    }
    
    func setValue(to textfield:DropDown , values: [String], didSelected:@escaping (_ selectedText: String, _ index: Int , _ id:Int )->() ){
        textfield.optionArray = values
        textfield.didSelect(completion: didSelected)
    }
    //MARK: Setup TextField
    func setUpTextField(){
        subModelCarTextField.autocorrectionType = .no
        capacityTextField.autocorrectionType = .no
        registrationTextField.autocorrectionType = .no
        engineNumberTextField.autocorrectionType = .no
        vinNumberTextField.autocorrectionType = .no
        gasNumberTextField.autocorrectionType = .no
        brandTextfield.autocorrectionType = .no
        typeCarTextField.autocorrectionType = .no
        modelCarTextField.autocorrectionType = .no
        yearTextField.autocorrectionType = .no
        yearRegisterTextField.autocorrectionType = .no
        provinceTextField.autocorrectionType = .no
        colorTextField.autocorrectionType = .no
        //        codeModelTextField.autocorrectionType = .no
        
        reasonEngineTextField.autocorrectionType = .no
        reasonVINTextField.autocorrectionType = .no
        reasonGasTankTextField.autocorrectionType = .no
        noteRegistrationTextField.autocorrectionType = .no
        
        capacityTextField.delegate = self
        registrationTextField.delegate = self
        engineNumberTextField.delegate = self
        vinNumberTextField.delegate = self
        gasNumberTextField.delegate = self
        
        reasonEngineTextField.delegate = self
        reasonVINTextField.delegate = self
        reasonGasTankTextField.delegate = self
        noteRegistrationTextField.delegate = self
        
        //textfield
        addTarget(from: subModelCarTextField)
        addTarget(from: capacityTextField)
        addTarget(from: registrationTextField)
        addTarget(from: engineNumberTextField)
        addTarget(from: vinNumberTextField)
        addTarget(from: gasNumberTextField)
        
        addTarget(from: reasonEngineTextField)
        addTarget(from: reasonVINTextField)
        addTarget(from: reasonGasTankTextField)
        addTarget(from: noteRegistrationTextField)
        
        
        
        //dropdown
        addTarget(from: brandTextfield)
        addTarget(from: typeCarTextField)
        addTarget(from: modelCarTextField)
        addTarget(from: yearTextField)
        addTarget(from: yearRegisterTextField)
        addTarget(from: provinceTextField)
        addTarget(from: colorTextField)
        //        addTarget(from: codeModelTextField)
        
        
        detailModelCarLabel.isHidden = true
        
        ///config search by prefix name
        colorTextField.isPrefix = true
    }
    
    fileprivate func addTarget(from textfield: UITextField ){
        textfield.addTarget(self, action: #selector(textFieldDidChange(_:)),for: .editingChanged)
    }
    
    func displayCapacityNumberResult(viewModel: AboutCar.Something.ViewModel) {
        capacityTextField.text = viewModel.validateResult
    }
    
    
    
    //MARK: Load Retry API Started Page
    func loadRetryApi() {
        if !isMakeCarLunch {
            getMakeCar()
        }
        if !isGetColorLunch {
            getColorCar()
        }
        if !isGetProvinceLunch {
            getProvince()
        }
        if !isGetTypeCar {
            getBodyCar()
        }
        
        if !isGetGasOptionLunch {
            getGasOption()
        }
    }
    
    @objc func prepareData(){
        let model = DataController.shared.receiverCarModel
        
        engineNumberCheckButton.check = model.isInValidEngineNumber ?? false
        vinNumberCheckButton.check = model.isInValidVinNumber ?? false
        validationGasCheckButton.check = model.isInValidGasNumber ?? false
        
        
        /// reason field set hidden    default = hidden
        reasonEngineStackView.isHidden = !(model.isInValidEngineNumber ?? false)
        reasonVINStackView.isHidden = !(model.isInValidVinNumber ?? false)
        reasonGasTankStackView.isHidden = !(model.isInValidGasNumber ?? false)
        
        
        engineNumberTextField.setEnableView(isEnable: !(model.isInValidEngineNumber ?? false))
        vinNumberTextField.setEnableView(isEnable: !(model.isInValidVinNumber ?? false))
//        gasNumberTextField.setEnableView(isEnable: !(model.isInValidGasNumber ?? false))
        
        
        if let registrationPlate = model.registrationPlate, !registrationPlate.trimWhiteSpace.isEmpty {
            
            switch registrationPlate {
            case String.localized("car_detail_no_plate_label"):
                noPlateCheckButton.check = true
            case String.localized("car_detail_red_plate_label"):
                redPlateCheckButton.check = true
            case String.localized("car_detail_incorrect_plate_label"):
                mismatchPlateCheckButton.check = true
            case String.localized("car_detail_auction_plate_label"):
                auctionPlateCheckButton.check = true
            default:
                break
            }
            
            noteRegistrationStackView.isHidden = false
            //registrationTextField.setEnableView(isEnable: false)
        }else{
            noteRegistrationStackView.isHidden = true
            //registrationTextField.setEnableView(isEnable: true)
        }
        
        
        
        gasCheckButton.check = model.isGasTank ?? false
        
        brandTextfield.text = model.make_BU
        typeCarTextField.text = model.bodyDesc_BU
        modelCarTextField.text = model.model_BU
        yearTextField.text = model.year
        provinceTextField.text = model.province
        colorTextField.text = model.colorCar
        codeModelTextField.text = model.codeModelCar
        yearRegisterTextField.text = model.registrationYear
        
        detailModelCarLabel.text = model.detailModel
        detailModelCarLabel.isHidden = model.detailModel == nil
        
        subModelCarTextField.text = model.variants
        capacityTextField.text = model.engineCapacity
        registrationTextField.text = model.registration
        engineNumberTextField.text = model.engineNumber
        vinNumberTextField.text = model.vinNumber
        gasNumberTextField.text = model.gasNumber
        
        reasonEngineTextField.text = model.reasonInValidEngineNumber
        reasonVINTextField.text = model.reasonInValidVinNumber
        reasonGasTankTextField.text = model.reasonInValidGasNumber
        noteRegistrationTextField.text = model.registrationNote
        
        if model.isGasTank == true {
            gasNumberTextField.isHidden = false
            gasNumberLineView.isHidden = false
        } else {
            gasNumberTextField.isHidden = true
            gasNumberLineView.isHidden = true
        }
        gasTextField.text = DataController.shared.receiverCarModel.gasOption

    }
    
    @objc func updateView(){
        let isEnabled = getEnableView()
        let model = DataController.shared.receiverCarModel
        
        engineNumberCheckButton.setEnableView(isEnable: isEnabled)
        vinNumberCheckButton.setEnableView(isEnable: isEnabled)
        validationGasCheckButton.setEnableView(isEnable: isEnabled)
        gasCheckButton.setEnableView(isEnable: isEnabled)
        
        searchModelCar.isUserInteractionEnabled = isEnabled
        
        brandTextfield.setEnableView(isEnable: isEnabled)
        typeCarTextField.setEnableView(isEnable: isEnabled)
        modelCarTextField.setEnableView(isEnable: isEnabled)
        yearTextField.setEnableView(isEnable: isEnabled)
        provinceTextField.setEnableView(isEnable: isEnabled)
        colorTextField.setEnableView(isEnable: isEnabled)
        codeModelTextField.setEnableView(isEnable: false)
        yearRegisterTextField.setEnableView(isEnable: isEnabled)
        subModelCarTextField.setEnableView(isEnable: isEnabled)
        capacityTextField.setEnableView(isEnable: isEnabled)
        
        
        
        //MARK: Validation
        brandLineView.validateLineView(model.validMake)
        typeCarLineView.validateLineView(model.validTypeCar)
        modelCarLineView.validateLineView(model.validModelCar)
        subModelCarLineView.validateLineView(model.validVariantsCar)
        capacityLineView.validateLineView(model.validCapacityCar)
        yearLineView.validateLineView(model.validYearMake)
        yearRegisterLineView.validateLineView(model.validYearRegister)
        registrationLineView.validateLineView(model.validRegistration)
        provinceLineView.validateLineView(model.validProvince)
        colorLineView.validateLineView(model.validColorCar)
        
        modelCodeLineView.validateLineView(model.validModelCode)
        
        
        brandTitleLabel.validateLabel(model.validMake)
        typeCarTitleLabel.validateLabel(model.validTypeCar)
        modelCarTitleLabel.validateLabel(model.validModelCar)
        subModelCarTitleLabel.validateLabel(model.validVariantsCar)
        capacityTitleLabel.validateLabel(model.validCapacityCar)
        yearTitleLabel.validateLabel(model.validYearMake)
        yearRegisterTitleLabel.validateLabel(model.validYearRegister)
        registrationTitleLabel.validateLabel(model.validRegistration)
        colorTitleLabel.validateLabel(model.validColorCar)
        
        modelCodeTitleLabel.validateLabel(model.validModelCode)
        
        
        noteRegistrationLineView.validateLineView(model.validNoteRegistration)
        gasNumberLineView.validateLineView(model.validGasNumber)
    }
    
    
}
// MARK: UITextFieldDelegate
extension AboutCarViewController : UITextFieldDelegate {
    @objc func textFieldDidChange(_ textField: UITextField) {
        //print(textField.text)
        
        
        switch textField {
        case codeModelTextField:
            print("ignored Model Code ")
            //            self.detailModelCarLabel.isHidden = true
            //            DataController.shared.receiverCarModel.codeModelCar = textField.text
            
        case brandTextfield:
            DataController.shared.receiverCarModel.make_BU = nil
            DataController.shared.receiverCarModel.make_LO = nil
            
        case typeCarTextField:
            DataController.shared.receiverCarModel.body = nil
            DataController.shared.receiverCarModel.bodyDesc_BU = textField.text
            DataController.shared.receiverCarModel.bodyDesc_LO = textField.text
            
        case modelCarTextField:
            DataController.shared.receiverCarModel.modelCar = textField.text
            DataController.shared.receiverCarModel.model_BU = textField.text
            DataController.shared.receiverCarModel.model_LO = textField.text
            
        case subModelCarTextField:
            DataController.shared.receiverCarModel.variants = textField.text
            
        case yearRegisterTextField:
            DataController.shared.receiverCarModel.registrationYear = textField.text
            
        case yearTextField:
            DataController.shared.receiverCarModel.year = textField.text
            
        case provinceTextField:
            DataController.shared.receiverCarModel.province = textField.text
            DataController.shared.inspectionCarModel.registrationProvince = textField.text
            
        case registrationTextField:
            //let request = AboutCar.Something.Request(registration: textField.text)
            //self.interactor?.validateRegistration(request: request)
            DataController.shared.receiverCarModel.registration = textField.text
            DataController.shared.inspectionCarModel.registration = textField.text
            
        case colorTextField:
            DataController.shared.receiverCarModel.colorCar = nil
            
        case capacityTextField:
            let request = AboutCar.Something.Request(capacityNumber: textField.text)
            self.interactor?.validateCapacityNumber(request: request)
            DataController.shared.receiverCarModel.engineCapacity = textField.text
            break
            
        case gasNumberTextField:
            let request = AboutCar.Something.Request(gasNumber: textField.text)
            self.interactor?.checkGasNUmber(request: request)
            DataController.shared.receiverCarModel.gasNumber = textField.text
            
        case vinNumberTextField:
            DataController.shared.receiverCarModel.vinNumber = textField.text
            
        case engineNumberTextField:
            DataController.shared.receiverCarModel.engineNumber = textField.text
            
        case reasonEngineTextField:
            DataController.shared.receiverCarModel.reasonInValidEngineNumber = textField.text
            
        case reasonVINTextField:
            DataController.shared.receiverCarModel.reasonInValidVinNumber = textField.text
            
        case reasonGasTankTextField:
            DataController.shared.receiverCarModel.reasonInValidGasNumber = textField.text
            
        case noteRegistrationTextField:
            DataController.shared.receiverCarModel.registrationNote = textField.text
        default:
            break
        }
    }
    
    
    
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        
        
        return true
    }
    
    
}
//MARK: keyboard
extension AboutCarViewController {
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        scrollView.registKeyboardNotification()
//        displayGasOptions()
        loadRetryApi()
        prepareData()
        updateView()
        
        NotificationCenter.default.addObserver(self, selector: #selector(updateView), name: NSNotification.Name("updateUI"), object: nil)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        scrollView.resignKeyboardNotification()
        
        NotificationCenter.default.removeObserver(self)
    }
}
