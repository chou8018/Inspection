//
//  DateTimeInteractor.swift
//  Inspection
//
//  Created by Thanawat prathumset on 17/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DateTimeBusinessLogic
{
  func doSomething(request: DateTime.Something.Request)
    func getDateFormatOnValueChange(request: DateTime.Something.Request)
    func setDatePicker(request: DateTime.Something.Request)
}

protocol DateTimeDataStore
{
  //var name: String { get set }
    var currentDate: Date? { get set }
}

class DateTimeInteractor: DateTimeBusinessLogic, DateTimeDataStore
{
  var presenter: DateTimePresentationLogic?
  var worker: DateTimeWorker?
  //var name: String = ""
    var currentDate: Date?
  // MARK: Do something
  
  func doSomething(request: DateTime.Something.Request)
  {
    worker = DateTimeWorker()
    worker?.doSomeWork()
    
    let response = DateTime.Something.Response()
    presenter?.presentSomething(response: response)
  }
    
    func setDatePicker(request: DateTime.Something.Request) {
        guard let date = currentDate else { return }
        let response = DateTime.Something.Response(currentDate: date)
        presenter?.presentDateToPicker(response: response)
        
    }
    func getDateFormatOnValueChange(request: DateTime.Something.Request) {
        guard let date = request.date else { return }
        
        let day = DateFormatter().dateFormat(from: date, dateFormat: "dd-MM-yyyy")
        let time = DateFormatter().dateFormat(from: date, dateFormat: "HH:mm")
        
        let dateTuple = (day , time)
        let response = DateTime.Something.Response(dateTuple: dateTuple)
        presenter?.presentDateFormat(response: response)
    }
    
   
}
