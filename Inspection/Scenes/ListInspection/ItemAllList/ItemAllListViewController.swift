//
//  ItemAllListViewController.swift
//  Inspection
//
//  Created by Thanawat prathumset on 3/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemAllListDisplayLogic: AnyObject
{
    func displayTextSearchByType(viewModel: ItemAllList.SearchType.ViewModel)
    func displayResultSearchToTableView(viewModel: ItemAllList.SearchType.ViewModel)
    func didSelectItemTableView(viewModel: ItemAllList.SearchType.ViewModel)
    
    func displayShowDetail(viewModel: ItemAllList.SearchType.ViewModel)
    func displayShowPdfViewer(viewModel: ItemAllList.SearchType.ViewModel)
    
    func displayBookInDetail(viewModel: ItemAllList.SearchType.ViewModel)
    func displayErrorGetBookInDetail(viewModel: ItemAllList.SearchType.ViewModel)
    
    func displayErrorFetchBookInList(viewModel: ItemAllList.SearchType.ViewModel)
    func displayReloadSearch(viewModel: ItemAllList.SearchType.ViewModel)
}

class ItemAllListViewController: ViewController, ItemAllListDisplayLogic
{
    var interactor: ItemAllListBusinessLogic?
    var router: (NSObjectProtocol & ItemAllListRoutingLogic & ItemAllListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ItemAllListInteractor()
        let presenter = ItemAllListPresenter()
        let router = ItemAllListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
            
            if let destination = segue.destination as? SearchByViewController {
                destination.selectSearchType = {[weak self] type in
                    let request = ItemAllList.SearchType.Request(selectSearchBy: type)
                    self?.interactor?.selectSearchType(request: request)
                }
            }
            
            if let destinationQR = segue.destination as? ReadingQRViewController {
                destinationQR.callbackQRCode = {[weak self] qrCodeBookInValue in
                    let request = ItemAllList.SearchType.Request(qrCodeBookInValue: qrCodeBookInValue)
                    self?.interactor?.fetchBookinDetail(request: request, type: .DETAIL)
                    
                }
            }
            
            if let destinationQR = segue.destination as? DetailViewController {
                destinationQR.callbackSelectOption = {[weak self] option in
                    let request = ItemAllList.SearchType.Request()
                    self?.interactor?.fetchBookinDetail(request: request, type: option)
                }
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUpView()
        
        setUpTableView()
        setUpTextFieldSearch()
        
        fetchPicker()
        
        
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var searchView: CustomUIView!
    @IBOutlet weak var searchByView: CustomUIView!
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var searchImageView: UIImageView!
    @IBOutlet weak var searchByLabel: UILabel!
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var headerRowView: CustomUIView!
    
    @IBOutlet weak var qrcodeButtonView: CustomUIView!
    @IBOutlet weak var searchButtonView: CustomUIView!
    var  dataSource = ItemListDataSource()
    
    // local strings
    @IBOutlet weak var searchLabel: UILabel!
    @IBOutlet weak var detailsTitleLabel: UILabel!
    @IBOutlet weak var registrationNumberTitleLabel: UILabel!
    @IBOutlet weak var bookInNumberTitleLabel: UILabel!

    override func initLocalString() {
        super.initLocalString()
        
        searchByLabel.text = String.localized("inspection_list_car_registration_label")
        searchTextField.placeholder = String.localized("inspection_list_car_registration_placeholder_label")
        searchLabel.text = String.localized("inspection_list_search_label")
        detailsTitleLabel.text = String.localized("inspection_gauges_details_placeholder_label")
        registrationNumberTitleLabel.text = String.localized("inspection_list_registration_number_label")
        bookInNumberTitleLabel.text = String.localized("inspection_list_book_in_number_label")
    }
    
    //MARK: SetUpView
    func setUpView(){
        self.registTapGesture()
        
        searchByView.isUserInteractionEnabled = true
        searchByView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(performSearchBy)))
        
        qrcodeButtonView.isUserInteractionEnabled = true
        qrcodeButtonView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(performQRcode)))
    }
    
    @objc func performQRcode(){
        performSegue(withIdentifier: "qrcode", sender: nil)
    }
    
    @objc func performSearchBy(){
        performSegue(withIdentifier: "searchByPicker", sender: nil)
    }
    
    
    func setUpTableView(){
        tableView.dataSource = dataSource
        tableView.delegate = dataSource
        
        dataSource.didSelectRowAt = {[weak self] item in
            let request = ItemAllList.SearchType.Request(didSelectItem : item)
            self?.interactor?.didSelectAtTableView(request: request)
        }
    }
    
    func setUpTextFieldSearch(){
        searchTextField.autocorrectionType = .no
        searchTextField.delegate = self
        
        searchButtonView.isUserInteractionEnabled = true
        searchButtonView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(search)))
        
        searchImageView.isUserInteractionEnabled = true
        searchImageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(search)))
    }
    
    
    //MARK: interactor fetchPicker
    func fetchPicker() {
        let request = ItemAllList.SearchType.Request()
        interactor?.fetchSearchTypePicker(request: request)
    }
    
    //MARK: interactor fetchDefault
    func fetchDefaultItemList() {
        let request = ItemAllList.SearchType.Request()
        interactor?.defaultItemList(request: request)
    }
    
    //MARK: interactor search
    @objc func search(){
        searchTextField.resignFirstResponder()
        let request = ItemAllList.SearchType.Request(keyword: searchTextField.text!)
        interactor?.searchItemList(request: request)
    }
    
    //MARK: Display SearchBy
    func displayTextSearchByType(viewModel: ItemAllList.SearchType.ViewModel) {
        searchByLabel.text = viewModel.searchByText
    }
    
    //MARK: Display Table ItemList
    func displayResultSearchToTableView(viewModel: ItemAllList.SearchType.ViewModel) {
        dataSource.itemList = viewModel.itemList ?? []
        dataSource.tableType = viewModel.tableType ?? .Default
        tableView.reloadData()
    }
    
    func displayReloadSearch(viewModel: ItemAllList.SearchType.ViewModel) {
        search()
    }
    
    func displayBookInDetail(viewModel: ItemAllList.SearchType.ViewModel) {
        let request = ItemAllList.SearchType.Request()
        interactor?.itemSelection(request: request)
    }
    
    func displayErrorGetBookInDetail(viewModel: ItemAllList.SearchType.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return  }
        alertErrorMessageOKAction(message: errorMessage) {
            //pass
        }
    }
    
    func displayErrorFetchBookInList(viewModel: ItemAllList.SearchType.ViewModel) {
        guard let errorMessage = viewModel.errorMessage else { return  }
        alertErrorMessage(message: errorMessage) { [weak self] in
            self?.fetchDefaultItemList()
        }
    }
    
    //MARK: Display result selection
    func displayShowDetail(viewModel: ItemAllList.SearchType.ViewModel) {
        performSegue(withIdentifier: "EditView", sender: nil)
    }
    func displayShowPdfViewer(viewModel: ItemAllList.SearchType.ViewModel) {
        performSegue(withIdentifier: "ViewPDF", sender: nil)
    }
    func didSelectItemTableView(viewModel: ItemAllList.SearchType.ViewModel) {
        performSegue(withIdentifier: "descriptionSegue", sender: nil)
    }
    
}

extension ItemAllListViewController : UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        search()
        return true
    }
}


extension ItemAllListViewController {
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchDefaultItemList()
    }
}
