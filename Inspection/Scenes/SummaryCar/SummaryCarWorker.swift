//
//  SummaryCarWorker.swift
//  Inspection
//
//  Created by Thanawat prathumset on 4/2/2564 BE.
//  Copyright (c) 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

typealias responseInspectionHandler = (_ response:SummaryCar.Something.Response) -> ()

class SummaryCarWorker
{
    
    
    //MARK:update
    func inspectionUpdate(model:InspectionCarModel, completion: @escaping responseInspectionHandler){
        print("❤️🐶🦊 inspection Update ❤️🐶🦊")
        switch DataController.shared.bookInType {
        case .CAR , .CARWRECK:
            let vehicleId = DataController.shared.receiverCarModel.vehicleId.trimWhiteSpace
            let request = createRequestInspection(model: model, vehicleId: vehicleId)
    
    
            showLoading()
    
            InspectionUpdateService().callServiceObject(request: request) {[weak self] (results) in
    
                hideLoading()
    
                switch results {
    
                case .success(_):
                    self?.inspectionGradeUpdate(from: model, completion: completion)
                case .failure(let error):
                    let response = SummaryCar.Something.Response(error: error.getMessage)
                    completion(response)
                }
            }
            
        case .MBIKE, .MBIKEWRECK:
            
            showLoading()

            let vehicleId = DataController.shared.receiverCarModel.vehicleId.trimWhiteSpace
            let request = createRequestInspectionMotobike(model: model, vehicleId: vehicleId)

            UpdateInspecMotorBikeService().callServiceObject(request: request) { results in

                hideLoading()

                switch results {

                case .success(_):
                    let response = SummaryCar.Something.Response()
                    completion(response)
                case .failure(let error):
                    let response = SummaryCar.Something.Response(error: error.getMessage)
                    completion(response)
                }
            }
            
            
        }
        
    }
    
    //MARK:create
    func inspection(model:InspectionCarModel, completion: @escaping responseInspectionHandler){
        print("❤️🐶🦊 inspection Create ❤️🐶🦊")
        switch DataController.shared.bookInType {
        case .CAR , .CARWRECK:
            let vehicleId = DataController.shared.receiverCarModel.vehicleId.trimWhiteSpace
            let request = createRequestInspection(model: model, vehicleId: vehicleId)

            showLoading()

            InspectionService().callServiceObject(request: request) {[weak self]  (results) in

                 hideLoading()

                 switch results {

                 case .success(_):
                    self?.inspectionGrade(from: model, completion: completion)
                 case .failure(let error):
                     let response = SummaryCar.Something.Response(error: error.getMessage)
                     completion(response)
                 }
             }
        case .MBIKE, .MBIKEWRECK:
            
            showLoading()

            let vehicleId = DataController.shared.receiverCarModel.vehicleId.trimWhiteSpace
            let request = createRequestInspectionMotobike(model: model, vehicleId: vehicleId)

            InspectionMotorBikeService().callServiceObject(request: request) { results in

                hideLoading()

                switch results {

                case .success(_):
                    let response = SummaryCar.Something.Response()
                    completion(response)
                case .failure(let error):
                    let response = SummaryCar.Something.Response(error: error.getMessage)
                    completion(response)
                }
            }
            
            
        }

         
        
    }
    
    //MARK:Grade
    func inspectionGrade(from model:InspectionCarModel, completion: @escaping responseInspectionHandler){
        print("❤️🐶🦊 Grade Create ❤️🐶🦊")
        let request = createRequestGrade(model: model)
        
        showLoading()
        
        GradeCreateService().callServiceObject(request: request) { (results) in
            
            hideLoading()
            
            switch results {
            
            case .success(_):
                let response = SummaryCar.Something.Response()
                completion(response)
            case .failure(let error):
                let response = SummaryCar.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
        
        
    }
    func inspectionGradeUpdate(from model:InspectionCarModel, completion: @escaping responseInspectionHandler){
        print("❤️🐶🦊 Grade Update ❤️🐶🦊")
        let request = createRequestGrade(model: model)
        
        
        showLoading()
        
        GradeUpdateService().callServiceObject(request: request) { (results) in
            
            hideLoading()
            
            switch results {
            
            case .success(_):
                let response = SummaryCar.Something.Response()
                completion(response)
            case .failure(let error):
                let response = SummaryCar.Something.Response(error: error.getMessage)
                completion(response)
            }
        }
        
    }
   
}

//MARK: Extension
extension SummaryCarWorker {
    func createRequestGrade(model:InspectionCarModel) -> GradeRequest {
        let receiverModel = DataController.shared.receiverCarModel
        let vehicleId = receiverModel.vehicleId.trimWhiteSpace
        let bookinNo = receiverModel.bookinNo?.trimWhiteSpace
        
        DataController.shared.receiverCarModel.redBookCondition = model.grade
        
        let request = GradeRequest(vehicleId: vehicleId,
                                   gradeSummary: model.grade,
                                   isExcellence1: model.e1Chehck,
                                   isExcellence2: model.e2Chehck,
                                   isExcellence3: model.e3Chehck,
                                   isExcellence4: model.e4Chehck,
                                   isExcellence5: model.e5Chehck,
                                   isGood1: model.g1Chehck,
                                   isGood2: model.g2Chehck,
                                   isGood3: model.g3Chehck,
                                   isGood4: model.g4Chehck,
                                   isAverage1: model.a1Chehck,
                                   isAverage2: model.a2Chehck,
                                   isAverage3: model.a3Chehck,
                                   isAverage4: model.a4Chehck,
                                   isFair1: model.f1Chehck,
                                   isFair2: model.f2Chehck,
                                   isFair3: model.f3Chehck,
                                   isFair4: model.f4Chehck,
                                   isFair5: model.f5Chehck,
                                   isFair6: model.f6Chehck,
                                   isFair7: model.f7Chehck,
                                   isFair8: model.f8Chehck,
                                   isFair9: model.f9Chehck,
                                   isFair10: model.f10Chehck,
                                   isFair11: model.f11Chehck,
                                   isPoor1: model.p1Chehck,
                                   isPoor2: model.p2Chehck,
                                   isPoor3: model.p3Chehck,
                                   isPoor4: model.p4Chehck,
                                   isPoor5: model.p5Chehck,
                                   isPoor6: model.p6Chehck,
                                   isPoor7: model.p7Chehck,
                                   isPoor8: model.p8Chehck,
                                   isPoor9: model.p9Chehck,
                                   isX: model.x1Chehck,
                                   isY: model.y1Chehck,
                                   bookInNumber: bookinNo)
        
        print("❤️🐶🦊\(request.toJSON())❤️🐶🦊")
        
        return request
    }
    func createRequestInspection(model:InspectionCarModel, vehicleId: String? = nil) -> InspectionRequest {
        let receiverModel = DataController.shared.receiverCarModel
        let bookinNo = receiverModel.bookinNo?.trimWhiteSpace
        let inspectionDate = model.date?.DateToServerFormatString()
        let inspector = DataController.shared.getUser()
        
        let currentDate = Date()
        let latestUpdatedDate = currentDate.DateToServerFormatString()
        
        DataController.shared.inspectionCarModel.latestUpdatedDate = currentDate
        
        
        let request = InspectionRequest(vehicleId: vehicleId,
                                        inspector: inspector,
                                        inspectorName: model.nameInspection,
                                        inspectionDate: inspectionDate,
                                        chassis: model.chessis,
                                        front: model.frontSide,
                                        back: model.backSide,
                                        rightSide: model.rightSideDriver,
                                        leftSide: model.leftSide,
                                        roof: model.roof,
                                        isFlood: model.isDrowned,
                                        bodySummary: model.bodySummary,
                                        isEngineWorks: model.isEngineWorks,
                                        fuelSystemId: model.fuelSystemId,
                                        isLubricatorLow: model.isLubricatorLow,
                                        engineSystemId: model.engineSystemId,
                                        gearTypeId: model.gasTypeId,
                                        isUseableGeneral: model.useableGeneral,
                                        isSoundAbnormal: model.soundAbnormalGeneral,
                                        isLeakFuel: model.leakFuelGeneral,
                                        isStainWater: model.stainWaterGeneral,
                                        isMachineLightShow: model.machineLightShowGeneral,
                                        isEngineAbnomal: model.engineAbnormalGeneral,
                                        isNeedRepair: model.needRepairGeneral,
                                        engineSummary: model.summaryEngine,
                                        driveShaftConditionId: model.driveShaftConditionId,
                                        driveShaftConditionNote: model.driveShaftNoteOther,
                                        suspensionConditionId: model.suspensionConditionId,
                                        suspensionConditionNote: model.underCarriageNoteOther,
                                        suspensionSummary: model.summaryUnderCarriage,
                                        gearSystemId: model.gearSystemId,
                                        gearConditionId: model.gearConditionId,
                                        driveShaftId: model.driveShaftId,
                                        is4WD: model.isGear4WD,
                                        gearSystemSummary: model.summaryGearSystem,
                                        isUseableSteerWheel: model.isUseableSteerWheel,
                                        isPowerSteering: model.isSteerWheelPower,
                                        steeringSummary: model.summarySteerWheelSystem,
                                        isUseableBrake: model.isUseableBrake,
                                        breakSystemSumary: model.summarysBrakeSystem,
                                        isAirCool: model.isAirCool,
                                        isCompressorAir: model.isCompresser,
                                        airSystemSummary: model.summaryAirSystem,
                                        isUseableGuage: model.isUseableGuage,
                                        warningLightNote: model.machineLightShow,
                                        gaugeSummary: model.summaryGaugeSystem,
                                        isFrontLightWorking: model.isFrontLight,
                                        isTurnLightWorking: model.isTurnLight,
                                        isBackLightWorking: model.isBackLight,
                                        isBrakeLightWoring: model.isBrakeLight,
                                        isBetteryWorking: model.isBettery,
                                        isHooterWorking: model.isHooter,
                                        isRoundGaugeWorking: model.isRoundGauge,
                                        isNavigator: model.isNavigator,
                                        isNavigatorBuiltIn: model.isNavigatorOnCar,
                                        isNavigatorCD: model.isCd,
                                        isNavigatorSdcard: model.isSDCard,
                                        isNavigatorNoCD: model.isNoCd,
                                        isNavigatorNoSdcard: model.isNoSdCard,
                                        electronicNote: model.note,
                                        electronicSummary: model.summaryElectronicDevice,
                                        bookInNumber: bookinNo,
                                        latestUpdatedDate: latestUpdatedDate,
                                        registrationProvince: model.registrationProvince,
                                        regisration: model.registration)
        
        print("❤️🐶🦊\(request.toJSON())❤️🐶🦊")
        
        return request
    }
    
    
    func createRequestInspectionMotobike(model:InspectionCarModel, vehicleId: String? = nil) -> InspectionMotorBikeModel {
        let receiverModel = DataController.shared.receiverCarModel
        let bookinNo = receiverModel.bookinNo?.trimWhiteSpace
        let inspectionDate = model.date?.DateToServerFormatString()
        let inspector = DataController.shared.getUser()
        
        let currentDate = Date()
        let latestUpdatedDate = currentDate.DateToServerFormatString()
        
        DataController.shared.inspectionCarModel.latestUpdatedDate = currentDate
        
        print("🛵 exteriorDamage count:\(model.exteriorDamage?.trimWhiteSpace.count)")
        let request = InspectionMotorBikeModel(bookInNumber: bookinNo,
                                               vehicleId: vehicleId,
                                               inspectorName: model.nameInspection,
                                               inspectionDate: inspectionDate,
                                               inspector: inspector,
                                               latestUpdatedDate: latestUpdatedDate,
                                               registrationProvince: model.registrationProvince,
                                               registration: model.registration,
                                               exteriorDamage: model.exteriorDamage?.trimWhiteSpace,
                                               isBattery: model.isBattery,
                                               batteryDamage: model.batteryDamage,
                                               isCDI: model.isCDI,
                                               cdiDamage: model.cdiDamage,
                                               isElectricStart: model.isElectricStart,
                                               electricStartDamage: model.electricStartDamage,
                                               isOdometer: model.isOdometer,
                                               odometerDamage: model.odometerDamage,
                                               isPedelStart: model.isPedelStart,
                                               pedelStartDamage: model.pedelStartDamage,
                                               isPlate: model.isPlate,
                                               plateDamage: model.plateDamage,
                                               frontTreadDepth: model.frontTreadDepth,
                                               rearTreadDepth: model.rearTreadDepth,
                                               fuelDeliveryType: model.fuelDeliveryType,
                                               fuelDeliveryDamage: model.fuelDeliveryDamage,
                                               isKey: model.isKey,
                                               isRemoteKey: model.isRemoteKey,
                                               isRemote: model.isRemote,
                                               isImmobilizarKey: model.isImmobilizarKey,
                                               isServiceable: model.isServiceable,
                                               isWillNotStart: model.isWillNotStart,
                                               isRequireAttention: model.isRequireAttention,
                                               isMissing: model.isMissing)
        
        print("🛵❤️🐶🦊\(request.toJSON())❤️🐶🦊")
        
        return request
    }
}

